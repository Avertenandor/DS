"""
–ú–æ–¥—É–ª—å: –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PLEX Dynamic Staking Manager
–û–ø–∏—Å–∞–Ω–∏–µ: SQLAlchemy –º–æ–¥–µ–ª–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

from sqlalchemy import create_engine, Column, Integer, String, DateTime, Numeric, Boolean, Text, Index
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.sql import func
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Optional, List, Dict

from config.settings import settings
from utils.logger import get_logger

logger = get_logger("PLEX_Database")

Base = declarative_base()

class Participant(Base):
    """–ú–æ–¥–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
    __tablename__ = 'participants'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    address = Column(String(42), unique=True, nullable=False, index=True)
    first_activity = Column(DateTime, nullable=False)
    last_activity = Column(DateTime, nullable=False)
    total_swaps = Column(Integer, default=0)
    total_volume_usd = Column(Numeric(20, 8), default=0)
    total_plex_bought = Column(Numeric(20, 9), default=0)  # 9 decimals –¥–ª—è PLEX
    total_plex_sold = Column(Numeric(20, 9), default=0)
    avg_swap_size_usd = Column(Numeric(20, 8), default=0)
    unique_days_active = Column(Integer, default=0)
    max_consecutive_days = Column(Integer, default=0)
    category = Column(String(50), default='Unknown', index=True)
    eligibility_score = Column(Numeric(5, 4), default=0)  # 0.0000 - 1.0000
    reward_tier = Column(String(20), default='None', index=True)
    is_qualified = Column(Boolean, default=False, index=True)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    __table_args__ = (
        Index('idx_participant_activity', 'last_activity', 'is_qualified'),
        Index('idx_participant_category', 'category', 'eligibility_score'),
        Index('idx_participant_volume', 'total_volume_usd'),
    )

class SwapTransaction(Base):
    """–ú–æ–¥–µ–ª—å swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    __tablename__ = 'swap_transactions'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    tx_hash = Column(String(66), unique=True, nullable=False, index=True)
    block_number = Column(Integer, nullable=False, index=True)
    block_timestamp = Column(DateTime, nullable=False, index=True)
    sender = Column(String(42), nullable=False, index=True)
    
    # Swap –¥–∞–Ω–Ω—ã–µ
    amount0_in = Column(Numeric(30, 9), default=0)
    amount1_in = Column(Numeric(30, 9), default=0)
    amount0_out = Column(Numeric(30, 9), default=0)
    amount1_out = Column(Numeric(30, 9), default=0)
    
    # –†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–ª—è
    plex_amount = Column(Numeric(20, 9), nullable=False)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ PLEX (+ –ø–æ–∫—É–ø–∫–∞, - –ø—Ä–æ–¥–∞–∂–∞)
    usdt_amount = Column(Numeric(20, 8), nullable=False)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT
    plex_price_usdt = Column(Numeric(20, 8), nullable=False)  # –¶–µ–Ω–∞ PLEX –≤ USDT
    volume_usd = Column(Numeric(20, 8), nullable=False)  # –û–±—ä–µ–º –≤ USD
    is_buy = Column(Boolean, nullable=False, index=True)  # True = –ø–æ–∫—É–ø–∫–∞ PLEX, False = –ø—Ä–æ–¥–∞–∂–∞
    
    # –ì–∞–∑ –∏ –∫–æ–º–∏—Å—Å–∏–∏
    gas_used = Column(Integer)
    gas_price = Column(Numeric(20, 0))
    gas_fee_bnb = Column(Numeric(20, 18))
    gas_fee_usd = Column(Numeric(10, 2))
    
    created_at = Column(DateTime, default=func.now())
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    __table_args__ = (
        Index('idx_swap_sender_time', 'sender', 'block_timestamp'),
        Index('idx_swap_volume', 'volume_usd', 'is_buy'),
        Index('idx_swap_time_volume', 'block_timestamp', 'volume_usd'),
    )

class DailyActivity(Base):
    """–ú–æ–¥–µ–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    __tablename__ = 'daily_activity'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    participant_address = Column(String(42), nullable=False, index=True)
    activity_date = Column(DateTime, nullable=False, index=True)  # –î–∞—Ç–∞ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
    
    # –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    swaps_count = Column(Integer, default=0)
    volume_usd = Column(Numeric(20, 8), default=0)
    plex_bought = Column(Numeric(20, 9), default=0)
    plex_sold = Column(Numeric(20, 9), default=0)
    net_plex_change = Column(Numeric(20, 9), default=0)  # –ß–∏—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ PLEX
    avg_price_usdt = Column(Numeric(20, 8), default=0)
    
    created_at = Column(DateTime, default=func.now())
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –¥–µ–Ω—å
    __table_args__ = (
        Index('idx_daily_unique', 'participant_address', 'activity_date', unique=True),
        Index('idx_daily_volume', 'activity_date', 'volume_usd'),
    )

class AnalysisSession(Base):
    """–ú–æ–¥–µ–ª—å —Å–µ—Å—Å–∏–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    __tablename__ = 'analysis_sessions'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    session_id = Column(String(36), unique=True, nullable=False)  # UUID
    start_time = Column(DateTime, nullable=False)
    end_time = Column(DateTime)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    start_block = Column(Integer, nullable=False)
    end_block = Column(Integer, nullable=False)
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_participants = Column(Integer, default=0)
    total_swaps = Column(Integer, default=0)
    total_volume_usd = Column(Numeric(20, 8), default=0)
    qualified_participants = Column(Integer, default=0)
    
    # –°—Ç–∞—Ç—É—Å
    status = Column(String(20), default='Running')  # Running, Completed, Failed
    error_message = Column(Text)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    analysis_version = Column(String(10), default='1.0.0')
    created_at = Column(DateTime, default=func.now())

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î"""
        self.engine = create_engine(
            settings.database_url,
            pool_pre_ping=True,
            pool_recycle=3600,
            echo=settings.is_debug()  # –í–∫–ª—é—á–∞–µ–º SQL –ª–æ–≥–∏ –≤ debug —Ä–µ–∂–∏–º–µ
        )
        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)
        
        logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {settings.database_url}")

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        try:
            Base.metadata.create_all(bind=self.engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            raise

    def get_session(self) -> Session:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î"""
        return self.SessionLocal()

    def save_participant(self, session: Session, participant_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            existing = session.query(Participant).filter_by(
                address=participant_data['address']
            ).first()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                for key, value in participant_data.items():
                    if hasattr(existing, key):
                        setattr(existing, key, value)
                existing.updated_at = datetime.now()
                participant = existing
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                participant = Participant(**participant_data)
                session.add(participant)
            
            session.commit()
            return participant
            
        except Exception as e:
            session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant_data.get('address')}: {e}")
            raise

    def save_swap_transaction(self, session: Session, swap_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ tx_hash
            existing = session.query(SwapTransaction).filter_by(
                tx_hash=swap_data['tx_hash']
            ).first()
            
            if existing:
                return existing  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            swap = SwapTransaction(**swap_data)
            session.add(swap)
            session.commit()
            return swap
            
        except Exception as e:
            session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è swap {swap_data.get('tx_hash')}: {e}")
            raise

    def save_daily_activity(self, session: Session, activity_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            existing = session.query(DailyActivity).filter_by(
                participant_address=activity_data['participant_address'],
                activity_date=activity_data['activity_date']
            ).first()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                for key, value in activity_data.items():
                    if hasattr(existing, key):
                        setattr(existing, key, value)
                activity = existing
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                activity = DailyActivity(**activity_data)
                session.add(activity)
            
            session.commit()
            return activity
            
        except Exception as e:
            session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            raise

    def get_participants_by_category(self, session: Session, category: str) -> List[Participant]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            return session.query(Participant).filter_by(category=category).all()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
            return []

    def get_qualified_participants(self, session: Session) -> List[Participant]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            return session.query(Participant).filter_by(is_qualified=True)\
                         .order_by(Participant.eligibility_score.desc()).all()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return []

    def get_participant_stats(self, session: Session) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            total = session.query(Participant).count()
            qualified = session.query(Participant).filter_by(is_qualified=True).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = session.query(
                Participant.category, 
                func.count(Participant.id)
            ).group_by(Participant.category).all()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–≥—Ä–∞–¥–∞–º
            tiers = session.query(
                Participant.reward_tier,
                func.count(Participant.id)
            ).group_by(Participant.reward_tier).all()
            
            return {
                'total_participants': total,
                'qualified_participants': qualified,
                'qualification_rate': (qualified / total * 100) if total > 0 else 0,
                'categories': dict(categories),
                'reward_tiers': dict(tiers)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def cleanup_old_sessions(self, session: Session, days_old: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days_old)
            deleted = session.query(AnalysisSession).filter(
                AnalysisSession.created_at < cutoff_date
            ).delete()
            session.commit()
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∞–Ω–∞–ª–∏–∑–∞")
            return deleted
        except Exception as e:
            session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
            return 0
