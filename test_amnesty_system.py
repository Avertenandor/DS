"""
PLEX Dynamic Staking Manager - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AmnestyManager
–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import unittest
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List

from core.participant_analyzer_v2 import ParticipantData, CategoryAnalyzer, EligibilityEngine, AmnestyManager
from utils.logger import get_logger

logger = get_logger(__name__)


class TestAmnestyManager(unittest.TestCase):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–º–Ω–∏—Å—Ç–∏–π."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        self.amnesty_manager = AmnestyManager()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        self.test_participants = self._create_test_participants()
        
    def _create_test_participants(self) -> Dict[str, ParticipantData]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞–º–Ω–∏—Å—Ç–∏–π."""
        participants = {}
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ 1: VIP —Å –Ω–µ–±–æ–ª—å—à–∏–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º
        participants["0x1111"] = ParticipantData(
            address="0x1111",
            first_activity=datetime.now() - timedelta(days=30),
            last_activity=datetime.now() - timedelta(days=2),
            total_swaps=500,
            total_volume_usd=Decimal("50000"),  # VIP —É—Ä–æ–≤–µ–Ω—å
            total_plex_bought=Decimal("25000"),
            total_plex_sold=Decimal("15000"),
            avg_swap_size_usd=Decimal("100"),
            unique_days_active=25,
            consecutive_days=5,
            max_consecutive_days=10,
            category="VIP",
            eligibility_score=85.0,
            reward_tier="Gold",
            is_qualified=True
        )
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ 2: Premium —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
        participants["0x2222"] = ParticipantData(
            address="0x2222",
            first_activity=datetime.now() - timedelta(days=20),
            last_activity=datetime.now() - timedelta(days=1),
            total_swaps=150,
            total_volume_usd=Decimal("15000"),  # Premium —É—Ä–æ–≤–µ–Ω—å
            total_plex_bought=Decimal("8000"),
            total_plex_sold=Decimal("7500"),
            avg_swap_size_usd=Decimal("100"),
            unique_days_active=15,
            consecutive_days=2,
            max_consecutive_days=5,
            category="Premium",
            eligibility_score=65.0,
            reward_tier="Silver",
            is_qualified=False
        )
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ 3: Standard –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        participants["0x3333"] = ParticipantData(
            address="0x3333",
            first_activity=datetime.now() - timedelta(days=10),
            last_activity=datetime.now(),
            total_swaps=50,
            total_volume_usd=Decimal("5000"),  # Standard —É—Ä–æ–≤–µ–Ω—å
            total_plex_bought=Decimal("3000"),
            total_plex_sold=Decimal("1000"),
            avg_swap_size_usd=Decimal("100"),
            unique_days_active=8,
            consecutive_days=3,
            max_consecutive_days=5,
            category="Standard",
            eligibility_score=75.0,
            reward_tier="Bronze",
            is_qualified=True
        )
          # –£—á–∞—Å—Ç–Ω–∏–∫ 4: VIP —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
        participants["0x4444"] = ParticipantData(
            address="0x4444",
            first_activity=datetime.now() - timedelta(days=60),
            last_activity=datetime.now() - timedelta(days=30),  # –î–æ–ª–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
            total_swaps=1000,
            total_volume_usd=Decimal("100000"),  # –í—ã—Å–æ–∫–∏–π VIP
            total_plex_bought=Decimal("60000"),
            total_plex_sold=Decimal("55000"),
            avg_swap_size_usd=Decimal("100"),
            unique_days_active=10,
            consecutive_days=0,
            max_consecutive_days=8,
            category="VIP",
            eligibility_score=30.0,  # –ù–∏–∑–∫–∏–π –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            reward_tier="None",
            is_qualified=False
        )
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ 5: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        participants["0x5555"] = ParticipantData(
            address="0x5555",
            first_activity=datetime.now() - timedelta(days=3),
            last_activity=datetime.now(),
            total_swaps=5,
            total_volume_usd=Decimal("500"),
            total_plex_bought=Decimal("300"),
            total_plex_sold=Decimal("100"),
            avg_swap_size_usd=Decimal("100"),
            unique_days_active=3,
            consecutive_days=3,
            max_consecutive_days=3,
            category="Standard",
            eligibility_score=45.0,  # –ù–∏–∑–∫–∏–π –∏–∑-–∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏
            reward_tier="None",
            is_qualified=False
        )
        
        return participants
    
    def test_amnesty_rules_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª –∞–º–Ω–∏—Å—Ç–∏–π."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª –∞–º–Ω–∏—Å—Ç–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        self.assertTrue(hasattr(self.amnesty_manager, 'amnesty_rules'))
        self.assertIsInstance(self.amnesty_manager.amnesty_rules, dict)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        expected_categories = ["VIP", "Premium", "Standard"]
        for category in expected_categories:
            self.assertIn(category, self.amnesty_manager.amnesty_rules)
            
        logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –∞–º–Ω–∏—Å—Ç–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_vip_amnesty_application(self):
        """–¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–º–Ω–∏—Å—Ç–∏–π –¥–ª—è VIP —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–π –¥–ª—è VIP —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        # VIP —Å –Ω–µ–±–æ–ª—å—à–∏–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º
        participant = self.test_participants["0x1111"]
        result = self.amnesty_manager.apply_amnesty(participant)
        
        self.assertTrue(result.amnesty_granted)
        self.assertEqual(result.amnesty_level, "partial")
        self.assertIn("VIP —Å—Ç–∞—Ç—É—Å", result.amnesty_reason)
        
        # VIP —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
        participant_critical = self.test_participants["0x4444"]
        result_critical = self.amnesty_manager.apply_amnesty(participant_critical)
        
        # –î–∞–∂–µ VIP –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∞–º–Ω–∏—Å—Ç–∏—é –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
        if result_critical.amnesty_granted:
            self.assertEqual(result_critical.amnesty_level, "conditional")
        
        logger.info("‚úÖ –ê–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è VIP –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    def test_premium_amnesty_application(self):
        """–¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–º–Ω–∏—Å—Ç–∏–π –¥–ª—è Premium —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–π –¥–ª—è Premium —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        participant = self.test_participants["0x2222"]
        result = self.amnesty_manager.apply_amnesty(participant)
        
        # Premium —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª–æ–≤–Ω—É—é –∞–º–Ω–∏—Å—Ç–∏—é
        if result.amnesty_granted:
            self.assertIn(result.amnesty_level, ["partial", "conditional"])
        
        logger.info("‚úÖ –ê–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è Premium –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    def test_standard_amnesty_application(self):
        """–¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–º–Ω–∏—Å—Ç–∏–π –¥–ª—è Standard —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–π –¥–ª—è Standard —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        # Standard –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π - –∞–º–Ω–∏—Å—Ç–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        participant_clean = self.test_participants["0x3333"]
        result_clean = self.amnesty_manager.apply_amnesty(participant_clean)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π, –∞–º–Ω–∏—Å—Ç–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if not participant_clean.eligibility_violations:
            self.assertFalse(result_clean.amnesty_granted)
            self.assertEqual(result_clean.amnesty_reason, "–ê–º–Ω–∏—Å—Ç–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∞–º–Ω–∏—Å—Ç–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        participant_new = self.test_participants["0x5555"]
        result_new = self.amnesty_manager.apply_amnesty(participant_new)
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—ã—á–Ω–æ –ø–æ–ª—É—á–∞—é—Ç –∞–º–Ω–∏—Å—Ç–∏—é
        self.assertTrue(result_new.amnesty_granted)
        
        logger.info("‚úÖ –ê–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è Standard –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    def test_amnesty_conditions_validation(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –∞–º–Ω–∏—Å—Ç–∏–π."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∞–º–Ω–∏—Å—Ç–∏–π...")
        
        for address, participant in self.test_participants.items():
            result = self.amnesty_manager.apply_amnesty(participant)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            self.assertIsNotNone(result.participant_address)
            self.assertIsNotNone(result.amnesty_granted)
            self.assertIsNotNone(result.amnesty_reason)
            
            if result.amnesty_granted:
                self.assertIsNotNone(result.amnesty_level)
                self.assertIn(result.amnesty_level, ["full", "partial", "conditional"])
                
                if result.conditions:
                    self.assertIsInstance(result.conditions, list)
                    for condition in result.conditions:
                        self.assertIsInstance(condition, str)
            
            logger.info(f"üìä {address}: –ê–º–Ω–∏—Å—Ç–∏—è={'–î–∞' if result.amnesty_granted else '–ù–µ—Ç'}, "
                       f"–£—Ä–æ–≤–µ–Ω—å={result.amnesty_level if result.amnesty_granted else 'N/A'}")
        
        logger.info("‚úÖ –£—Å–ª–æ–≤–∏—è –∞–º–Ω–∏—Å—Ç–∏–π –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
    
    def test_amnesty_statistics(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–º–Ω–∏—Å—Ç–∏–π."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–º–Ω–∏—Å—Ç–∏–π...")
        
        results = []
        for participant in self.test_participants.values():
            result = self.amnesty_manager.apply_amnesty(participant)
            results.append(result)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        granted_count = sum(1 for r in results if r.amnesty_granted)
        total_count = len(results)
        
        stats = {
            'total_participants': total_count,
            'amnesties_granted': granted_count,
            'amnesties_denied': total_count - granted_count,
            'amnesty_rate': (granted_count / total_count) * 100 if total_count > 0 else 0
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–º–Ω–∏—Å—Ç–∏–π:")
        logger.info(f"   –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total_participants']}")
        logger.info(f"   –ê–º–Ω–∏—Å—Ç–∏–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['amnesties_granted']}")
        logger.info(f"   –ê–º–Ω–∏—Å—Ç–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['amnesties_denied']}")
        logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –∞–º–Ω–∏—Å—Ç–∏–π: {stats['amnesty_rate']:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—É–º–Ω–∞
        self.assertGreaterEqual(stats['amnesty_rate'], 0)
        self.assertLessEqual(stats['amnesty_rate'], 100)
        
        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–º–Ω–∏—Å—Ç–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
    
    def test_amnesty_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –∞–º–Ω–∏—Å—Ç–∏–π."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        empty_participant = ParticipantData(
            address="0x0000",
            total_volume=Decimal("0"),
            transaction_count=0,
            category="Unknown",
            last_activity=None,
            balance=Decimal("0"),
            daily_purchases=[],
            eligibility_violations=[]
        )
        
        result = self.amnesty_manager.apply_amnesty(empty_participant)
        
        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–∞–∂–µ –ø—É—Å—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        self.assertIsNotNone(result)
        self.assertIsNotNone(result.amnesty_granted)
        
        logger.info("‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")


def run_amnesty_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ AmnestyManager."""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AmnestyManager...")
    
    suite = unittest.TestLoader().loadTestsFromTestCase(TestAmnestyManager)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    if result.wasSuccessful():
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã AmnestyManager –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã AmnestyManager –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False


if __name__ == "__main__":
    run_amnesty_tests()
