"""
–°–∫—Ä–∏–ø—Ç: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ QuickNode BSC
–û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import sys
import time
from datetime import datetime
sys.path.append('..')

from config.settings import settings
from config.constants import (
    TOKEN_ADDRESS, PLEX_USDT_POOL, MULTICALL3_BSC,
    TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS
)
from blockchain.node_client import Web3Manager
from blockchain.swap_analyzer import SwapAnalyzer
from utils.logger import get_logger
from utils.converters import TokenConverter, format_plex_amount

logger = get_logger("ConnectionTest")


def test_basic_connection():
    """–¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ QuickNode"""
    print("üîó –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ QuickNode")
    print("=" * 60)
    
    try:
        manager = Web3Manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if manager.w3_http.is_connected():
            print("‚úÖ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        latest_block = manager.get_latest_block_number()
        print(f"üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: {latest_block:,}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
        block_data = manager.get_block(latest_block)
        block_time = datetime.fromtimestamp(block_data['timestamp'])
        print(f"üïê –í—Ä–µ–º—è –±–ª–æ–∫–∞: {block_time}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket
        if manager.w3_ws and manager.w3_ws.is_connected():
            print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def test_token_contract():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ PLEX"""
    print("\nü™ô –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ PLEX")
    print("=" * 60)
    
    try:
        manager = Web3Manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        code = manager.w3_http.eth.get_code(TOKEN_ADDRESS)
        if len(code) > 0:
            print(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç PLEX –Ω–∞–π–¥–µ–Ω: {TOKEN_ADDRESS}")
        else:
            print(f"‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç PLEX –ù–ï –Ω–∞–π–¥–µ–Ω: {TOKEN_ADDRESS}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ call
        try:
            # –í—ã–∑–æ–≤ name()
            name_call = manager.call_contract_function(TOKEN_ADDRESS, "0x06fdde03")  # name() selector
            print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
            
            # –í—ã–∑–æ–≤ symbol()
            symbol_call = manager.call_contract_function(TOKEN_ADDRESS, "0x95d89b41")  # symbol() selector
            print(f"üî§ –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
            
            # –í—ã–∑–æ–≤ decimals()
            decimals_call = manager.call_contract_function(TOKEN_ADDRESS, "0x313ce567")  # decimals() selector
            decimals = int(decimals_call, 16)
            
            if decimals == TOKEN_DECIMALS:
                print(f"‚úÖ Decimals –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {decimals}")
            else:
                print(f"‚ùå Decimals –ù–ï–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {decimals} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {TOKEN_DECIMALS})")
                return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
        return False


def test_pool_contract():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–∞ PLEX/USDT"""
    print("\nüèä –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–∞ PLEX/USDT")
    print("=" * 60)
    
    try:
        manager = Web3Manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞
        code = manager.w3_http.eth.get_code(PLEX_USDT_POOL)
        if len(code) > 0:
            print(f"‚úÖ –ü—É–ª PLEX/USDT –Ω–∞–π–¥–µ–Ω: {PLEX_USDT_POOL}")
        else:
            print(f"‚ùå –ü—É–ª PLEX/USDT –ù–ï –Ω–∞–π–¥–µ–Ω: {PLEX_USDT_POOL}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—É–ª–µ
        try:
            token0_call = manager.call_contract_function(PLEX_USDT_POOL, "0x0dfe1681")  # token0()
            token1_call = manager.call_contract_function(PLEX_USDT_POOL, "0xd21220a7")  # token1()
            
            token0_address = "0x" + token0_call[-40:]
            token1_address = "0x" + token1_call[-40:]
            
            print(f"üîÑ Token0: {token0_address}")
            print(f"üîÑ Token1: {token1_address}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–¥–∏–Ω –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ - PLEX
            if token0_address.lower() == TOKEN_ADDRESS.lower():
                print("‚úÖ PLEX –Ω–∞–π–¥–µ–Ω –∫–∞–∫ token0")
            elif token1_address.lower() == TOKEN_ADDRESS.lower():
                print("‚úÖ PLEX –Ω–∞–π–¥–µ–Ω –∫–∞–∫ token1")
            else:
                print("‚ùå PLEX –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø—É–ª–µ")
                return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø—É–ª–∞: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–∞: {e}")
        return False


def test_multicall_contract():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Multicall3"""
    print("\nüìû –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Multicall3")
    print("=" * 60)
    
    try:
        manager = Web3Manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Multicall3
        code = manager.w3_http.eth.get_code(MULTICALL3_BSC)
        if len(code) > 0:
            print(f"‚úÖ Multicall3 –Ω–∞–π–¥–µ–Ω: {MULTICALL3_BSC}")
        else:
            print(f"‚ùå Multicall3 –ù–ï –Ω–∞–π–¥–µ–Ω: {MULTICALL3_BSC}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤
        try:
            # –í—ã–∑–æ–≤ getBlockNumber()
            block_call = manager.call_contract_function(MULTICALL3_BSC, "0x42cbb15c")
            block_number = int(block_call, 16)
            print(f"üì¶ Multicall3 block number: {block_number:,}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Multicall3: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Multicall3: {e}")
        return False


def test_recent_transfers():
    """–¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö Transfer —Å–æ–±—ã—Ç–∏–π"""
    print("\nüì§ –¢–ï–°–¢ 5: –ü–æ—Å–ª–µ–¥–Ω–∏–µ Transfer —Å–æ–±—ã—Ç–∏—è PLEX")
    print("=" * 60)
    
    try:
        manager = Web3Manager()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –±–ª–æ–∫–æ–≤
        latest_block = manager.get_latest_block_number()
        start_block = latest_block - 100
        
        print(f"üîç –ü–æ–∏—Å–∫ Transfer —Å–æ–±—ã—Ç–∏–π –≤ –±–ª–æ–∫–∞—Ö {start_block:,} - {latest_block:,}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è Transfer —Å–æ–±—ã—Ç–∏–π
        transfer_signature = "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        filter_params = {
            'fromBlock': hex(start_block),
            'toBlock': hex(latest_block),
            'address': TOKEN_ADDRESS,
            'topics': [transfer_signature]
        }
        
        logs = manager.get_logs(filter_params)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(logs)} Transfer —Å–æ–±—ã—Ç–∏–π")
        
        if logs:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–±—ã—Ç–∏—è
            for i, log in enumerate(logs[:3]):
                from_addr = "0x" + log['topics'][1].hex()[-40:]
                to_addr = "0x" + log['topics'][2].hex()[-40:]
                value_wei = int(log['data'], 16)
                value_tokens = TokenConverter.wei_to_token(value_wei)
                
                print(f"   {i+1}. From: {from_addr[:10]}... To: {to_addr[:10]}... Amount: {format_plex_amount(value_tokens)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Transfer —Å–æ–±—ã—Ç–∏–π: {e}")
        return False


def test_recent_swaps():
    """–¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö Swap —Å–æ–±—ã—Ç–∏–π"""
    print("\nüîÑ –¢–ï–°–¢ 6: –ü–æ—Å–ª–µ–¥–Ω–∏–µ Swap —Å–æ–±—ã—Ç–∏—è PLEX/USDT")
    print("=" * 60)
    
    try:
        analyzer = SwapAnalyzer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –±–ª–æ–∫–æ–≤
        latest_block = analyzer.web3_manager.get_latest_block_number()
        start_block = latest_block - 50
        
        print(f"üîç –ü–æ–∏—Å–∫ Swap —Å–æ–±—ã—Ç–∏–π –≤ –±–ª–æ–∫–∞—Ö {start_block:,} - {latest_block:,}")
        
        swaps = analyzer.get_pool_swaps(start_block, latest_block)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(swaps)} Swap —Å–æ–±—ã—Ç–∏–π")
        
        if swaps:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 swap'–∞
            for i, swap in enumerate(swaps[:3]):
                direction_emoji = "üìà" if swap['direction'] == 'buy' else "üìâ"
                print(f"   {i+1}. {direction_emoji} {swap['direction'].upper()}: {format_plex_amount(swap['plex_amount'])} (${swap['usd_value']:.2f})")
                print(f"      To: {swap['to'][:16]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Swap —Å–æ–±—ã—Ç–∏–π: {e}")
        return False


def test_api_credits_usage():
    """–¢–µ—Å—Ç 7: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    print("\nüí≥ –¢–ï–°–¢ 7: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –∫—Ä–µ–¥–∏—Ç–æ–≤")
    print("=" * 60)
    
    try:
        manager = Web3Manager()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        initial_credits = manager.api_usage.credits_used
        initial_requests = manager.api_usage.requests_count
        
        print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {initial_credits}")
        print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {initial_requests}")
        
        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
        
        manager.get_latest_block_number()  # +20 –∫—Ä–µ–¥–∏—Ç–æ–≤
        manager.get_block('latest')        # +20 –∫—Ä–µ–¥–∏—Ç–æ–≤
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.api_usage.get_usage_stats()
        
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['credits_used'] - initial_credits}")
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['requests_count'] - initial_requests}")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å: {stats['avg_credits_per_request']:.1f}")
        print(f"üöÄ –¢–µ–∫—É—â–∏–π RPS: {stats['current_rps']}")
        print(f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: {stats['monthly_projection']:,.0f} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API: {e}")
        return False


def test_performance():
    """–¢–µ—Å—Ç 8: –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–ï–°–¢ 8: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    print("=" * 60)
    
    try:
        manager = Web3Manager()
        
        # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
        print("üöÄ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤...")
        start_time = time.time()
        
        latest_block = manager.get_latest_block_number()
        blocks_to_test = 5
        
        for i in range(blocks_to_test):
            block_num = latest_block - i
            block_data = manager.get_block(block_num)
        
        elapsed = time.time() - start_time
        blocks_per_second = blocks_to_test / elapsed
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {blocks_to_test} –±–ª–æ–∫–æ–≤ –∑–∞ {elapsed:.2f}s")
        print(f"üìä –°–∫–æ—Ä–æ—Å—Ç—å: {blocks_per_second:.1f} –±–ª–æ–∫–æ–≤/—Å–µ–∫")
        
        # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤
        print("üíæ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        start_time = time.time()
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–Ω–µ –∏–∑ –∫—ç—à–∞)
        block1 = manager.get_latest_block_number(use_cache=False)
        first_call_time = time.time() - start_time        
        start_time = time.time()
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–∏–∑ –∫—ç—à–∞)
        block2 = manager.get_latest_block_number(use_cache=True)
        cached_call_time = time.time() - start_time
        
        print(f"‚úÖ –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {first_call_time*1000:.1f}ms")
        print(f"‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤: {cached_call_time*1000:.1f}ms")
        
        if cached_call_time > 0 and cached_call_time < first_call_time:
            speedup = first_call_time / cached_call_time
            print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –∫—ç—à–∞: {speedup:.1f}x")
        elif cached_call_time == 0:
            print(f"üöÄ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!")
        else:
            print(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –¥–∞–ª —É—Å–∫–æ—Ä–µ–Ω–∏—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ PLEX Dynamic Staking Manager - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 80)
    print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   QuickNode HTTP: {settings.quicknode_http}")
    print(f"   Token: {TOKEN_NAME} ({TOKEN_SYMBOL})")
    print(f"   Decimals: {TOKEN_DECIMALS}")
    print(f"   Pool: {PLEX_USDT_POOL}")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        test_basic_connection,
        test_token_contract,
        test_pool_contract,
        test_multicall_contract,
        test_recent_transfers,
        test_recent_swaps,
        test_api_credits_usage,
        test_performance
    ]
    
    passed = 0
    total = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
                print("‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ")
            else:
                print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ –ü–†–ï–†–í–ê–ù: {e}")
        
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 80)
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
