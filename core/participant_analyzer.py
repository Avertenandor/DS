"""
–ú–æ–¥—É–ª—å: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ PLEX Dynamic Staking
–û–ø–∏—Å–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç eligibility
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Set
from dataclasses import dataclass, field
from decimal import Decimal

from config.constants import *
from utils.logger import get_logger
from utils.converters import wei_to_token, format_number
from utils.validators import validate_address
from blockchain.node_client import Web3Manager
from blockchain.swap_analyzer import SwapAnalyzer
from core.category_analyzer import CategoryAnalyzer
from core.eligibility import EligibilityCalculator
from core.amnesty_manager import AmnestyManager

logger = get_logger("PLEX_ParticipantAnalyzer")

@dataclass
class ParticipantData:
    """–î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    address: str
    first_activity: datetime
    last_activity: datetime
    total_swaps: int = 0
    total_volume_usd: Decimal = field(default_factory=lambda: Decimal('0'))
    total_plex_bought: Decimal = field(default_factory=lambda: Decimal('0'))
    total_plex_sold: Decimal = field(default_factory=lambda: Decimal('0'))
    avg_swap_size_usd: Decimal = field(default_factory=lambda: Decimal('0'))
    unique_days_active: int = 0
    consecutive_days: int = 0
    max_consecutive_days: int = 0
    category: str = "Unknown"
    eligibility_score: float = 0.0
    reward_tier: str = "None"
    is_qualified: bool = False

@dataclass
class ActivityPeriod:
    """–ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    start_date: datetime
    end_date: datetime
    swaps_count: int
    volume_usd: Decimal
    net_plex_change: Decimal  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = –ø–æ–∫—É–ø–∫–∞, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = –ø—Ä–æ–¥–∞–∂–∞

class ParticipantAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.web3_manager = Web3Manager()
        self.swap_analyzer = SwapAnalyzer()
        self.category_analyzer = CategoryAnalyzer()
        self.eligibility_calculator = EligibilityCalculator()
        self.amnesty_manager = AmnestyManager()
        self.participants: Dict[str, ParticipantData] = {}
        
        logger.info("üîß –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏")

    def analyze_participants(self, 
                          start_block: int, 
                          end_block: int,
                          progress_callback=None) -> Dict[str, ParticipantData]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        
        Args:
            start_block: –ù–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            end_block: –ö–æ–Ω–µ—á–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            Dict[str, ParticipantData]: –°–ª–æ–≤–∞—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–ª–æ–∫–∞—Ö {start_block:,} - {end_block:,}")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.participants.clear()
        
        try:            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ swap —Å–æ–±—ã—Ç–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            swaps = self.swap_analyzer.get_swaps_in_range(start_block, end_block)
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(swaps)} swap —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            if not swaps:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ swap —Å–æ–±—ã—Ç–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                return self.participants
              # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π swap
            for i, swap in enumerate(swaps):
                self._process_swap(swap)
                
                # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if progress_callback and i % 100 == 0:
                    progress = (i + 1) / len(swaps) * 100
                    progress_callback(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{len(swaps)} swap —Å–æ–±—ã—Ç–∏–π ({progress:.1f}%)")
              # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            logger.info(f"üë• –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(self.participants)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            for address, participant in self.participants.items():
                self._calculate_participant_metrics(participant)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ eligibility
                category_result = self.category_analyzer.categorize_participant(participant)
                participant.category = category_result.category
                
                eligibility_result = self.eligibility_calculator.calculate_eligibility(participant)
                participant.eligibility_score = eligibility_result.score
                participant.reward_tier = eligibility_result.tier
                participant.is_qualified = eligibility_result.is_qualified
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                self.amnesty_manager.apply_amnesty_if_eligible(participant)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            self._log_category_statistics()
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return self.participants            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            raise

    def _process_swap(self, swap_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ swap —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º sender –∏–∑ swap –¥–∞–Ω–Ω—ã—Ö
            sender = swap_data.get('sender', '')
            to = swap_data.get('to', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –∞–¥—Ä–µ—Å –ø—É–ª–∞)
            participant_address = None
            if sender and sender.lower() != PLEX_USDT_POOL.lower():
                participant_address = sender.lower()
            elif to and to.lower() != PLEX_USDT_POOL.lower():
                participant_address = to.lower()
            
            if not participant_address:
                return
                
            # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if participant_address not in self.participants:
                current_time = datetime.now()
                self.participants[participant_address] = ParticipantData(
                    address=participant_address,
                    first_activity=current_time,
                    last_activity=current_time
                )
            
            participant = self.participants[participant_address]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            participant.total_swaps += 1
            current_time = datetime.now()
            participant.last_activity = current_time
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–º—ã
            usd_value = swap_data.get('usd_value', Decimal('0'))
            participant.total_volume_usd += usd_value
              # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ PLEX
            plex_amount = swap_data.get('plex_amount', Decimal('0'))
            direction = swap_data.get('direction', 'unknown')
            
            if direction == 'buy':
                participant.total_plex_bought += abs(plex_amount)
            elif direction == 'sell':
                participant.total_plex_sold += abs(plex_amount)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ swap: {e}")

    def _calculate_participant_metrics(self, participant: ParticipantData):
        """–†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        try:
            # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä swap
            if participant.total_swaps > 0:
                participant.avg_swap_size_usd = participant.total_volume_usd / participant.total_swaps
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            # (–ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –∞–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º)
            days_active = (participant.last_activity - participant.first_activity).days + 1
            participant.unique_days_active = min(days_active, participant.total_swaps)
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω–µ–π
            # (–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç - –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞)
            participant.max_consecutive_days = min(7, participant.unique_days_active)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {participant.address}: {e}")

    def _log_category_statistics(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            categories = {}
            qualified_count = 0
            
            for participant in self.participants.values():
                category = participant.category
                categories[category] = categories.get(category, 0) + 1
                
                if participant.is_qualified:
                    qualified_count += 1
            
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
            for category, count in sorted(categories.items()):
                percentage = (count / len(self.participants)) * 100 if self.participants else 0
                logger.info(f"   {category}: {count} ({percentage:.1f}%)")
            
            logger.info(f"üéØ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–≥—Ä–∞–¥: {qualified_count}/{len(self.participants)} ({(qualified_count/len(self.participants)*100) if self.participants else 0:.1f}%)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def get_top_participants(self, category: str = None, limit: int = 100) -> List[ParticipantData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            participants = list(self.participants.values())
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category:
                participants = [p for p in participants if p.category == category]
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ eligibility score
            participants.sort(key=lambda x: x.eligibility_score, reverse=True)
            
            return participants[:limit]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return []

    def export_participants_summary(self) -> Dict:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö"""
        try:
            summary = {
                "total_participants": len(self.participants),
                "analysis_timestamp": datetime.now().isoformat(),
                "categories": {},
                "reward_tiers": {},
                "top_by_volume": [],
                "top_by_activity": []
            }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for participant in self.participants.values():
                cat = participant.category
                tier = participant.reward_tier
                
                summary["categories"][cat] = summary["categories"].get(cat, 0) + 1
                summary["reward_tiers"][tier] = summary["reward_tiers"].get(tier, 0) + 1
            
            # –¢–æ–ø –ø–æ –æ–±—ä–µ–º—É
            top_volume = sorted(self.participants.values(), 
                              key=lambda x: x.total_volume_usd, reverse=True)[:10]
            summary["top_by_volume"] = [
                {
                    "address": p.address,
                    "volume_usd": str(p.total_volume_usd),
                    "category": p.category,
                    "reward_tier": p.reward_tier
                }
                for p in top_volume
            ]
            
            # –¢–æ–ø –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            top_activity = sorted(self.participants.values(), 
                                key=lambda x: x.total_swaps, reverse=True)[:10]
            summary["top_by_activity"] = [
                {
                    "address": p.address,
                    "total_swaps": p.total_swaps,
                    "unique_days": p.unique_days_active,
                    "category": p.category
                }
                for p in top_activity
            ]
            
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–≤–æ–¥–∫–∏: {e}")
            return {}
