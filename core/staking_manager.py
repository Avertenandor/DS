"""
PLEX Dynamic Staking Manager - Staking Manager
–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ PLEX ONE.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import time
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Tuple, Any, Set
from dataclasses import dataclass
from enum import Enum

from utils.logger import get_logger
from utils.retry import with_retry
from utils.validators import validate_address
from utils.converters import wei_to_token, token_to_wei

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
from blockchain.node_client import Web3Manager
from blockchain.swap_analyzer import SwapAnalyzer
from blockchain.transfer_collector import TransferCollector
from blockchain.balance_checker import BalanceChecker
from blockchain.gas_manager import GasManager, GasMode

from core.participant_analyzer_v2 import ParticipantAnalyzer
from core.category_analyzer import CategoryAnalyzer
from core.eligibility import EligibilityEngine
from core.reward_manager import RewardManager
from core.amnesty_manager import AmnestyManager
from core.duplicate_protection import DuplicateProtectionManager

from db.models import *
from db.history_manager import HistoryManager
from db.backup_manager import BackupManager

# –ò–º–ø–æ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –±–µ–∑ GasMode 
from config.constants import (
    TOKEN_ADDRESS, TOKEN_DECIMALS, 
    QUICKNODE_HTTP, QUICKNODE_WSS,
    TRANSFER_EVENT_SIGNATURE, SWAP_EVENT_SIGNATURE,
    MIN_BALANCE, DAILY_PURCHASE_MIN, DAILY_PURCHASE_MAX,
    DEFAULT_GAS_PRICE_GWEI, MAX_GAS_PRICE_GWEI,
    MULTICALL_BATCH_SIZE, RETRY_ATTEMPTS, RETRY_DELAY_BASE,
    BLOCK_CACHE_TTL, BALANCE_CACHE_TTL,
    ParticipantCategory, AMNESTY_RULES, TIER_MULTIPLIERS
)

logger = get_logger(__name__)


class StakingStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏—Å—Ç–µ–º—ã —Å—Ç–µ–π–∫–∏–Ω–≥–∞."""
    INITIALIZING = "initializing"
    RUNNING = "running"
    PAUSED = "paused"
    ERROR = "error"
    MAINTENANCE = "maintenance"


@dataclass
class SystemStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–µ–π–∫–∏–Ω–≥–∞."""
    total_participants: int
    active_participants: int
    total_volume_usd: Decimal
    total_rewards_distributed: Decimal
    current_block: int
    last_update: datetime
    status: StakingStatus


@dataclass
class AnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞."""
    period_start: datetime
    period_end: datetime
    participants_analyzed: int
    rewards_calculated: Decimal
    categories_distribution: Dict[str, int]
    eligibility_stats: Dict[str, int]
    processing_time: float


class StakingManager:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ PLEX ONE.
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π:
    - –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    - –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫—ç—à–µ–º
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StakingManager.
        
        Args:
            config: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        """
        self.config = config or {}
        self.status = StakingStatus.INITIALIZING
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.web3_manager: Optional[Web3Manager] = None
        self.swap_analyzer: Optional[SwapAnalyzer] = None
        self.transfer_collector: Optional[TransferCollector] = None
        self.balance_checker: Optional[BalanceChecker] = None
        self.gas_manager: Optional[GasManager] = None
        
        # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        self.participant_analyzer: Optional[ParticipantAnalyzer] = None
        self.category_analyzer: Optional[CategoryAnalyzer] = None
        self.eligibility_checker: Optional[EligibilityEngine] = None
        self.reward_manager: Optional[RewardManager] = None
        self.amnesty_manager: Optional[AmnestyManager] = None
        self.duplicate_protection: Optional[DuplicateProtectionManager] = None
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        self.history_manager: Optional[HistoryManager] = None
        self.backup_manager: Optional[BackupManager] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.stats = SystemStats(
            total_participants=0,
            active_participants=0,
            total_volume_usd=Decimal('0'),
            total_rewards_distributed=Decimal('0'),
            current_block=0,
            last_update=datetime.now(),
            status=StakingStatus.INITIALIZING
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_settings = {
            'analysis_period_hours': 24,
            'min_volume_usd': 100,
            'auto_backup_enabled': True,
            'backup_interval_hours': 6,
            'gas_mode': GasMode.ADAPTIVE,
            'batch_size': 1000,
            'max_concurrent_requests': 10
        }
        
        # –¢—Ä–µ–∫–∏–Ω–≥ background –∑–∞–¥–∞—á –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.background_tasks: Set[asyncio.Task] = set()
        
        logger.info("üöÄ StakingManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
        
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã...")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –∏ –±–ª–æ–∫—á–µ–π–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self._initialize_blockchain_components()
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
            await self._initialize_business_components()
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
            await self._initialize_data_components()
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            await self._perform_health_check()
            
            # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._update_system_stats()
            
            self.status = StakingStatus.RUNNING
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.status = StakingStatus.ERROR
            return False
    
    async def _initialize_blockchain_components(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫—á–µ–π–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫—á–µ–π–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # Web3 Manager
        self.web3_manager = Web3Manager()
        # Web3Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ        # Gas Manager
        gas_mode_config = self.config.get('gas_mode', self.default_settings['gas_mode'])
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ enum, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(gas_mode_config, str):
            # –ò—â–µ–º enum –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
            gas_mode = None
            for mode in GasMode:
                if mode.value == gas_mode_config.lower():
                    gas_mode = mode
                    break
            if gas_mode is None:
                gas_mode = GasMode.ADAPTIVE  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            gas_mode = gas_mode_config
        self.gas_manager = GasManager(self.web3_manager, gas_mode)
        
        # Swap Analyzer
        self.swap_analyzer = SwapAnalyzer(self.web3_manager)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ initialize —É SwapAnalyzer
        if hasattr(self.swap_analyzer, 'initialize'):
            await self.swap_analyzer.initialize()
        
        # Transfer Collector
        self.transfer_collector = TransferCollector(self.web3_manager)
        
        # Balance Checker
        self.balance_checker = BalanceChecker(self.web3_manager)
        
        logger.info("‚úÖ –ë–ª–æ–∫—á–µ–π–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _initialize_business_components(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏."""
        logger.info("üíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏...")
        
        # Participant Analyzer
        self.participant_analyzer = ParticipantAnalyzer()
        
        # Category Analyzer
        self.category_analyzer = CategoryAnalyzer()
        
        # Eligibility Checker
        self.eligibility_checker = EligibilityEngine()
        
        # Reward Manager
        self.reward_manager = RewardManager()
        
        # Amnesty Manager
        self.amnesty_manager = AmnestyManager()
        
        # Duplicate Protection
        self.duplicate_protection = DuplicateProtectionManager()
        
        logger.info("‚úÖ –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def _initialize_data_components(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏."""
        logger.info("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏...")
        
        # History Manager
        self.history_manager = HistoryManager()
        
        # Backup Manager
        self.backup_manager = BackupManager()
          # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        if self.config.get('auto_backup_enabled', self.default_settings['auto_backup_enabled']):
            backup_task = asyncio.create_task(self._auto_backup_task())
            self.background_tasks.add(backup_task)
            backup_task.add_done_callback(self.background_tasks.discard)
        
        logger.info("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    async def _perform_health_check(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        logger.info("ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É
        current_block = self.web3_manager.w3_http.eth.block_number
        if current_block == 0:
            raise RuntimeError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        plex_balance = await asyncio.to_thread(
            self.balance_checker.get_plex_balance,
            TOKEN_ADDRESS  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∞–∑–∞
        gas_prices = await self.gas_manager.get_gas_price()
        if gas_prices.standard_gas_price == 0:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –≥–∞–∑–∞")
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞")
    
    async def run_analysis(
        self,
        period_start: Optional[datetime] = None,
        period_end: Optional[datetime] = None,
        force_refresh: bool = False
    ) -> AnalysisResult:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥.
        
        Args:
            period_start: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
            period_end: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            AnalysisResult: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        start_time = time.time()
        
        try:
            logger.info("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞...")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
            if not period_end:
                period_end = datetime.now()
            if not period_start:
                period_hours = self.config.get('analysis_period_hours', self.default_settings['analysis_period_hours'])
                period_start = period_end - timedelta(hours=period_hours)
            
            logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {period_start} - {period_end}")
            
            # 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
            logger.info("üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö...")
            swap_data = await self._collect_swap_data(period_start, period_end, force_refresh)
            transfer_data = await self._collect_transfer_data(period_start, period_end, force_refresh)
            
            # 2. –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            logger.info("üë• –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            participants = await self._analyze_participants(swap_data, transfer_data)
            
            # 3. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            logger.info("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            categories = await self._categorize_participants(participants)
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã...")
            eligibility_results = await self._check_eligibility(participants)
            
            # 5. –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
            logger.info("üí∞ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥...")
            rewards = await self._calculate_rewards(participants, eligibility_results)
            
            # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            await self._save_analysis_results(participants, categories, rewards)
            
            # 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._update_system_stats()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            processing_time = time.time() - start_time
            result = AnalysisResult(
                period_start=period_start,
                period_end=period_end,
                participants_analyzed=len(participants),
                rewards_calculated=sum(reward.amount for reward in rewards),
                categories_distribution=self._get_category_distribution(categories),
                eligibility_stats=self._get_eligibility_stats(eligibility_results),
                processing_time=processing_time
            )
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f}—Å. "
                       f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result.participants_analyzed}, "
                       f"–ù–∞–≥—Ä–∞–¥: {result.rewards_calculated}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞: {e}")
            raise
    
    async def _collect_swap_data(
        self,
        start_date: datetime,
        end_date: datetime,
        force_refresh: bool = False
    ) -> List[Dict[str, Any]]:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–∞–ø–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç –≤ –±–ª–æ–∫–∏
            start_block = await self.web3_manager.get_block_by_timestamp(
                int(start_date.timestamp())
            )
            end_block = await self.web3_manager.get_block_by_timestamp(
                int(end_date.timestamp())
            )
            
            # –°–±–æ—Ä —Å–≤–∞–ø–æ–≤
            swaps = await self.swap_analyzer.get_swaps(
                start_block=start_block,
                end_block=end_block,
                force_refresh=force_refresh
            )
            
            logger.info(f"üìà –°–æ–±—Ä–∞–Ω–æ {len(swaps)} —Å–≤–∞–ø–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥")
            return swaps
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–∞–ø–∞—Ö: {e}")
            return []
    
    async def _collect_transfer_data(
        self,
        start_date: datetime,
        end_date: datetime,
        force_refresh: bool = False
    ) -> List[Dict[str, Any]]:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç –≤ –±–ª–æ–∫–∏
            start_block = await self.web3_manager.get_block_by_timestamp(
                int(start_date.timestamp())
            )
            end_block = await self.web3_manager.get_block_by_timestamp(
                int(end_date.timestamp())
            )
            
            # –°–±–æ—Ä —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
            transfers = await self.transfer_collector.collect_transfers(
                start_block=start_block,
                end_block=end_block,
                batch_size=self.config.get('batch_size', self.default_settings['batch_size'])
            )
            
            logger.info(f"üí∏ –°–æ–±—Ä–∞–Ω–æ {len(transfers)} —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥")
            return transfers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞—Ö: {e}")
            return []
    
    async def _analyze_participants(
        self,
        swap_data: List[Dict[str, Any]],
        transfer_data: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
        try:
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            all_transactions = swap_data + transfer_data
            
            # –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await asyncio.to_thread(
                self.participant_analyzer.analyze_participants,
                all_transactions
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤
            addresses = [p['address'] for p in participants]
            if addresses:
                balances = self.balance_checker.get_multiple_balances(addresses)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                for participant in participants:
                    address = participant['address']
                    if address in balances:
                        participant['current_balance'] = balances[address]
            
            return participants
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return []
    
    async def _categorize_participants(
        self,
        participants: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        try:
            categories = await asyncio.to_thread(
                self.category_analyzer.categorize_participants,
                participants
            )
            return categories
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return []
    
    async def _check_eligibility(
        self,
        participants: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã."""
        try:
            eligibility_results = []
            
            for participant in participants:
                is_eligible = await asyncio.to_thread(
                    self.eligibility_checker.check_eligibility,
                    participant
                )
                
                eligibility_results.append({
                    'address': participant['address'],
                    'is_eligible': is_eligible,
                    'participant_data': participant
                })
            
            return eligibility_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
            return []
    
    async def _calculate_rewards(
        self,
        participants: List[Dict[str, Any]],
        eligibility_results: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        try:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            eligible_participants = [
                result['participant_data'] 
                for result in eligibility_results 
                if result['is_eligible']
            ]
            
            if not eligible_participants:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –Ω–∞–≥—Ä–∞–¥")
                return []
            
            # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
            rewards = await asyncio.to_thread(
                self.reward_manager.calculate_rewards,
                eligible_participants
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if self.duplicate_protection:
                rewards = await asyncio.to_thread(
                    self.duplicate_protection.filter_duplicates,
                    rewards
                )
            
            return rewards
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            return []
    
    async def _save_analysis_results(
        self,
        participants: List[Dict[str, Any]],
        categories: List[Dict[str, Any]],
        rewards: List[Dict[str, Any]]
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            if self.history_manager:
                await asyncio.to_thread(
                    self.history_manager.save_analysis_session,
                    {
                        'participants': participants,
                        'categories': categories,
                        'rewards': rewards,
                        'timestamp': datetime.now()
                    }
                )
            
            logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def _get_category_distribution(self, categories: List[Dict[str, Any]]) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
        distribution = {}
        for category in categories:
            cat_name = category.get('category', 'Unknown')
            distribution[cat_name] = distribution.get(cat_name, 0) + 1
        return distribution
    
    def _get_eligibility_stats(self, eligibility_results: List[Dict[str, Any]]) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–∞–≤—É –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã."""
        eligible = sum(1 for result in eligibility_results if result['is_eligible'])
        not_eligible = len(eligibility_results) - eligible
        
        return {
            'eligible': eligible,
            'not_eligible': not_eligible,
            'total': len(eligibility_results)
        }
    
    async def _update_system_stats(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
            current_block = self.web3_manager.w3_http.eth.block_number
            
            # –ü–æ–¥—Å—á–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
              # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats.current_block = current_block
            self.stats.last_update = datetime.now()
            self.stats.status = self.status
            
            logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –±–ª–æ–∫ {current_block}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _auto_backup_task(self) -> None:
        """–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        backup_interval = self.config.get('backup_interval_hours', self.default_settings['backup_interval_hours'])
        
        while self.status != StakingStatus.ERROR:
            try:
                await asyncio.sleep(backup_interval * 3600)  # –ß–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                
                if self.backup_manager:
                    await asyncio.to_thread(self.backup_manager.create_backup)
                    logger.info("üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def pause(self) -> None:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        self.status = StakingStatus.PAUSED
        logger.info("‚è∏Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def resume(self) -> None:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        self.status = StakingStatus.RUNNING
        logger.info("‚ñ∂Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def shutdown(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        try:
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
            
            self.status = StakingStatus.MAINTENANCE
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö background –∑–∞–¥–∞—á
            if self.background_tasks:
                logger.info(f"‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ {len(self.background_tasks)} background –∑–∞–¥–∞—á...")
                for task in self.background_tasks:
                    if not task.done():
                        task.cancel()
                
                # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    await asyncio.wait_for(
                        asyncio.gather(*self.background_tasks, return_exceptions=True),
                        timeout=5.0
                    )
                    logger.info("‚úÖ –í—Å–µ background –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤ —Å—Ä–æ–∫")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
            if self.backup_manager:
                await asyncio.to_thread(self.backup_manager.create_backup)
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if self.web3_manager:
                await self.web3_manager.close()
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.
        
        Returns:
            Dict: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        return {
            'status': self.status.value,
            'stats': {
                'total_participants': self.stats.total_participants,
                'active_participants': self.stats.active_participants,
                'total_volume_usd': float(self.stats.total_volume_usd),
                'total_rewards_distributed': float(self.stats.total_rewards_distributed),
                'current_block': self.stats.current_block,
                'last_update': self.stats.last_update.isoformat()
            },
            'components': {
                'web3_manager': self.web3_manager is not None,
                'swap_analyzer': self.swap_analyzer is not None,
                'transfer_collector': self.transfer_collector is not None,
                'balance_checker': self.balance_checker is not None,
                'gas_manager': self.gas_manager is not None,
                'participant_analyzer': self.participant_analyzer is not None,
                'category_analyzer': self.category_analyzer is not None,
                'eligibility_checker': self.eligibility_checker is not None,
                'reward_manager': self.reward_manager is not None
            }
        }


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['StakingManager', 'StakingStatus', 'SystemStats', 'AnalysisResult']


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è
    async def test_staking_manager():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StakingManager."""
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StakingManager...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            staking_manager = StakingManager({
                'analysis_period_hours': 1,  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                'gas_mode': GasMode.STANDARD
            })
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            success = await staking_manager.initialize()
            if not success:
                print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status = staking_manager.get_status()
            print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}")
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (—Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏)
            from datetime import datetime, timedelta
            end_time = datetime.now()
            start_time = end_time - timedelta(minutes=30)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
            
            print(f"üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            result = await staking_manager.run_analysis(start_time, end_time)
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"  - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result.participants_analyzed}")
            print(f"  - –ù–∞–≥—Ä–∞–¥: {result.rewards_calculated}")
            print(f"  - –í—Ä–µ–º—è: {result.processing_time:.2f}—Å")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await staking_manager.shutdown()
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StakingManager –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # asyncio.run(test_staking_manager())
    print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
