"""
–ú–æ–¥—É–ª—å: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ PLEX Dynamic Staking
–û–ø–∏—Å–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ 4 –≥—Ä—É–ø–ø–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

from typing import Dict, List, Optional, Tuple
from decimal import Decimal
from datetime import datetime, timedelta
from enum import Enum

from config.constants import DAILY_PURCHASE_MIN, DAILY_PURCHASE_MAX
from utils.logger import get_logger

logger = get_logger("PLEX_CategoryAnalyzer")


class ParticipantCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    PERFECT = "perfect"                    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ $2.8-3.2, –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤, –±–µ–∑ –ø—Ä–æ–¥–∞–∂
    MISSED_PURCHASE = "missed_purchase"    # –ü—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å (–≤–æ–∑–º–æ–∂–Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—è)
    SOLD_TOKEN = "sold_token"             # –õ—é–±–∞—è –ø—Ä–æ–¥–∞–∂–∞ (–∞–º–Ω–∏—Å—Ç–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞)
    TRANSFERRED = "transferred"           # –û—Ç–ø—Ä–∞–≤–∏–ª PLEX –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ—à–µ–ª—å–∫–∏ (–æ—Ç–º–µ—Ç–∫–∞, –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)


class CategoryAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –¢–ó"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.logger = logger
        
        # –°—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ –¢–ó
        self.daily_min_usd = DAILY_PURCHASE_MIN  # $2.8
        self.daily_max_usd = DAILY_PURCHASE_MAX  # $3.2
        
        logger.info("üè∑Ô∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üí∞ –î–∏–∞–ø–∞–∑–æ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${self.daily_min_usd} - ${self.daily_max_usd}")

    def categorize_address(self, 
                          address: str,
                          swaps: List[Dict],
                          transfers: List[Dict],
                          analysis_period_days: int) -> Dict:
        """
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –¢–ó
        
        Args:
            address: –ê–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            swaps: –°–ø–∏—Å–æ–∫ swap –æ–ø–µ—Ä–∞—Ü–∏–π
            transfers: –°–ø–∏—Å–æ–∫ transfer –æ–ø–µ—Ä–∞—Ü–∏–π
            analysis_period_days: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        logger.debug(f"üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ {address}")
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ swap –æ–ø–µ—Ä–∞—Ü–∏–π
            buy_swaps = [s for s in swaps if s.get('direction') == 'buy']
            sell_swaps = [s for s in swaps if s.get('direction') == 'sell']
            
            # 2. –ö–†–ò–¢–ï–†–ò–ô 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if sell_swaps:
                logger.debug(f"‚ùå {address}: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ ({len(sell_swaps)})")
                return self._create_result(
                    category=ParticipantCategory.SOLD_TOKEN,
                    reason=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞ ({len(sell_swaps)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)",
                    amnesty_eligible=False,
                    details={
                        'sell_count': len(sell_swaps),
                        'sell_volume': sum(s.get('usd_value', 0) for s in sell_swaps),
                        'blocking_factor': 'sales_detected'
                    }
                )
            
            # 3. –ö–†–ò–¢–ï–†–ò–ô 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
            non_pool_transfers = [t for t in transfers if not self._is_pool_transfer(t)]
            has_transfers = len(non_pool_transfers) > 0
            
            # 4. –ö–†–ò–¢–ï–†–ò–ô 3: –ê–Ω–∞–ª–∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
            daily_purchases = self._analyze_daily_purchases(buy_swaps, analysis_period_days)
            expected_days = analysis_period_days
            actual_days = len(daily_purchases['valid_days'])
            missed_days = expected_days - actual_days
            
            # 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if missed_days == 0 and not has_transfers:
                # PERFECT: –í—Å–µ –¥–Ω–∏ –ø–æ–∫—É–ø–∞–ª, –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                return self._create_result(
                    category=ParticipantCategory.PERFECT,
                    reason="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ $2.8-3.2, –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤",
                    amnesty_eligible=None,  # –ù–µ –Ω—É–∂–Ω–∞
                    details={
                        'consecutive_days': actual_days,
                        'avg_daily_usd': daily_purchases['avg_amount'],
                        'total_volume': daily_purchases['total_volume'],
                        'perfect_score': True
                    }
                )
            
            elif has_transfers and missed_days == 0:
                # TRANSFERRED: –í—Å–µ –¥–Ω–∏ –ø–æ–∫—É–ø–∞–ª, –Ω–æ –±—ã–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã
                return self._create_result(
                    category=ParticipantCategory.TRANSFERRED,
                    reason="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–∫–µ–Ω–æ–≤",
                    amnesty_eligible=True,
                    details={
                        'consecutive_days': actual_days,
                        'transfers_count': len(non_pool_transfers),
                        'transfers_volume': sum(t.get('value', 0) for t in non_pool_transfers),
                        'warning_only': True
                    }
                )
            
            elif has_transfers and missed_days > 0:
                # TRANSFERRED + MISSED: –ò –ø—Ä–æ–ø—É—Å–∫–∏, –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
                return self._create_result(
                    category=ParticipantCategory.TRANSFERRED,
                    reason=f"–ü—Ä–æ–ø—É—â–µ–Ω–æ {missed_days} –¥–Ω–µ–π –ø–æ–∫—É–ø–æ–∫ + –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã",
                    amnesty_eligible=True,
                    details={
                        'missed_days': missed_days,
                        'completed_days': actual_days,
                        'transfers_count': len(non_pool_transfers),
                        'combined_issues': True
                    }
                )
            
            else:
                # MISSED_PURCHASE: –¢–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫–∏ –¥–Ω–µ–π
                return self._create_result(
                    category=ParticipantCategory.MISSED_PURCHASE,
                    reason=f"–ü—Ä–æ–ø—É—â–µ–Ω–æ {missed_days} –∏–∑ {expected_days} –¥–Ω–µ–π –ø–æ–∫—É–ø–æ–∫",
                    amnesty_eligible=True,
                    details={
                        'missed_days': missed_days,
                        'completed_days': actual_days,
                        'completion_rate': actual_days / expected_days * 100,
                        'amnesty_recommended': missed_days <= 3  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è <= 3 –¥–Ω–µ–π
                    }
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ {address}: {e}")
            return self._create_result(
                category=ParticipantCategory.MISSED_PURCHASE,
                reason=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}",
                amnesty_eligible=False,
                details={'error': str(e)}
            )

    def _analyze_daily_purchases(self, buy_swaps: List[Dict], period_days: int) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫"""
        daily_data = {}
        total_volume = Decimal('0')
        valid_days = []
        
        for swap in buy_swaps:
            usd_value = Decimal(str(swap.get('usd_value', 0)))
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –∞–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º
            # –ó–¥–µ—Å—å —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π swap –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–Ω—å
            if self.daily_min_usd <= usd_value <= self.daily_max_usd:
                valid_days.append(swap)
                total_volume += usd_value
        
        return {
            'valid_days': valid_days,
            'total_volume': total_volume,
            'avg_amount': total_volume / len(valid_days) if valid_days else Decimal('0'),
            'period_days': period_days
        }

    def _is_pool_transfer(self, transfer: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Å –ø—É–ª–æ–º"""
        to_address = transfer.get('to', '').lower()
        from_address = transfer.get('from', '').lower()
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –∞–¥—Ä–µ—Å–∞ –≤—Å–µ—Ö –ø—É–ª–æ–≤
        pool_addresses = [
            '0x41d9650faf3341cbf8947fd8063a1fc88dbf1889',  # PLEX/USDT pool
        ]
        
        return any(addr.lower() in [to_address, from_address] for addr in pool_addresses)

    def _create_result(self, 
                      category: ParticipantCategory, 
                      reason: str,
                      amnesty_eligible: Optional[bool],
                      details: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        return {
            'category': category.value,
            'category_name': category.name,
            'reason': reason,
            'amnesty_eligible': amnesty_eligible,
            'timestamp': datetime.now().isoformat(),
            'details': details
        }

    def generate_category_report(self, categorized_addresses: Dict[str, Dict]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        report = {
            'total_addresses': len(categorized_addresses),
            'categories': {},
            'amnesty_candidates': [],
            'perfect_participants': [],
            'blocked_addresses': [],
            'statistics': {}
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for address, result in categorized_addresses.items():
            category = result['category']
            
            if category not in report['categories']:
                report['categories'][category] = {
                    'count': 0,
                    'addresses': [],
                    'total_volume': Decimal('0')
                }
            
            report['categories'][category]['count'] += 1
            report['categories'][category]['addresses'].append(address)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            if result['amnesty_eligible']:
                report['amnesty_candidates'].append({
                    'address': address,
                    'category': category,
                    'reason': result['reason']
                })
            
            if category == ParticipantCategory.PERFECT.value:
                report['perfect_participants'].append(address)
            
            if category == ParticipantCategory.SOLD_TOKEN.value:
                report['blocked_addresses'].append(address)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = report['total_addresses']
        report['statistics'] = {
            'perfect_rate': len(report['perfect_participants']) / total * 100 if total > 0 else 0,
            'amnesty_rate': len(report['amnesty_candidates']) / total * 100 if total > 0 else 0,
            'blocked_rate': len(report['blocked_addresses']) / total * 100 if total > 0 else 0
        }
        
        logger.info(f"üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"   üë• –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {total}")
        logger.info(f"   ‚úÖ Perfect: {len(report['perfect_participants'])} ({report['statistics']['perfect_rate']:.1f}%)")
        logger.info(f"   ü§ù –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é: {len(report['amnesty_candidates'])} ({report['statistics']['amnesty_rate']:.1f}%)")
        logger.info(f"   ‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {len(report['blocked_addresses'])} ({report['statistics']['blocked_rate']:.1f}%)")
        
        return report


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
category_analyzer = CategoryAnalyzer()
