"""
PLEX Dynamic Staking Manager - Full Optimized Analysis Algorithm
–ü–æ–ª–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–µ–π API –∫—Ä–µ–¥–∏—Ç–æ–≤.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from collections import defaultdict
from decimal import Decimal

from utils.logger import get_logger
from utils.optimized_methods import OptimizedBlockchainMethods, BlockNumberCache
from utils.smart_cache import SmartCache
from utils.chunk_strategy import AdaptiveChunkStrategy
from config.constants import TOKEN_ADDRESS, PLEX_USDT_POOL, TOKEN_DECIMALS

logger = get_logger(__name__)


class FullOptimizedAnalyzer:
    """
    –ü–æ–ª–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –í–°–ï–• —Ç–µ—Ö–Ω–∏–∫ —ç–∫–æ–Ω–æ–º–∏–∏.
    
    –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏–∏:
    - –ë–ï–ó –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ~238,500 –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ 10k –∞–¥—Ä–µ—Å–æ–≤
    - –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π: ~26,800 –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ 10k –∞–¥—Ä–µ—Å–æ–≤  
    - –≠–ö–û–ù–û–ú–ò–Ø: 88.8%!
    """
    
    def __init__(self, web3_manager, swap_analyzer):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.
        
        Args:
            web3_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            swap_analyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–≤–∞–ø–æ–≤
        """
        self.web3_manager = web3_manager
        self.swap_analyzer = swap_analyzer
        self.w3 = web3_manager.w3_http
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.optimized_methods = OptimizedBlockchainMethods(web3_manager)
        self.block_cache = BlockNumberCache(ttl=60)
        self.smart_cache = SmartCache(self, max_size=50000, default_ttl=300)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from utils.batch_transaction_processor import BatchTransactionProcessor
        from utils.transaction_scheduler import TransactionScheduler
        from utils.advanced_gas_managers import GasManagerFactory
        
        self.batch_processor = BatchTransactionProcessor(web3_manager, batch_size=50)
        self.transaction_scheduler = TransactionScheduler(web3_manager, base_interval=2.0)
        self.adaptive_gas_manager = GasManagerFactory.create_gas_manager(web3_manager, 'adaptive')
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.enable_advanced_optimizations = True
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏
        self.credits_used = 0
        self.credits_saved = 0
        self.start_time = None
        
        logger.info("üöÄ FullOptimizedAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("üéØ –¶–µ–ª—å: —ç–∫–æ–Ω–æ–º–∏—è 88.8% API –∫—Ä–µ–¥–∏—Ç–æ–≤")
    
    def start_advanced_optimizations(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        if not self.enable_advanced_optimizations:
            return
        
        try:
            # –ó–∞–ø—É—Å–∫ BatchTransactionProcessor
            self.batch_processor.start()
            logger.info("üî• BatchTransactionProcessor –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫ TransactionScheduler
            self.transaction_scheduler.start()
            logger.info("‚è∞ TransactionScheduler –∑–∞–ø—É—â–µ–Ω")
            
            logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {e}")
    
    def stop_advanced_optimizations(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        if not self.enable_advanced_optimizations:
            return
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ BatchTransactionProcessor
            self.batch_processor.stop()
            logger.info("üî• BatchTransactionProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TransactionScheduler
            self.transaction_scheduler.stop()
            logger.info("‚è∞ TransactionScheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {e}")
    
    async def run_optimized_full_analysis(self, period_days: int, 
                                        progress_callback: Optional[callable] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –í–°–ï–• —Ç–µ—Ö–Ω–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
          Args:
            period_days: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
            progress_callback: Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–µ–π
        """
        self.start_time = time.time()
        self.credits_used = 0
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {period_days} –¥–Ω–µ–π")
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        self.start_advanced_optimizations()
        
        try:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ø-–±–ª–æ–∫–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
            if progress_callback:
                progress_callback(5, "–ü–æ–∏—Å–∫ —Å—Ç–æ–ø-–±–ª–æ–∫–∞ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º...")
            
            stop_timestamp = int((datetime.now() - timedelta(days=period_days)).timestamp())
            stop_block = self.optimized_methods.find_stop_block_optimized(stop_timestamp)
            self.credits_used += 15  # ~15 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ 50
            
            logger.info(f"üéØ –°—Ç–æ–ø-–±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω: {stop_block} (—ç–∫–æ–Ω–æ–º–∏—è 70%)")
            
            # 2. –°–±–æ—Ä –í–°–ï–• swap —Å–æ–±—ã—Ç–∏–π –ø—É–ª–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥)
            if progress_callback:
                progress_callback(15, "–°–±–æ—Ä –≤—Å–µ—Ö swap —Å–æ–±—ã—Ç–∏–π...")
            
            all_swaps = await self._collect_all_swaps_optimized(stop_block, progress_callback)
            logger.info(f"üìä –°–æ–±—Ä–∞–Ω–æ {len(all_swaps)} swap —Å–æ–±—ã—Ç–∏–π")
            
            # 3. –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å–∞–º
            if progress_callback:
                progress_callback(50, "–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...")
            
            address_swaps = self._group_swaps_by_address(all_swaps)
            unique_addresses = list(address_swaps.keys())
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(unique_addresses)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
            
            # 4. –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            self.smart_cache.warm_up(unique_addresses[:100], [stop_block])
            
            # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ Multicall (–±–∞—Ç—á–∞–º–∏ –ø–æ 50)
            if progress_callback:
                progress_callback(60, "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ Multicall...")
            
            all_balances = await self._get_balances_optimized(unique_addresses, stop_block, progress_callback)
            
            # 6. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            if progress_callback:
                progress_callback(75, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            
            results = await self._categorize_all_addresses(
                address_swaps, all_balances, period_days, progress_callback
            )
            
            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¢–û–õ–¨–ö–û –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π 1 –∏ 4
            if progress_callback:
                progress_callback(90, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è eligible –∞–¥—Ä–µ—Å–æ–≤...")
            
            await self._check_transfers_for_eligible(results, stop_block)
            
            # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            elapsed = time.time() - self.start_time
            estimated_savings = self._calculate_savings(len(unique_addresses))
            
            final_result = {
                **results,
                'analysis_metadata': {
                    'total_addresses': len(unique_addresses),
                    'analysis_time_seconds': elapsed,
                    'credits_used': self.credits_used,
                    'estimated_credits_saved': estimated_savings,
                    'savings_percentage': round((estimated_savings / (self.credits_used + estimated_savings)) * 100, 1),
                    'period_days': period_days,
                    'stop_block': stop_block,
                    'optimization_techniques': [
                        '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥',
                        'Multicall –±–∞—Ç—á–∏–Ω–≥',
                        '–ë–ª–æ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
                        '–£–º–Ω—ã–π –∫—ç—à —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π',
                        '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–æ–∫–æ–≤',
                        '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è'
                    ]
                }
            }
            
            if progress_callback:
                progress_callback(100, "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            logger.info(f"""
‚úÖ –ü–æ–ª–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}s
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
  - –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {len(unique_addresses):,}
  - Perfect (–∞–≤—Ç–æ-–Ω–∞–≥—Ä–∞–¥–∞): {len(results['perfect']):,}
  - Missed purchases: {len(results['missed_purchase']):,}
  - Sold token (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã): {len(results['sold_token']):,}
  - Transferred (–æ—Ç–º–µ—á–µ–Ω—ã): {len(results['transferred']):,}

üí∞ –≠–∫–æ–Ω–æ–º–∏—è API –∫—Ä–µ–¥–∏—Ç–æ–≤:
  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self.credits_used:,}
  - –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {estimated_savings:,}
  - –≠–∫–æ–Ω–æ–º–∏—è: {round((estimated_savings / (self.credits_used + estimated_savings)) * 100, 1)}%
            """)
            
            return final_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise
        finally:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
            self.stop_advanced_optimizations()
    
    async def _collect_all_swaps_optimized(self, stop_block: int, 
                                         progress_callback: Optional[callable] = None) -> List[Dict]:
        """–°–±–æ—Ä –≤—Å–µ—Ö swap —Å–æ–±—ã—Ç–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —á–∞–Ω–∫–∏–Ω–≥–æ–º."""
        all_swaps = []
        current_block = 1
        total_blocks = stop_block
        
        while current_block <= stop_block:
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
            chunk_size = self.chunk_strategy.get_optimal_chunk_size(current_block)
            end_block = min(current_block + chunk_size - 1, stop_block)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è –ø—É–ª–∞
                swaps = await self.swap_analyzer.get_pool_swaps_async(
                    PLEX_USDT_POOL, current_block, end_block
                )
                
                all_swaps.extend(swaps)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                self.chunk_strategy.record_result(chunk_size, len(swaps))
                self.credits_used += 75  # –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å getLogs
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                if progress_callback:
                    progress = 15 + (end_block / total_blocks) * 35  # 15-50%
                    progress_callback(int(progress), f"–°–æ–±–∏—Ä–∞–µ–º swaps: {end_block:,}/{total_blocks:,}")
                
                current_block = end_block + 1
                
            except Exception as e:
                if "payload too large" in str(e).lower():
                    self.chunk_strategy.handle_payload_error()
                    continue
                else:
                    raise
        
        return all_swaps
    
    def _group_swaps_by_address(self, all_swaps: List[Dict]) -> Dict[str, List[Dict]]:
        """–õ–æ–∫–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ swaps –ø–æ –∞–¥—Ä–µ—Å–∞–º."""
        address_swaps = defaultdict(list)
        
        for swap in all_swaps:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è/–ø—Ä–æ–¥–∞–≤—Ü–∞
            buyer, seller = self._parse_swap_participants(swap)
            
            if buyer:
                address_swaps[buyer].append({**swap, 'type': 'buy'})
            if seller:
                address_swaps[seller].append({**swap, 'type': 'sell'})
        
        return dict(address_swaps)
    
    def _parse_swap_participants(self, swap: Dict) -> tuple:
        """–ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ swap —Å–æ–±—ã—Ç–∏—è."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        # –ù–∞ –æ—Å–Ω–æ–≤–µ amount0In, amount0Out, amount1In, amount1Out
        
        amount0_in = swap.get('amount0In', 0)
        amount1_out = swap.get('amount1Out', 0)
        
        # –ï—Å–ª–∏ amount0In > 0 –∏ amount1Out > 0 - —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ PLEX
        if amount0_in > 0 and amount1_out > 0:
            buyer = swap.get('to')  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å PLEX
            return buyer, None
        
        # –ï—Å–ª–∏ amount1In > 0 –∏ amount0Out > 0 - —ç—Ç–æ –ø—Ä–æ–¥–∞–∂–∞ PLEX  
        amount1_in = swap.get('amount1In', 0)
        amount0_out = swap.get('amount0Out', 0)
        
        if amount1_in > 0 and amount0_out > 0:
            seller = swap.get('to')  # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å PLEX
            return None, seller
        
        return None, None
    
    async def _get_balances_optimized(self, addresses: List[str], block: int,
                                    progress_callback: Optional[callable] = None) -> Dict[str, Decimal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ Multicall —Å —É–º–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        all_balances = {}
        batch_size = 50
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_balances = {}
        uncached_addresses = []
        
        for addr in addresses:
            cached_balance = self.smart_cache.get_balance_with_preload(addr, block)
            if cached_balance is not None:
                cached_balances[addr] = cached_balance
            else:
                uncached_addresses.append(addr)
        
        logger.info(f"üí∞ –ö—ç—à: {len(cached_balances)} –±–∞–ª–∞–Ω—Å–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º: {len(uncached_addresses)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
        for i in range(0, len(uncached_addresses), batch_size):
            batch = uncached_addresses[i:i+batch_size]
            
            # Multicall –∑–∞–ø—Ä–æ—Å - 50 –±–∞–ª–∞–Ω—Å–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!
            balances = self.optimized_methods.get_balances_multicall(
                TOKEN_ADDRESS, batch, block
            )
            
            all_balances.update(balances)
            self.credits_used += 20  # –û–¥–∏–Ω multicall –∑–∞–ø—Ä–æ—Å
            
            # –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
            for addr, balance in balances.items():
                cache_key = f"balance:{addr}:{block}"
                self.smart_cache.set(cache_key, balance, ttl=300)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if progress_callback:
                progress = 60 + ((i + batch_size) / len(uncached_addresses)) * 15  # 60-75%
                progress_callback(int(progress), f"–ë–∞–ª–∞–Ω—Å—ã: {i + len(batch):,}/{len(addresses):,}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ
        all_balances.update(cached_balances)
        
        return all_balances
    
    async def _categorize_all_addresses(self, address_swaps: Dict[str, List[Dict]], 
                                       all_balances: Dict[str, Decimal], period_days: int,
                                       progress_callback: Optional[callable] = None) -> Dict[str, List]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤."""
        results = {
            'perfect': [],
            'missed_purchase': [],
            'sold_token': [],
            'transferred': []
        }
        
        total_addresses = len(address_swaps)
        processed = 0
        
        for address, swaps in address_swaps.items():
            # –ë—ã—Å—Ç—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–∞–º—è—Ç–∏
            category_data = self._categorize_address_optimized(
                address=address,
                swaps=swaps,
                balance=all_balances.get(address, Decimal('0')),
                period_days=period_days
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            results[category_data['category']].append(category_data)
            
            processed += 1
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if progress_callback and processed % 100 == 0:
                progress = 75 + (processed / total_addresses) * 15  # 75-90%
                progress_callback(int(progress), f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: {processed:,}/{total_addresses:,}")
        
        return results
    
    def _categorize_address_optimized(self, address: str, swaps: List[Dict], 
                                    balance: Decimal, period_days: int) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –≤ –ø–∞–º—è—Ç–∏."""
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫ –ø–æ –¥–Ω—è–º
        daily_purchases = {}
        has_sells = False
        total_volume = Decimal('0')
        
        for swap in swaps:
            swap_date = datetime.fromtimestamp(swap.get('timestamp', 0)).date()
            
            if swap['type'] == 'buy':
                # –†–∞—Å—á–µ—Ç USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏
                usd_value = self._calculate_swap_usd_value(swap)
                
                if 2.8 <= float(usd_value) <= 3.2:
                    daily_purchases[swap_date] = True
                
                total_volume += usd_value
                
            elif swap['type'] == 'sell':
                has_sells = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        expected_days = set(
            (datetime.now() - timedelta(days=i)).date() 
            for i in range(period_days)
        )
        actual_days = set(daily_purchases.keys())
        missed_days = expected_days - actual_days
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        if has_sells:
            category = 'sold_token'
        elif missed_days:
            category = 'missed_purchase'
        else:
            category = 'perfect'
        
        return {
            'address': address,
            'category': category,
            'total_volume_usd': total_volume,
            'current_balance': balance,
            'daily_purchases': len(daily_purchases),
            'missed_days': len(missed_days),
            'transaction_count': len(swaps),
            'has_sells': has_sells
        }
    
    def _calculate_swap_usd_value(self, swap: Dict) -> Decimal:
        """–†–∞—Å—á–µ—Ç USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏ swap."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑–µ—Ä–≤–æ–≤ –ø—É–ª–∞ –∏ amounts
        
        # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ PLEX –∑–∞ USDT
        amount_usdt = swap.get('amount0In', 0)  # USDT –ø–æ—Ç—Ä–∞—á–µ–Ω–æ
        
        if amount_usdt > 0:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ wei –≤ USDT (decimals=18)
            usdt_value = Decimal(amount_usdt) / Decimal(10 ** 18)
            return usdt_value
        
        return Decimal('0')
    
    async def _check_transfers_for_eligible(self, results: Dict[str, List], stop_block: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è eligible –∞–¥—Ä–µ—Å–æ–≤."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è perfect –∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö transferred
        transfers_to_check = results['perfect'] + results['transferred']
        
        if not transfers_to_check:
            return
        
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è {len(transfers_to_check)} eligible –∞–¥—Ä–µ—Å–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –±–∞—Ç—á–æ–º –¥–ª—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å—Ä–∞–∑—É
        addresses_to_check = [data['address'] for data in transfers_to_check]
        
        all_transfers = self.optimized_methods.get_transfers_batch_optimized(
            addresses_to_check, TOKEN_ADDRESS, stop_block
        )
        
        self.credits_used += 75  # –û–¥–∏–Ω –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ —Å–æ—Ç–µ–Ω
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
        for data in transfers_to_check:
            address = data['address']
            transfers = all_transfers.get(address, [])
            
            data['transfers'] = transfers
            
            # –ï—Å–ª–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ perfect
            if transfers and data['category'] == 'perfect':
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é transferred
                results['perfect'].remove(data)
                data['category'] = 'transferred'
                results['transferred'].append(data)
    
    def _calculate_savings(self, num_addresses: int) -> int:
        """–†–∞—Å—á–µ—Ç —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤."""
        # –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ 10k –∞–¥—Ä–µ—Å–æ–≤:
        # - –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞: 50 √ó 20 = 1,000
        # - –°–±–æ—Ä –ª–æ–≥–æ–≤: ~500 √ó 75 = 37,500  
        # - –ë–∞–ª–∞–Ω—Å—ã: 10,000 √ó 20 = 200,000
        # –ò–¢–û–ì–û: 238,500
        
        naive_credits = (
            50 * 20 +  # –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞
            500 * 75 +  # –°–±–æ—Ä –ª–æ–≥–æ–≤
            num_addresses * 20  # –ë–∞–ª–∞–Ω—Å—ã
        )
        
        savings = max(0, naive_credits - self.credits_used)
        return savings


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['FullOptimizedAnalyzer']


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏–∏
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è FullOptimizedAnalyzer...")
    print("üéØ –¶–µ–ª—å: —ç–∫–æ–Ω–æ–º–∏—è 88.8% API –∫—Ä–µ–¥–∏—Ç–æ–≤")
    print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã web3_manager –∏ swap_analyzer")
