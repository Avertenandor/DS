"""
PLEX Dynamic Staking Manager - Reward Calculator
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import math
from decimal import Decimal, ROUND_DOWN
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum

from utils.logger import get_logger
from utils.converters import wei_to_token, token_to_wei
from config.constants import TOKEN_DECIMALS, TOKEN_TOTAL_SUPPLY

logger = get_logger(__name__)


class RewardTier(Enum):
    """–£—Ä–æ–≤–Ω–∏ –Ω–∞–≥—Ä–∞–¥."""
    BRONZE = "bronze"
    SILVER = "silver"
    GOLD = "gold"
    PLATINUM = "platinum"
    DIAMOND = "diamond"


@dataclass
class RewardFormula:
    """–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥."""
    base_rate: Decimal           # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (%)
    volume_multiplier: Decimal   # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞
    holding_bonus: Decimal       # –ë–æ–Ω—É—Å –∑–∞ —Ö–æ–ª–¥–∏–Ω–≥ (%)
    loyalty_bonus: Decimal       # –ë–æ–Ω—É—Å –∑–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å (%)
    tier_multiplier: Decimal     # –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–≤–Ω—è


@dataclass
class RewardCalculation:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã."""
    address: str
    base_reward: Decimal
    volume_bonus: Decimal
    holding_bonus: Decimal
    loyalty_bonus: Decimal
    tier_bonus: Decimal
    total_reward: Decimal
    tier: RewardTier
    calculation_details: Dict[str, Any]


class RewardCalculator:
    """
    Production-ready –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ PLEX ONE.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥
    - –£—á–µ—Ç –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏, —Ö–æ–ª–¥–∏–Ω–≥–∞ –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    - –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –ø–µ—Ä–µ–ø–ª–∞—Ç
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RewardCalculator.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        """
        self.config = config or {}
        
        # –§–æ—Ä–º—É–ª—ã –Ω–∞–≥—Ä–∞–¥ –ø–æ —É—Ä–æ–≤–Ω—è–º
        self.reward_formulas = {
            RewardTier.BRONZE: RewardFormula(
                base_rate=Decimal('0.1'),      # 0.1% –æ—Ç –æ–±—ä–µ–º–∞
                volume_multiplier=Decimal('1.0'),
                holding_bonus=Decimal('0.05'),  # +5% –∑–∞ —Ö–æ–ª–¥–∏–Ω–≥
                loyalty_bonus=Decimal('0.02'),  # +2% –∑–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
                tier_multiplier=Decimal('1.0')
            ),
            RewardTier.SILVER: RewardFormula(
                base_rate=Decimal('0.15'),     # 0.15% –æ—Ç –æ–±—ä–µ–º–∞
                volume_multiplier=Decimal('1.1'),
                holding_bonus=Decimal('0.08'),
                loyalty_bonus=Decimal('0.04'),
                tier_multiplier=Decimal('1.2')
            ),
            RewardTier.GOLD: RewardFormula(
                base_rate=Decimal('0.2'),      # 0.2% –æ—Ç –æ–±—ä–µ–º–∞
                volume_multiplier=Decimal('1.2'),
                holding_bonus=Decimal('0.12'),
                loyalty_bonus=Decimal('0.06'),
                tier_multiplier=Decimal('1.5')
            ),
            RewardTier.PLATINUM: RewardFormula(
                base_rate=Decimal('0.25'),     # 0.25% –æ—Ç –æ–±—ä–µ–º–∞
                volume_multiplier=Decimal('1.3'),
                holding_bonus=Decimal('0.15'),
                loyalty_bonus=Decimal('0.08'),
                tier_multiplier=Decimal('1.8')
            ),
            RewardTier.DIAMOND: RewardFormula(
                base_rate=Decimal('0.3'),      # 0.3% –æ—Ç –æ–±—ä–µ–º–∞
                volume_multiplier=Decimal('1.5'),
                holding_bonus=Decimal('0.2'),
                loyalty_bonus=Decimal('0.1'),
                tier_multiplier=Decimal('2.0')
            )
        }
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π (–≤ USDT)
        self.tier_thresholds = {
            RewardTier.BRONZE: Decimal('100'),      # $100+
            RewardTier.SILVER: Decimal('1000'),     # $1,000+
            RewardTier.GOLD: Decimal('5000'),       # $5,000+
            RewardTier.PLATINUM: Decimal('25000'),  # $25,000+
            RewardTier.DIAMOND: Decimal('100000')   # $100,000+
        }
        
        # –õ–∏–º–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        self.limits = {
            'max_reward_per_user': Decimal('10000'),     # –ú–∞–∫—Å–∏–º—É–º 10,000 PLEX –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'max_total_distribution': Decimal('50000'),   # –ú–∞–∫—Å–∏–º—É–º 50,000 PLEX –∑–∞ –ø–µ—Ä–∏–æ–¥
            'min_reward_threshold': Decimal('1'),         # –ú–∏–Ω–∏–º—É–º 1 PLEX
            'inflation_protection_rate': Decimal('0.95') # –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        self.total_distributed = Decimal('0')
        self.calculation_history: List[RewardCalculation] = []
        
        logger.info("üí∞ RewardCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def calculate_participant_reward(
        self,
        participant: Dict[str, Any],
        period_stats: Optional[Dict[str, Any]] = None
    ) -> RewardCalculation:
        """
        –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
        
        Args:
            participant: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            period_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            RewardCalculation: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
        """
        try:
            address = participant['address']
            
            # 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            tier = self._determine_tier(participant)
            formula = self.reward_formulas[tier]
            
            # 2. –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã
            base_reward = self._calculate_base_reward(participant, formula)
            
            # 3. –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤
            volume_bonus = self._calculate_volume_bonus(participant, formula, period_stats)
            holding_bonus = self._calculate_holding_bonus(participant, formula)
            loyalty_bonus = self._calculate_loyalty_bonus(participant, formula)
            tier_bonus = self._calculate_tier_bonus(participant, formula)
            
            # 4. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
            total_reward = (
                base_reward + 
                volume_bonus + 
                holding_bonus + 
                loyalty_bonus + 
                tier_bonus
            )
            
            # 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –∑–∞—â–∏—Ç—ã
            total_reward = self._apply_limits_and_protection(total_reward, participant)
            
            # 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            calculation = RewardCalculation(
                address=address,
                base_reward=base_reward,
                volume_bonus=volume_bonus,
                holding_bonus=holding_bonus,
                loyalty_bonus=loyalty_bonus,
                tier_bonus=tier_bonus,
                total_reward=total_reward,
                tier=tier,
                calculation_details=self._get_calculation_details(participant, formula)
            )
            
            # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            self.calculation_history.append(calculation)
            self.total_distributed += total_reward
            
            logger.debug(f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –¥–ª—è {address[:10]}...: {total_reward} PLEX ({tier.value})")
            return calculation
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è {participant.get('address', 'Unknown')}: {e}")
            # –í–æ–∑–≤—Ä–∞—Ç –Ω—É–ª–µ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return RewardCalculation(
                address=participant.get('address', ''),
                base_reward=Decimal('0'),
                volume_bonus=Decimal('0'),
                holding_bonus=Decimal('0'),
                loyalty_bonus=Decimal('0'),
                tier_bonus=Decimal('0'),
                total_reward=Decimal('0'),
                tier=RewardTier.BRONZE,
                calculation_details={'error': str(e)}
            )
    
    def _determine_tier(self, participant: Dict[str, Any]) -> RewardTier:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏.
        
        Args:
            participant: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            
        Returns:
            RewardTier: –£—Ä–æ–≤–µ–Ω—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        """
        volume_usd = participant.get('total_volume_usd', Decimal('0'))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É
        for tier in [RewardTier.DIAMOND, RewardTier.PLATINUM, RewardTier.GOLD, 
                     RewardTier.SILVER, RewardTier.BRONZE]:
            if volume_usd >= self.tier_thresholds[tier]:
                return tier
        
        return RewardTier.BRONZE  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _calculate_base_reward(
        self,
        participant: Dict[str, Any],
        formula: RewardFormula
    ) -> Decimal:
        """
        –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏.
        
        Args:
            participant: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            formula: –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞
            
        Returns:
            Decimal: –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –≤ PLEX
        """
        volume_usd = participant.get('total_volume_usd', Decimal('0'))
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ = –æ–±—ä–µ–º * –±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
        base_reward = volume_usd * (formula.base_rate / 100)
        
        return base_reward.quantize(Decimal('0.000000001'), rounding=ROUND_DOWN)
    
    def _calculate_volume_bonus(
        self,
        participant: Dict[str, Any],
        formula: RewardFormula,
        period_stats: Optional[Dict[str, Any]]
    ) -> Decimal:
        """
        –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞ –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        
        Args:
            participant: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            formula: –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞
            period_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            Decimal: –ë–æ–Ω—É—Å –∑–∞ –æ–±—ä–µ–º
        """
        if not period_stats:
            return Decimal('0')
        
        volume_usd = participant.get('total_volume_usd', Decimal('0'))
        avg_volume = period_stats.get('average_volume_usd', Decimal('1'))
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞
        if volume_usd > avg_volume:
            volume_ratio = min(volume_usd / avg_volume, Decimal('3'))  # –ú–∞–∫—Å–∏–º—É–º 3x
            volume_bonus = volume_usd * (formula.base_rate / 100) * (volume_ratio - 1) * formula.volume_multiplier
            return volume_bonus.quantize(Decimal('0.000000001'), rounding=ROUND_DOWN)
        
        return Decimal('0')
    
    def _calculate_holding_bonus(
        self,
        participant: Dict[str, Any],
        formula: RewardFormula
    ) -> Decimal:
        """
        –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞ —Ö–æ–ª–¥–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤.
        
        Args:
            participant: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            formula: –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞
            
        Returns:
            Decimal: –ë–æ–Ω—É—Å –∑–∞ —Ö–æ–ª–¥–∏–Ω–≥
        """
        current_balance = participant.get('current_balance', {}).get('plex', Decimal('0'))
        volume_usd = participant.get('total_volume_usd', Decimal('0'))
        
        # –ë–æ–Ω—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏
        if current_balance > 0 and volume_usd > 0:
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É PLEX = $0.001 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            estimated_plex_price = Decimal('0.001')
            balance_usd = current_balance * estimated_plex_price
            
            # –•–æ–ª–¥–∏–Ω–≥-—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (–±–∞–ª–∞–Ω—Å –∫ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏)
            holding_ratio = min(balance_usd / volume_usd, Decimal('1'))  # –ú–∞–∫—Å–∏–º—É–º 1
            
            base_reward = volume_usd * (formula.base_rate / 100)
            holding_bonus = base_reward * formula.holding_bonus * holding_ratio
            
            return holding_bonus.quantize(Decimal('0.000000001'), rounding=ROUND_DOWN)
        
        return Decimal('0')
    
    def _calculate_loyalty_bonus(
        self,
        participant: Dict[str, Any],
        formula: RewardFormula
    ) -> Decimal:
        """
        –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è).
        
        Args:
            participant: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            formula: –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞
            
        Returns:
            Decimal: –ë–æ–Ω—É—Å –∑–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
        """
        first_transaction = participant.get('first_transaction_date')
        volume_usd = participant.get('total_volume_usd', Decimal('0'))
        
        if first_transaction and volume_usd > 0:
            # –†–∞—Å—á–µ—Ç –¥–Ω–µ–π —É—á–∞—Å—Ç–∏—è
            if isinstance(first_transaction, str):
                first_transaction = datetime.fromisoformat(first_transaction.replace('Z', '+00:00'))
            
            days_active = (datetime.now(first_transaction.tzinfo) - first_transaction).days
            
            # –ë–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π (–º–∞–∫—Å–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤)
            loyalty_multiplier = min(days_active / 30, 6) * Decimal('0.1')  # 10% –∑–∞ –º–µ—Å—è—Ü, –º–∞–∫—Å–∏–º—É–º 60%
            
            base_reward = volume_usd * (formula.base_rate / 100)
            loyalty_bonus = base_reward * formula.loyalty_bonus * loyalty_multiplier
            
            return loyalty_bonus.quantize(Decimal('0.000000001'), rounding=ROUND_DOWN)
        
        return Decimal('0')
    
    def _calculate_tier_bonus(
        self,
        participant: Dict[str, Any],
        formula: RewardFormula
    ) -> Decimal:
        """
        –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.
        
        Args:
            participant: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            formula: –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞
            
        Returns:
            Decimal: –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        """
        volume_usd = participant.get('total_volume_usd', Decimal('0'))
        
        if volume_usd > 0:
            base_reward = volume_usd * (formula.base_rate / 100)
            tier_bonus = base_reward * (formula.tier_multiplier - 1)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            
            return tier_bonus.quantize(Decimal('0.000000001'), rounding=ROUND_DOWN)
        
        return Decimal('0')
    
    def _apply_limits_and_protection(
        self,
        reward: Decimal,
        participant: Dict[str, Any]
    ) -> Decimal:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏.
        
        Args:
            reward: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
            participant: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            
        Returns:
            Decimal: –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        """
        # 1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
        if reward < self.limits['min_reward_threshold']:
            return Decimal('0')
        
        # 2. –ú–∞–∫—Å–∏–º—É–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reward = min(reward, self.limits['max_reward_per_user'])
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if self.total_distributed + reward > self.limits['max_total_distribution']:
            remaining = self.limits['max_total_distribution'] - self.total_distributed
            reward = max(remaining, Decimal('0'))
        
        # 4. –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏
        reward = reward * self.limits['inflation_protection_rate']
        
        return reward.quantize(Decimal('0.000000001'), rounding=ROUND_DOWN)
    
    def _get_calculation_details(
        self,
        participant: Dict[str, Any],
        formula: RewardFormula
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—á–µ—Ç–µ.
        
        Args:
            participant: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            formula: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
            
        Returns:
            Dict: –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞
        """
        return {
            'participant_address': participant.get('address'),
            'volume_usd': float(participant.get('total_volume_usd', 0)),
            'current_balance_plex': float(participant.get('current_balance', {}).get('plex', 0)),
            'formula_used': {
                'base_rate': float(formula.base_rate),
                'volume_multiplier': float(formula.volume_multiplier),
                'holding_bonus': float(formula.holding_bonus),
                'loyalty_bonus': float(formula.loyalty_bonus),
                'tier_multiplier': float(formula.tier_multiplier)
            },
            'calculation_timestamp': datetime.now().isoformat(),
            'total_distributed_so_far': float(self.total_distributed)
        }
    
    def calculate_batch_rewards(
        self,
        participants: List[Dict[str, Any]],
        normalize_by_period: bool = True
    ) -> List[RewardCalculation]:
        """
        –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π.
        
        Args:
            participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            normalize_by_period: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –ø–µ—Ä–∏–æ–¥—É
            
        Returns:
            List[RewardCalculation]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
        """
        if not participants:
            return []
        
        try:
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            period_stats = None
            if normalize_by_period:
                period_stats = self._calculate_period_stats(participants)
            
            # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            calculations = []
            for participant in participants:
                calculation = self.calculate_participant_reward(participant, period_stats)
                calculations.append(calculation)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –Ω–∞–≥—Ä–∞–¥—ã (–æ—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π)
            calculations.sort(key=lambda x: x.total_reward, reverse=True)
            
            logger.info(f"üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è {len(calculations)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. "
                       f"–û–±—â–∞—è —Å—É–º–º–∞: {sum(c.total_reward for c in calculations)} PLEX")
            
            return calculations
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã: {e}")
            return []
    
    def _calculate_period_stats(self, participants: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥.
        
        Args:
            participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–∏–æ–¥–∞
        """
        if not participants:
            return {}
        
        volumes = [p.get('total_volume_usd', Decimal('0')) for p in participants]
        volumes = [v for v in volumes if v > 0]  # –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã
        
        if not volumes:
            return {}
        
        total_volume = sum(volumes)
        avg_volume = total_volume / len(volumes)
        median_volume = sorted(volumes)[len(volumes) // 2]
        max_volume = max(volumes)
        min_volume = min(volumes)
        
        return {
            'total_participants': len(participants),
            'active_participants': len(volumes),
            'total_volume_usd': total_volume,
            'average_volume_usd': avg_volume,
            'median_volume_usd': median_volume,
            'max_volume_usd': max_volume,
            'min_volume_usd': min_volume,
            'volume_std_dev': self._calculate_std_dev(volumes, avg_volume)
        }
    
    def _calculate_std_dev(self, values: List[Decimal], mean: Decimal) -> Decimal:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."""
        if len(values) < 2:
            return Decimal('0')
        
        variance = sum((v - mean) ** 2 for v in values) / len(values)
        return variance.sqrt()
    
    def get_tier_distribution(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º.
        
        Returns:
            Dict: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
        """
        distribution = {tier.value: 0 for tier in RewardTier}
        
        for calculation in self.calculation_history:
            distribution[calculation.tier.value] += 1
        
        return distribution
    
    def get_total_distributed(self) -> Decimal:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.
        
        Returns:
            Decimal: –û–±—â–∞—è —Å—É–º–º–∞ –≤ PLEX
        """
        return self.total_distributed
    
    def reset_calculator(self) -> None:
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
        self.total_distributed = Decimal('0')
        self.calculation_history.clear()
        logger.info("üîÑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–≥—Ä–∞–¥ —Å–±—Ä–æ—à–µ–Ω")
    
    def get_calculator_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        """
        if not self.calculation_history:
            return {
                'total_calculations': 0,
                'total_distributed': 0,
                'tier_distribution': {},
                'avg_reward': 0,
                'max_reward': 0,
                'min_reward': 0
            }
        
        rewards = [c.total_reward for c in self.calculation_history if c.total_reward > 0]
        
        return {
            'total_calculations': len(self.calculation_history),
            'successful_calculations': len(rewards),
            'total_distributed': float(self.total_distributed),
            'tier_distribution': self.get_tier_distribution(),
            'avg_reward': float(sum(rewards) / len(rewards)) if rewards else 0,
            'max_reward': float(max(rewards)) if rewards else 0,
            'min_reward': float(min(rewards)) if rewards else 0,
            'remaining_distribution_capacity': float(
                self.limits['max_total_distribution'] - self.total_distributed
            )
        }


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['RewardCalculator', 'RewardTier', 'RewardFormula', 'RewardCalculation']


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è
    def test_reward_calculator():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RewardCalculator."""
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RewardCalculator...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            calculator = RewardCalculator()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            test_participants = [
                {
                    'address': '0x1234567890123456789012345678901234567890',
                    'total_volume_usd': Decimal('50000'),  # Platinum —É—Ä–æ–≤–µ–Ω—å
                    'current_balance': {'plex': Decimal('100000')},
                    'first_transaction_date': datetime.now() - timedelta(days=60)
                },
                {
                    'address': '0x2345678901234567890123456789012345678901',
                    'total_volume_usd': Decimal('2000'),   # Gold —É—Ä–æ–≤–µ–Ω—å
                    'current_balance': {'plex': Decimal('10000')},
                    'first_transaction_date': datetime.now() - timedelta(days=30)
                },
                {
                    'address': '0x3456789012345678901234567890123456789012',
                    'total_volume_usd': Decimal('500'),    # Silver —É—Ä–æ–≤–µ–Ω—å
                    'current_balance': {'plex': Decimal('5000')},
                    'first_transaction_date': datetime.now() - timedelta(days=15)
                }
            ]
            
            # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
            print("üí∞ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            calculations = calculator.calculate_batch_rewards(test_participants)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for calc in calculations:
                print(f"\nüë§ –£—á–∞—Å—Ç–Ω–∏–∫: {calc.address[:10]}...")
                print(f"   üèÜ –£—Ä–æ–≤–µ–Ω—å: {calc.tier.value}")
                print(f"   üí∞ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {calc.base_reward}")
                print(f"   üìà –ë–æ–Ω—É—Å –æ–±—ä–µ–º–∞: {calc.volume_bonus}")
                print(f"   ü§ù –ë–æ–Ω—É—Å —Ö–æ–ª–¥–∏–Ω–≥–∞: {calc.holding_bonus}")
                print(f"   ‚≠ê –ë–æ–Ω—É—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {calc.loyalty_bonus}")
                print(f"   üéØ –ë–æ–Ω—É—Å —É—Ä–æ–≤–Ω—è: {calc.tier_bonus}")
                print(f"   üéâ –ò–¢–û–ì–û: {calc.total_reward} PLEX")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            stats = calculator.get_calculator_stats()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:")
            print(f"   –í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {stats['total_calculations']}")
            print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {stats['total_distributed']} PLEX")
            print(f"   –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['avg_reward']:.2f} PLEX")
            print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º: {stats['tier_distribution']}")
            
            print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RewardCalculator –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # test_reward_calculator()
    print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
