"""
PLEX Dynamic Staking Manager - –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–æ —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ async/await.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.2
"""

import time
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from web3 import Web3

from config.constants import *
from utils.logger import get_logger
from utils.retry import with_retry

logger = get_logger(__name__)


@dataclass
class SimpleParticipantData:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
    address: str
    swaps_count: int = 0
    last_activity: Optional[datetime] = None
    category: str = "Unknown"
    status: str = "Active"


class SimpleAnalyzer:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã.
    
    –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç async/await, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ BSC.
    """
    
    def __init__(self):
        self.w3 = None
        self.participants = {}
        self.is_analyzing = False
        
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC."""
        try:
            logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BSC QuickNode...")
            self.w3 = Web3(Web3.HTTPProvider(QUICKNODE_HTTP))
            
            if not self.w3.is_connected():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC")
                return False
                
            current_block = self.w3.eth.block_number
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC. –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: {current_block}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC: {e}")
            return False

    @with_retry(max_attempts=3)
    def get_current_block(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞."""
        return self.w3.eth.block_number

    @with_retry(max_attempts=3)
    def get_token_balance(self, address: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞."""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ABI –¥–ª—è balanceOf
            balance_abi = [{
                "constant": True,
                "inputs": [{"name": "_owner", "type": "address"}],
                "name": "balanceOf",
                "outputs": [{"name": "balance", "type": "uint256"}],
                "type": "function"
            }]
            
            contract = self.w3.eth.contract(
                address=Web3.to_checksum_address(TOKEN_ADDRESS),
                abi=balance_abi
            )
            
            balance_wei = contract.functions.balanceOf(
                Web3.to_checksum_address(address)
            ).call()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ wei –≤ —Ç–æ–∫–µ–Ω—ã (decimals = 9)
            return Decimal(balance_wei) / Decimal(10 ** TOKEN_DECIMALS)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {address}: {e}")
            return Decimal("0")
    
    def analyze_period(self, hours: int, progress_callback=None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            self.is_analyzing = True
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
            
            if progress_callback:
                progress_callback("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", 0.1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not self.w3 or not self.w3.is_connected():
                if not self.initialize():
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC")
            
            if progress_callback:
                progress_callback("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤...", 0.2)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫–æ–≤
            current_block = self.get_current_block()
            # –ü—Ä–∏–º–µ—Ä–Ω–æ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –±–ª–æ–∫ –≤ BSC
            blocks_per_hour = 1200
            start_block = current_block - (hours * blocks_per_hour)
            
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤ {start_block} - {current_block}")
            
            if progress_callback:
                progress_callback("–°–±–æ—Ä Transfer —Å–æ–±—ã—Ç–∏–π...", 0.3)
            
            # –ü–æ–ª—É—á–∞–µ–º Transfer —Å–æ–±—ã—Ç–∏—è
            transfers = self._get_transfer_events(start_block, current_block)
            logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(transfers)} Transfer —Å–æ–±—ã—Ç–∏–π")
            
            if progress_callback:
                progress_callback("–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...", 0.5)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = self._analyze_participants(transfers, progress_callback)
            
            if progress_callback:
                progress_callback("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...", 0.9)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'success': True,
                'timestamp': datetime.now(),
                'period_hours': hours,
                'blocks_analyzed': current_block - start_block + 1,
                'start_block': start_block,
                'end_block': current_block,
                'total_transfers': len(transfers),
                'unique_participants': len(participants),
                'participants': participants,
                'summary': self._generate_summary(participants)
            }
            
            if progress_callback:
                progress_callback("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!", 1.0)
                
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            if progress_callback:
                progress_callback(f"–û—à–∏–±–∫–∞: {e}", 0.0)
            return {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now()
            }
        finally:
            self.is_analyzing = False

    @with_retry(max_attempts=3)
    def _get_transfer_events(self, start_block: int, end_block: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Transfer —Å–æ–±—ã—Ç–∏–π —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞–Ω–∫–∏."""
        try:
            # Transfer event signature: Transfer(address,address,uint256)
            transfer_topic = "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ 413
            max_chunk_size = 2000  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è QuickNode
            total_blocks = end_block - start_block + 1
            
            transfers = []
            current_start = start_block
            
            logger.info(f"üìä –°–±–æ—Ä –ª–æ–≥–æ–≤ –ø–æ —á–∞–Ω–∫–∞–º: {total_blocks} –±–ª–æ–∫–æ–≤, —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {max_chunk_size}")
            
            while current_start <= end_block:
                current_end = min(current_start + max_chunk_size - 1, end_block)
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ Transfer —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞
                    logs = self.w3.eth.get_logs({
                        'fromBlock': hex(current_start),
                        'toBlock': hex(current_end),
                        'address': TOKEN_ADDRESS,
                        'topics': [transfer_topic]
                    })
                    
                    logger.info(f"üìù –ß–∞–Ω–∫ {current_start}-{current_end}: –Ω–∞–π–¥–µ–Ω–æ {len(logs)} —Å–æ–±—ã—Ç–∏–π")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞
                    chunk_transfers = self._process_transfer_logs(logs)
                    transfers.extend(chunk_transfers)
                    
                except Exception as e:
                    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ 413, —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
                    if "413" in str(e) or "Request Entity Too Large" in str(e):
                        max_chunk_size = max(500, max_chunk_size // 2)
                        logger.warning(f"‚ö†Ô∏è –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–æ {max_chunk_size} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ 413")
                        continue
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –¥–ª—è —á–∞–Ω–∫–∞ {current_start}-{current_end}: {e}")
                        
                current_start = current_end + 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
                time.sleep(0.1)
            
            logger.info(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(transfers)} Transfer —Å–æ–±—ã—Ç–∏–π")
            return transfers
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ Transfer —Å–æ–±—ã—Ç–∏–π: {e}")
            return []

    def _process_transfer_logs(self, logs: List) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ–≤ Transfer —Å–æ–±—ã—Ç–∏–π."""
        transfers = []
        
        for log in logs:
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Transfer —Å–æ–±—ã—Ç–∏–µ
                # topics[0] = event signature
                # topics[1] = from address (indexed)
                # topics[2] = to address (indexed)
                # data = amount (not indexed)
                
                from_address = self.w3.to_checksum_address("0x" + log['topics'][1].hex()[-40:])
                to_address = self.w3.to_checksum_address("0x" + log['topics'][2].hex()[-40:])
                amount_hex = log['data']
                amount = int(amount_hex, 16)
                
                transfer = {
                    'from': from_address,
                    'to': to_address,
                    'amount': amount,
                    'block_number': log['blockNumber'],
                    'transaction_hash': log['transactionHash'].hex()
                }
                
                transfers.append(transfer)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Transfer –ª–æ–≥–∞: {e}")
                continue
        
        return transfers

    def _analyze_participants(self, transfers: List[Dict], progress_callback=None) -> Dict[str, SimpleParticipantData]:
        """–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Transfer —Å–æ–±—ã—Ç–∏–π."""
        participants = {}
        
        for i, transfer in enumerate(transfers):
            if progress_callback and i % 10 == 0:
                progress = 0.5 + (i / len(transfers)) * 0.4  # 0.5 to 0.9
                progress_callback(f"–ê–Ω–∞–ª–∏–∑ Transfer {i+1}/{len(transfers)}...", progress)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            from_addr = transfer['from']
            if from_addr not in participants:
                participants[from_addr] = SimpleParticipantData(
                    address=from_addr,
                    swaps_count=1,
                    last_activity=datetime.now(),
                    category="Seller",
                    status="Active"
                )
            else:
                participants[from_addr].swaps_count += 1
                participants[from_addr].last_activity = datetime.now()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            to_addr = transfer['to']
            if to_addr not in participants:
                participants[to_addr] = SimpleParticipantData(
                    address=to_addr,
                    swaps_count=1,
                    last_activity=datetime.now(),
                    category="Buyer",
                    status="Active"
                )
            else:
                participants[to_addr].swaps_count += 1
                participants[to_addr].last_activity = datetime.now()
        
        return participants

    def _generate_summary(self, participants: Dict[str, SimpleParticipantData]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."""
        if not participants:
            return {
                'total_participants': 0,
                'categories': {},
                'statuses': {}
            }
        
        categories = {}
        statuses = {}
        
        for participant in participants.values():
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cat = participant.category
            categories[cat] = categories.get(cat, 0) + 1
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status = participant.status
            statuses[status] = statuses.get(status, 0) + 1
        
        return {
            'total_participants': len(participants),
            'categories': categories,
            'statuses': statuses
        }

    def stop_analysis(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        self.is_analyzing = False
        logger.info("‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def analyze_participants(self, hours: int = 24) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        
        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        return self.analyze_period(hours)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI
simple_analyzer = SimpleAnalyzer()
