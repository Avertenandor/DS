"""
PLEX Dynamic Staking Manager - –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–æ —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ async/await.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import time
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from web3 import Web3

from config.constants import *
from utils.logger import get_logger
from utils.retry import with_retry

logger = get_logger(__name__)


@dataclass
class SimpleParticipantData:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
    address: str
    swaps_count: int = 0
    last_activity: Optional[datetime] = None
    category: str = "Unknown"
    status: str = "Active"
    

class SimpleAnalyzer:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã.
    
    –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç async/await, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ BSC.
    """
      def __init__(self):
        self.w3 = None
        self.participants = {}
        self.is_analyzing = False
        
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC."""
        try:
            logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BSC QuickNode...")
            self.w3 = Web3(Web3.HTTPProvider(QUICKNODE_HTTP))
            
            if not self.w3.is_connected():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC")
                return False
                
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC. –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: {self.w3.eth.block_number}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    @with_retry(max_attempts=3)
    def get_current_block(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞."""
        if not self.w3:
            raise Exception("Web3 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return self.w3.eth.block_number
    
    @with_retry(max_attempts=3)
    def get_token_balance(self, address: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ PLEX —Ç–æ–∫–µ–Ω–∞."""
        try:
            if not self.w3:
                return Decimal("0")
                
            # –ü—Ä–æ—Å—Ç–æ–π ABI –¥–ª—è balanceOf
            balance_abi = [{
                "constant": True,
                "inputs": [{"name": "_owner", "type": "address"}],
                "name": "balanceOf",
                "outputs": [{"name": "balance", "type": "uint256"}],
                "type": "function"
            }]
            
            contract = self.w3.eth.contract(
                address=Web3.to_checksum_address(TOKEN_ADDRESS),
                abi=balance_abi
            )
            
            balance_wei = contract.functions.balanceOf(Web3.to_checksum_address(address)).call()
            balance_tokens = Decimal(balance_wei) / Decimal(10 ** TOKEN_DECIMALS)
            
            return balance_tokens
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {address}: {e}")
            return Decimal("0")
    
    def analyze_period(self, hours: int = 24, progress_callback=None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            self.is_analyzing = True
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
            
            if progress_callback:
                progress_callback("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", 0.1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not self.w3 or not self.w3.is_connected():
                if not self.initialize():
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC")
            
            if progress_callback:
                progress_callback("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞...", 0.2)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
            current_block = self.get_current_block()
            logger.info(f"üìä –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: {current_block:,}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –±–ª–æ–∫)
            blocks_per_hour = 1200  # 3600 —Å–µ–∫—É–Ω–¥ / 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –±–ª–æ–∫
            start_block = max(1, current_block - (hours * blocks_per_hour))
            
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–∏ {start_block:,} - {current_block:,}")
            
            if progress_callback:
                progress_callback("–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π PLEX...", 0.3)
            
            # –ü–æ–ª—É—á–∞–µ–º Transfer —Å–æ–±—ã—Ç–∏—è PLEX —Ç–æ–∫–µ–Ω–∞
            transfers = self._get_transfer_events(start_block, current_block)
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(transfers)} Transfer —Å–æ–±—ã—Ç–∏–π")
            
            if progress_callback:
                progress_callback("–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...", 0.5)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = self._analyze_participants(transfers, progress_callback)
            
            if progress_callback:
                progress_callback("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...", 0.9)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'success': True,
                'timestamp': datetime.now(),
                'period_hours': hours,
                'blocks_analyzed': current_block - start_block + 1,
                'start_block': start_block,
                'end_block': current_block,
                'total_transfers': len(transfers),
                'unique_participants': len(participants),
                'participants': participants,
                'summary': self._generate_summary(participants)
            }
            
            if progress_callback:
                progress_callback("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!", 1.0)
                
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            if progress_callback:
                progress_callback(f"–û—à–∏–±–∫–∞: {e}", 0.0)
            return {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now()
            }
        finally:
            self.is_analyzing = False
      @with_retry(max_attempts=3)
    def _get_transfer_events(self, start_block: int, end_block: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Transfer —Å–æ–±—ã—Ç–∏–π."""
        try:
            # Transfer event signature: Transfer(address,address,uint256)
            transfer_topic = "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ Transfer —Å–æ–±—ã—Ç–∏–π
            logs = self.w3.eth.get_logs({
                'fromBlock': hex(start_block),
                'toBlock': hex(end_block),
                'address': TOKEN_ADDRESS,
                'topics': [transfer_topic]
            })
            
            transfers = []
            for log in logs:
                try:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Transfer —Å–æ–±—ã—Ç–∏—è
                    from_address = "0x" + log['topics'][1].hex()[26:]  # –£–±–∏—Ä–∞–µ–º padding
                    to_address = "0x" + log['topics'][2].hex()[26:]    # –£–±–∏—Ä–∞–µ–º padding
                    amount = int(log['data'], 16)
                    
                    transfers.append({
                        'from': from_address.lower(),
                        'to': to_address.lower(),
                        'amount': amount,
                        'block_number': log['blockNumber'],
                        'transaction_hash': log['transactionHash'].hex()
                    })
                except Exception as decode_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞: {decode_error}")
                    continue
            
            return transfers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Transfer —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
    
    def _analyze_participants(self, transfers: List[Dict], progress_callback=None) -> Dict[str, SimpleParticipantData]:
        """–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Transfer —Å–æ–±—ã—Ç–∏–π."""
        participants = {}
        
        for i, transfer in enumerate(transfers):
            if not self.is_analyzing:
                break
                
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                from_addr = transfer['from']
                to_addr = transfer['to']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                if from_addr != "0x0000000000000000000000000000000000000000":  # –ù–µ mint
                    if from_addr not in participants:
                        participants[from_addr] = SimpleParticipantData(
                            address=from_addr,
                            category="Holder"
                        )
                    participants[from_addr].swaps_count += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                if to_addr != "0x0000000000000000000000000000000000000000":  # –ù–µ burn
                    if to_addr not in participants:
                        participants[to_addr] = SimpleParticipantData(
                            address=to_addr,
                            category="Holder"
                        )
                    participants[to_addr].swaps_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if progress_callback and i % 100 == 0:
                    progress = 0.5 + (i / len(transfers)) * 0.4  # 50% - 90%
                    progress_callback(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{len(transfers)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", progress)
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ transfer: {e}")
                continue
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        active_participants = {addr: data for addr, data in participants.items() 
                             if data.swaps_count > 0}
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è {len(active_participants)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        for i, (address, participant) in enumerate(active_participants.items()):
            if not self.is_analyzing:
                break
                
            try:
                balance = self.get_token_balance(address)
                participant.status = "Active" if balance > Decimal("100") else "Low Balance"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if progress_callback and i % 10 == 0:
                    progress = 0.9 + (i / len(active_participants)) * 0.1  # 90% - 100%
                    progress_callback(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ {i+1}/{len(active_participants)}", progress)
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {address}: {e}")
                participant.status = "Unknown"
        
        return active_participants
    
    def _generate_summary(self, participants: Dict[str, SimpleParticipantData]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        if not participants:
            return {
                'total_participants': 0,
                'categories': {},
                'statuses': {}
            }
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        statuses = {}
        
        for participant in participants.values():
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            cat = participant.category
            categories[cat] = categories.get(cat, 0) + 1
            
            # –°—Ç–∞—Ç—É—Å—ã
            status = participant.status
            statuses[status] = statuses.get(status, 0) + 1
        
        return {
            'total_participants': len(participants),
            'categories': categories,
            'statuses': statuses,
            'most_active': self._get_most_active_participants(participants, 10)
        }
    
    def _get_most_active_participants(self, participants: Dict[str, SimpleParticipantData], 
                                    limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        sorted_participants = sorted(
            participants.items(),
            key=lambda x: x[1].swaps_count,
            reverse=True
        )
        
        return [
            {
                'address': addr,
                'swaps_count': data.swaps_count,
                'category': data.category,
                'status': data.status
            }
            for addr, data in sorted_participants[:limit]
        ]
    
    def stop_analysis(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        self.is_analyzing = False
        logger.info("‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI
simple_analyzer = SimpleAnalyzer()
