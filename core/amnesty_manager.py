"""
–ú–æ–¥—É–ª—å: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏—è–º–∏ PLEX Dynamic Staking
–û–ø–∏—Å–∞–Ω–∏–µ: –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏—è–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import json
from typing import Dict, List, Optional, Set
from decimal import Decimal
from datetime import datetime, timedelta
from enum import Enum

from utils.logger import get_logger
from db.models import DatabaseManager

logger = get_logger("PLEX_AmnestyManager")


class AmnestyStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∞–º–Ω–∏—Å—Ç–∏–∏"""
    PENDING = "pending"        # –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
    APPROVED = "approved"      # –û–¥–æ–±—Ä–µ–Ω–∞
    REJECTED = "rejected"      # –û—Ç–∫–ª–æ–Ω–µ–Ω–∞
    EXPIRED = "expired"        # –ò—Å—Ç–µ–∫–ª–∞


class AmnestyReason(Enum):
    """–ü—Ä–∏—á–∏–Ω—ã –∞–º–Ω–∏—Å—Ç–∏–∏"""
    MISSED_DAYS = "missed_days"              # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏ –ø–æ–∫—É–ø–æ–∫
    TECHNICAL_ISSUES = "technical_issues"    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    FORCE_MAJEURE = "force_majeure"         # –§–æ—Ä—Å-–º–∞–∂–æ—Ä
    TRANSFER_ONLY = "transfer_only"         # –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–∫–µ–Ω–æ–≤
    MANUAL_REVIEW = "manual_review"         # –†—É—á–Ω–æ–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä


class AmnestyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–º–Ω–∏—Å—Ç–∏–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–º–Ω–∏—Å—Ç–∏–π"""
        self.logger = logger
        self.db = DatabaseManager()
        
        # –ü—Ä–∞–≤–∏–ª–∞ –∞–º–Ω–∏—Å—Ç–∏–π –∏–∑ –¢–ó
        self.amnesty_rules = {
            'missed_purchase': {
                'auto_eligible': True,
                'max_missed_days': 7,  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –∞–≤—Ç–æ-–∞–º–Ω–∏—Å—Ç–∏–∏
                'requires_manual': False
            },
            'transferred': {
                'auto_eligible': True,
                'max_transfer_amount': Decimal('1000'),  # USD
                'requires_manual': False
            },
            'sold_token': {
                'auto_eligible': False,
                'requires_manual': True,
                'default_action': 'reject'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª–æ–Ω—è—Ç—å
            }
        }
        
        # –ö—ç—à —Ä–µ—à–µ–Ω–∏–π
        self.amnesty_cache: Dict[str, Dict] = {}
        
        logger.info("ü§ù –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–º–Ω–∏—Å—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìã –ü—Ä–∞–≤–∏–ª–∞ –∞–º–Ω–∏—Å—Ç–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {len(self.amnesty_rules)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    def request_amnesty(self, 
                       address: str,
                       category: str,
                       reason: AmnestyReason,
                       details: Dict,
                       auto_approve: bool = False) -> Dict:
        """
        –ó–∞–ø—Ä–æ—Å –∞–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        
        Args:
            address: –ê–¥—Ä–µ—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (missed_purchase, transferred, sold_token)
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∞–º–Ω–∏—Å—Ç–∏–∏
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            auto_approve: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∞–º–Ω–∏—Å—Ç–∏–∏
        """
        logger.info(f"ü§ù –ó–∞–ø—Ä–æ—Å –∞–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è {address} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–º–Ω–∏—Å—Ç–∏–∏
            eligibility_check = self._check_amnesty_eligibility(address, category, details)
            
            if not eligibility_check['eligible']:
                return self._create_amnesty_result(
                    address=address,
                    status=AmnestyStatus.REJECTED,
                    reason=eligibility_check['reason'],
                    details=eligibility_check
                )
            
            # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if auto_approve and eligibility_check['auto_approvable']:
                return self._approve_amnesty(address, reason, details, auto=True)
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä—É—á–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
            amnesty_request = {
                'address': address,
                'category': category,
                'reason': reason.value,
                'details': details,
                'status': AmnestyStatus.PENDING.value,
                'created_at': datetime.now().isoformat(),
                'expires_at': (datetime.now() + timedelta(days=30)).isoformat(),
                'reviewed_by': None,
                'reviewed_at': None
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self._save_amnesty_request(amnesty_request)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.amnesty_cache[address] = amnesty_request
            
            logger.info(f"üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {address}")
            
            return self._create_amnesty_result(
                address=address,
                status=AmnestyStatus.PENDING,
                reason="–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ",
                details=amnesty_request
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è {address}: {e}")
            return self._create_amnesty_result(
                address=address,
                status=AmnestyStatus.REJECTED,
                reason=f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}",
                details={'error': str(e)}
            )

    def review_amnesty(self, 
                      address: str,
                      decision: AmnestyStatus,
                      reviewer: str,
                      comments: str = "") -> Dict:
        """
        –†—É—á–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é
        
        Args:
            address: –ê–¥—Ä–µ—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            decision: –†–µ—à–µ–Ω–∏–µ (APPROVED/REJECTED)
            reviewer: –ö—Ç–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç
            comments: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ä–µ—à–µ–Ω–∏—é
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
        """
        logger.info(f"üë®‚Äç‚öñÔ∏è –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–∏ {address} ({decision.value}) - {reviewer}")
        
        try:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            request = self._get_amnesty_request(address)
            if not request:
                return {
                    'success': False,
                    'reason': "–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    'address': address
                }
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            if request['status'] != AmnestyStatus.PENDING.value:
                return {
                    'success': False,
                    'reason': f"–ó–∞—è–≤–∫–∞ —É–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {request['status']})",
                    'address': address
                }
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            if self._is_expired(request):
                self._update_amnesty_status(address, AmnestyStatus.EXPIRED)
                return {
                    'success': False,
                    'reason': "–°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏—Å—Ç–µ–∫",
                    'address': address
                }
            
            # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            review_data = {
                'status': decision.value,
                'reviewed_by': reviewer,
                'reviewed_at': datetime.now().isoformat(),
                'review_comments': comments
            }
            
            self._update_amnesty_request(address, review_data)
            
            # 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
            self._log_amnesty_decision(address, decision, reviewer, comments)
            
            logger.info(f"‚úÖ –ê–º–Ω–∏—Å—Ç–∏—è {address} {decision.value} - {reviewer}")
            
            return {
                'success': True,
                'address': address,
                'decision': decision.value,
                'reviewer': reviewer,
                'timestamp': review_data['reviewed_at']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–º–Ω–∏—Å—Ç–∏–∏ {address}: {e}")
            return {
                'success': False,
                'reason': f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}",
                'address': address
            }

    def get_amnesty_status(self, address: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if address in self.amnesty_cache:
            return self.amnesty_cache[address]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        request = self._get_amnesty_request(address)
        if request:
            self.amnesty_cache[address] = request
            return request
        
        return None

    def is_amnesty_approved(self, address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–¥–æ–±—Ä–µ–Ω–∞ –ª–∏ –∞–º–Ω–∏—Å—Ç–∏—è"""
        status = self.get_amnesty_status(address)
        return status and status['status'] == AmnestyStatus.APPROVED.value

    def get_pending_requests(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            pending = []
            for address, request in self.amnesty_cache.items():
                if request['status'] == AmnestyStatus.PENDING.value:
                    if not self._is_expired(request):
                        pending.append(request)
                    else:
                        # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ
                        self._update_amnesty_status(address, AmnestyStatus.EXPIRED)
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending)} –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ")
            return pending
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []

    def bulk_approve_amnesty(self, 
                           addresses: List[str],
                           reviewer: str,
                           reason: str = "–ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ") -> Dict:
        """–ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–π"""
        logger.info(f"üéØ –ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–π –¥–ª—è {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤")
        
        results = {
            'approved': [],
            'failed': [],
            'total': len(addresses)
        }
        
        for address in addresses:
            try:
                result = self.review_amnesty(
                    address=address,
                    decision=AmnestyStatus.APPROVED,
                    reviewer=reviewer,
                    comments=reason
                )
                
                if result['success']:
                    results['approved'].append(address)
                else:
                    results['failed'].append({
                        'address': address,
                        'reason': result['reason']
                    })
                    
            except Exception as e:
                results['failed'].append({
                    'address': address,
                    'reason': str(e)
                })
        
        logger.info(f"‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ: {len(results['approved'])}/{len(addresses)} —É—Å–ø–µ—à–Ω–æ")
        return results

    def _check_amnesty_eligibility(self, address: str, category: str, details: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é"""
        
        if category not in self.amnesty_rules:
            return {
                'eligible': False,
                'reason': f"–ê–º–Ω–∏—Å—Ç–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}",
                'auto_approvable': False
            }
        
        rules = self.amnesty_rules[category]
        
        if not rules['auto_eligible']:
            return {
                'eligible': rules.get('requires_manual', False),
                'reason': "–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
                'auto_approvable': False
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        if category == 'missed_purchase':
            missed_days = details.get('missed_days', 0)
            if missed_days > rules['max_missed_days']:
                return {
                    'eligible': True,
                    'reason': f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π ({missed_days})",
                    'auto_approvable': False
                }
        
        return {
            'eligible': True,
            'reason': "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
            'auto_approvable': True
        }

    def _approve_amnesty(self, address: str, reason: AmnestyReason, details: Dict, auto: bool = False) -> Dict:
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–∏"""
        
        amnesty_data = {
            'address': address,
            'status': AmnestyStatus.APPROVED.value,
            'reason': reason.value,
            'details': details,
            'approved_at': datetime.now().isoformat(),
            'auto_approved': auto,
            'reviewed_by': 'system' if auto else None
        }
        
        self._save_amnesty_request(amnesty_data)
        self.amnesty_cache[address] = amnesty_data
        
        return self._create_amnesty_result(
            address=address,
            status=AmnestyStatus.APPROVED,
            reason="–ê–º–Ω–∏—Å—Ç–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞",
            details=amnesty_data
        )

    def _create_amnesty_result(self, address: str, status: AmnestyStatus, reason: str, details: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–º–Ω–∏—Å—Ç–∏–∏"""
        return {
            'address': address,
            'status': status.value,
            'reason': reason,
            'timestamp': datetime.now().isoformat(),
            'details': details
        }

    def _save_amnesty_request(self, request: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é: {request['address']}")
    
    def _get_amnesty_request(self, address: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)"""
        return self.amnesty_cache.get(address)
    
    def _update_amnesty_request(self, address: str, updates: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)"""
        if address in self.amnesty_cache:
            self.amnesty_cache[address].update(updates)
    
    def _update_amnesty_status(self, address: str, status: AmnestyStatus):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–º–Ω–∏—Å—Ç–∏–∏"""
        self._update_amnesty_request(address, {
            'status': status.value,
            'updated_at': datetime.now().isoformat()
        })
    
    def _is_expired(self, request: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –∑–∞—è–≤–∫–∏"""
        expires_at = datetime.fromisoformat(request['expires_at'])
        return datetime.now() > expires_at
    
    def _log_amnesty_decision(self, address: str, decision: AmnestyStatus, reviewer: str, comments: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –∞–º–Ω–∏—Å—Ç–∏–∏"""
        logger.info(f"üìã –†–ï–®–ï–ù–ò–ï –ü–û –ê–ú–ù–ò–°–¢–ò–ò:")
        logger.info(f"   –ê–¥—Ä–µ—Å: {address}")
        logger.info(f"   –†–µ—à–µ–Ω–∏–µ: {decision.value}")
        logger.info(f"   –†–∞—Å—Å–º–æ—Ç—Ä–µ–ª: {reviewer}")
        logger.info(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comments}")

    def generate_amnesty_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–º–Ω–∏—Å—Ç–∏—è–º"""
        
        report = {
            'total_requests': len(self.amnesty_cache),
            'by_status': {},
            'by_category': {},
            'pending_count': 0,
            'expired_count': 0,
            'auto_approved': 0,
            'manual_reviewed': 0
        }
        
        for address, request in self.amnesty_cache.items():
            status = request['status']
            category = request.get('category', 'unknown')
            
            # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
            if status not in report['by_status']:
                report['by_status'][status] = 0
            report['by_status'][status] += 1
            
            # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if category not in report['by_category']:
                report['by_category'][category] = 0
            report['by_category'][category] += 1
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
            if status == AmnestyStatus.PENDING.value:
                if self._is_expired(request):
                    report['expired_count'] += 1
                else:
                    report['pending_count'] += 1
            
            if request.get('auto_approved'):
                report['auto_approved'] += 1
            elif request.get('reviewed_by'):
                report['manual_reviewed'] += 1
        
        logger.info(f"üìä –û—Ç—á–µ—Ç –ø–æ –∞–º–Ω–∏—Å—Ç–∏—è–º:")
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {report['total_requests']}")
        logger.info(f"   –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {report['pending_count']}")
        logger.info(f"   –ò—Å—Ç–µ–∫—à–∏—Ö: {report['expired_count']}")
        logger.info(f"   –ê–≤—Ç–æ-–æ–¥–æ–±—Ä–µ–Ω–æ: {report['auto_approved']}")
        logger.info(f"   –†—É—á–Ω–æ–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä: {report['manual_reviewed']}")
        
        return report

    def apply_amnesty(self, participant_data) -> Dict:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            participant_data: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (ParticipantData)
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–º–Ω–∏—Å—Ç–∏–∏
        """
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant_data.address}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∞–º–Ω–∏—Å—Ç–∏–∏
        eligibility_result = self._analyze_participant_for_amnesty(participant_data)
        
        if eligibility_result['needs_amnesty']:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–º–Ω–∏—Å—Ç–∏–∏
            category = eligibility_result['category']
            reason = eligibility_result['reason']
            details = eligibility_result['details']
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–º–Ω–∏—Å—Ç–∏—é
            return self.request_amnesty(
                address=participant_data.address,
                category=category,
                reason=reason,
                details=details,
                auto_approve=eligibility_result.get('auto_approve', False)
            )
        else:
            return {
                'address': participant_data.address,
                'needs_amnesty': False,
                'reason': '–£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º'
            }

    def _analyze_participant_for_amnesty(self, participant_data) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∞–º–Ω–∏—Å—Ç–∏–∏
        
        Args:
            participant_data: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∞–º–Ω–∏—Å—Ç–∏–∏
        result = {
            'needs_amnesty': False,
            'category': None,
            'reason': None,
            'details': {},
            'auto_approve': False
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏–∑–∫–∏–π eligibility_score
        if participant_data.eligibility_score < 50.0:
            result['needs_amnesty'] = True
            result['category'] = 'missed_purchase'
            result['reason'] = AmnestyReason.MISSED_DAYS
            result['details'] = {
                'eligibility_score': float(participant_data.eligibility_score),
                'category': participant_data.category
            }
            result['auto_approve'] = participant_data.category in ['VIP', 'Premium']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
        elif not participant_data.is_qualified and participant_data.category in ['VIP', 'Premium']:
            result['needs_amnesty'] = True
            result['category'] = 'manual_review'
            result['reason'] = AmnestyReason.MANUAL_REVIEW
            result['details'] = {
                'category': participant_data.category,
                'total_volume': float(participant_data.total_volume_usd)
            }
            result['auto_approve'] = participant_data.category == 'VIP'
        
        return result

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
amnesty_manager = AmnestyManager()
