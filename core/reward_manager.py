"""
–ú–æ–¥—É–ª—å: –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≥—Ä–∞–¥ PLEX Dynamic Staking
–û–ø–∏—Å–∞–Ω–∏–µ: –†–∞—Å—á–µ—Ç –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from decimal import Decimal
from dataclasses import dataclass
import json

from config.constants import TOKEN_DECIMALS, TOKEN_TOTAL_SUPPLY
from utils.logger import get_logger
from utils.converters import format_number, token_to_wei
from core.participant_analyzer_v2 import ParticipantData

logger = get_logger("PLEX_RewardManager")

@dataclass
class RewardDistribution:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥"""
    participant_address: str
    category: str
    reward_tier: str
    base_reward: Decimal
    bonus_multiplier: float
    final_reward: Decimal
    eligibility_score: float
    distribution_date: datetime
    notes: str = ""

@dataclass
class RewardPool:
    """–ü—É–ª –Ω–∞–≥—Ä–∞–¥"""
    total_amount: Decimal
    period_start: datetime
    period_end: datetime
    tier_allocations: Dict[str, Decimal]
    category_bonuses: Dict[str, float]
    distributed_amount: Decimal = Decimal('0')
    remaining_amount: Decimal = Decimal('0')

class RewardManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥"""
        self.distributions: List[RewardDistribution] = []
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≥—Ä–∞–¥ (–∏–∑ –¢–ó)
        self.reward_tiers = {
            "Platinum": {
                "base_amount": Decimal('10000'),  # PLEX
                "min_score": 0.8,
                "allocation_percent": 40  # 40% –æ—Ç –æ–±—â–µ–≥–æ –ø—É–ª–∞
            },
            "Gold": {
                "base_amount": Decimal('5000'),
                "min_score": 0.6,
                "allocation_percent": 30
            },
            "Silver": {
                "base_amount": Decimal('2000'),
                "min_score": 0.4,
                "allocation_percent": 20
            },
            "Bronze": {
                "base_amount": Decimal('500'),
                "min_score": 0.2,
                "allocation_percent": 10
            }
        }
          # –ë–æ–Ω—É—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—É–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø—É–ª–∞)
        self.category_multipliers = {
            "Whale": 1.4,
            "Active_Trader": 1.2,
            "Holder": 1.1,
            "Regular_User": 1.0,
            "Newcomer": 0.9
        }
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É–º–µ–Ω—å—à–µ–Ω—ã)
        self.activity_bonuses = {
            "consecutive_days": {
                "7_days": 1.05,
                "14_days": 1.1,
                "30_days": 1.15
            },
            "volume_milestones": {
                "10k": 1.05,
                "50k": 1.1,
                "100k": 1.2,
                "500k": 1.3
            }
        }
        
        logger.info("üèÜ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≥—Ä–∞–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_reward_pool(self, 
                          total_amount: Decimal,
                          period_start: datetime,
                          period_end: datetime) -> RewardPool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–∞–≥—Ä–∞–¥ –Ω–∞ –ø–µ—Ä–∏–æ–¥
        
        Args:
            total_amount: –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥ –≤ PLEX
            period_start: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            period_end: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            RewardPool: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—É–ª –Ω–∞–≥—Ä–∞–¥
        """
        logger.info(f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–∞–≥—Ä–∞–¥: {format_number(total_amount)} PLEX")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
        tier_allocations = {}
        for tier, config in self.reward_tiers.items():
            allocation = total_amount * Decimal(config["allocation_percent"] / 100)
            tier_allocations[tier] = allocation
            logger.info(f"   {tier}: {format_number(allocation)} PLEX ({config['allocation_percent']}%)")
        
        pool = RewardPool(
            total_amount=total_amount,
            period_start=period_start,
            period_end=period_end,
            tier_allocations=tier_allocations,
            category_bonuses=self.category_multipliers.copy(),
            remaining_amount=total_amount
        )
        
        return pool

    def calculate_rewards(self, 
                         participants: Dict[str, ParticipantData],
                         reward_pool: RewardPool) -> List[RewardDistribution]:
        """
        –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        
        Args:
            participants: –°–ª–æ–≤–∞—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            reward_pool: –ü—É–ª –Ω–∞–≥—Ä–∞–¥
            
        Returns:
            List[RewardDistribution]: –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –Ω–∞–≥—Ä–∞–¥
        """
        logger.info(f"üí∞ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        distributions = []
        qualified_participants = [p for p in participants.values() if p.is_qualified]
        
        logger.info(f"üéØ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(qualified_participants)}")
        
        if not qualified_participants:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥")
            return distributions
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –Ω–∞–≥—Ä–∞–¥
        participants_by_tier = {}
        for participant in qualified_participants:
            tier = participant.reward_tier
            if tier != "None":
                if tier not in participants_by_tier:
                    participants_by_tier[tier] = []
                participants_by_tier[tier].append(participant)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        for tier, tier_participants in participants_by_tier.items():
            if tier not in reward_pool.tier_allocations:
                continue
                
            tier_distributions = self._calculate_tier_rewards(
                tier_participants, 
                tier, 
                reward_pool.tier_allocations[tier]
            )
            distributions.extend(tier_distributions)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        self.distributions = distributions        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ
        total_distributed = sum(d.final_reward for d in distributions)
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø—É–ª–∞ —Å —É—á–µ—Ç–æ–º –æ—à–∏–±–æ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –æ—à–∏–±–æ–∫ floating point (1e-10)
        tolerance = 1e-10
        excess = total_distributed - reward_pool.total_amount
        
        if excess > tolerance:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø—É–ª–∞! –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥: {format_number(total_distributed)} -> {format_number(reward_pool.total_amount)}")
            
            # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥
            scale_factor = reward_pool.total_amount / total_distributed
            for distribution in distributions:
                distribution.final_reward *= scale_factor
                distribution.notes += f" | Scaled by {scale_factor:.4f}"
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            total_distributed = sum(d.final_reward for d in distributions)
        elif excess > 0:
            # –ù–µ–±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–≥—Ä–∞–¥—É
            if distributions:
                distributions[-1].final_reward -= excess
                distributions[-1].notes += " | Adjusted for rounding"
                total_distributed = reward_pool.total_amount
          # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ä–∞–∑—É–º–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        total_distributed = round(total_distributed, 10)
        reward_pool.distributed_amount = total_distributed
        remaining = round(reward_pool.total_amount - total_distributed, 10)
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        reward_pool.remaining_amount = max(0.0, remaining)
        
        logger.info(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: {format_number(total_distributed)} PLEX")
        logger.info(f"üíé –û—Å—Ç–∞—Ç–æ–∫ –≤ –ø—É–ª–µ: {format_number(reward_pool.remaining_amount)} PLEX")
        
        return distributions

    def _calculate_tier_rewards(self, 
                               participants: List[ParticipantData],
                               tier: str,
                               tier_allocation: Decimal) -> List[RewardDistribution]:
        """–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if not participants:
            return []
        
        logger.info(f"üéñÔ∏è –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ —É—Ä–æ–≤–Ω—è {tier}: {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        distributions = []
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –≤–µ—Å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Ä–æ–≤–Ω—è
        total_weight = sum(self._calculate_participant_weight(p) for p in participants)
        
        if total_weight == 0:
            logger.warning(f"‚ö†Ô∏è –û–±—â–∏–π –≤–µ—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Ä–æ–≤–Ω—è {tier} —Ä–∞–≤–µ–Ω 0")
            return distributions
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–µ—Å—É
        for participant in participants:
            weight = self._calculate_participant_weight(participant)
            weight_ratio = weight / total_weight
            
            # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
            base_reward = tier_allocation * Decimal(str(weight_ratio))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            category_multiplier = self.category_multipliers.get(participant.category, 1.0)
            activity_multiplier = self._calculate_activity_multiplier(participant)
            
            total_multiplier = category_multiplier * activity_multiplier
            final_reward = base_reward * Decimal(str(total_multiplier))
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            distribution = RewardDistribution(
                participant_address=participant.address,
                category=participant.category,
                reward_tier=tier,
                base_reward=base_reward,
                bonus_multiplier=total_multiplier,
                final_reward=final_reward,
                eligibility_score=participant.eligibility_score,
                distribution_date=datetime.now(),
                notes=f"Category: {category_multiplier}x, Activity: {activity_multiplier}x"
            )
            
            distributions.append(distribution)
        
        return distributions

    def _calculate_participant_weight(self, participant: ParticipantData) -> float:
        """–†–∞—Å—á–µ—Ç –≤–µ—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥"""
        # –ë–∞–∑–æ–≤—ã–π –≤–µ—Å = eligibility score
        weight = participant.eligibility_score
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–µ—Å–∞
        
        # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)
        volume_factor = min(float(participant.total_volume_usd) / 100000, 2.0)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_factor = min(participant.unique_days_active / 30, 1.5)
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        consistency_factor = min(participant.max_consecutive_days / 14, 1.2)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Å
        final_weight = weight * (1 + volume_factor + activity_factor + consistency_factor)
        
        return max(final_weight, 0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å 0.1

    def _calculate_activity_multiplier(self, participant: ParticipantData) -> float:
        """–†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        multiplier = 1.0
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏
        consecutive_days = participant.max_consecutive_days
        if consecutive_days >= 30:
            multiplier *= self.activity_bonuses["consecutive_days"]["30_days"]
        elif consecutive_days >= 14:
            multiplier *= self.activity_bonuses["consecutive_days"]["14_days"]
        elif consecutive_days >= 7:
            multiplier *= self.activity_bonuses["consecutive_days"]["7_days"]
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
        volume_usd = float(participant.total_volume_usd)
        if volume_usd >= 500000:
            multiplier *= self.activity_bonuses["volume_milestones"]["500k"]
        elif volume_usd >= 100000:
            multiplier *= self.activity_bonuses["volume_milestones"]["100k"]
        elif volume_usd >= 50000:
            multiplier *= self.activity_bonuses["volume_milestones"]["50k"]
        elif volume_usd >= 10000:
            multiplier *= self.activity_bonuses["volume_milestones"]["10k"]
        
        return multiplier

    def get_reward_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –Ω–∞–≥—Ä–∞–¥–∞–º"""
        if not self.distributions:
            return {}
        
        summary = {
            "total_recipients": len(self.distributions),
            "total_rewards": sum(d.final_reward for d in self.distributions),
            "by_tier": {},
            "by_category": {},
            "top_recipients": [],
            "statistics": {}
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        for distribution in self.distributions:
            tier = distribution.reward_tier
            if tier not in summary["by_tier"]:
                summary["by_tier"][tier] = {
                    "count": 0,
                    "total_amount": Decimal('0'),
                    "avg_amount": Decimal('0')
                }
            
            summary["by_tier"][tier]["count"] += 1
            summary["by_tier"][tier]["total_amount"] += distribution.final_reward
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for tier_data in summary["by_tier"].values():
            if tier_data["count"] > 0:
                tier_data["avg_amount"] = tier_data["total_amount"] / tier_data["count"]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for distribution in self.distributions:
            category = distribution.category
            if category not in summary["by_category"]:
                summary["by_category"][category] = {
                    "count": 0,
                    "total_amount": Decimal('0')
                }
            
            summary["by_category"][category]["count"] += 1
            summary["by_category"][category]["total_amount"] += distribution.final_reward
        
        # –¢–æ–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        top_recipients = sorted(self.distributions, 
                              key=lambda x: x.final_reward, 
                              reverse=True)[:10]
        
        summary["top_recipients"] = [
            {
                "address": d.participant_address,
                "category": d.category,
                "tier": d.reward_tier,
                "reward": str(d.final_reward),
                "score": d.eligibility_score
            }
            for d in top_recipients
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        rewards = [float(d.final_reward) for d in self.distributions]
        summary["statistics"] = {
            "min_reward": min(rewards),
            "max_reward": max(rewards),
            "avg_reward": sum(rewards) / len(rewards),
            "median_reward": sorted(rewards)[len(rewards) // 2]
        }
        
        return summary

    def export_distributions(self, filepath: str, format: str = "json"):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –Ω–∞–≥—Ä–∞–¥"""
        try:
            if format.lower() == "json":
                export_data = {
                    "export_timestamp": datetime.now().isoformat(),
                    "total_distributions": len(self.distributions),
                    "summary": self.get_reward_summary(),
                    "distributions": [
                        {
                            "address": d.participant_address,
                            "category": d.category,
                            "reward_tier": d.reward_tier,
                            "base_reward": str(d.base_reward),
                            "bonus_multiplier": d.bonus_multiplier,
                            "final_reward": str(d.final_reward),
                            "eligibility_score": d.eligibility_score,
                            "distribution_date": d.distribution_date.isoformat(),
                            "notes": d.notes
                        }
                        for d in self.distributions
                    ]
                }
                
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, indent=2, ensure_ascii=False, default=str)
                
                logger.info(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            return False

    def validate_distributions(self) -> Dict[str, any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –Ω–∞–≥—Ä–∞–¥"""
        validation_results = {
            "is_valid": True,
            "total_recipients": len(self.distributions),
            "total_amount": sum(d.final_reward for d in self.distributions),
            "issues": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
        addresses = [d.participant_address for d in self.distributions]
        if len(addresses) != len(set(addresses)):
            validation_results["is_valid"] = False
            validation_results["issues"].append("–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞–¥—Ä–µ—Å–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–ª–µ–≤—ã—Ö –Ω–∞–≥—Ä–∞–¥
        zero_rewards = [d for d in self.distributions if d.final_reward <= 0]
        if zero_rewards:
            validation_results["is_valid"] = False
            validation_results["issues"].append(f"–ù–∞–π–¥–µ–Ω–æ {len(zero_rewards)} –Ω–∞–≥—Ä–∞–¥ —Å –Ω—É–ª–µ–≤–æ–π —Å—É–º–º–æ–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        max_single_reward = max(d.final_reward for d in self.distributions) if self.distributions else 0
        if max_single_reward > TOKEN_TOTAL_SUPPLY * Decimal('0.01'):  # 1% –æ—Ç –æ–±—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            validation_results["is_valid"] = False
            validation_results["issues"].append("–ù–∞–π–¥–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –ø—Ä–µ–≤—ã—à–∞—é—â–∞—è 1% –æ—Ç –æ–±—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        
        return validation_results
