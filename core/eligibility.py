"""
–ú–æ–¥—É–ª—å: –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã PLEX Dynamic Staking
–û–ø–∏—Å–∞–Ω–∏–µ: –†–∞—Å—á–µ—Ç eligibility, —Ç–∏—Ä–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–∞–≥—Ä–∞–¥
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

from typing import Dict, List, Optional, Tuple
from decimal import Decimal
from datetime import datetime, timedelta
from enum import Enum

from config.constants import TOKEN_DECIMALS, CORP_WALLET_ADDRESS
from utils.logger import get_logger
from utils.converters import wei_to_token

logger = get_logger("PLEX_EligibilityEngine")


class EligibilityTier(Enum):
    """–¢–∏—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥"""
    BRONZE = "bronze"      # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    SILVER = "silver"      # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å  
    GOLD = "gold"          # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
    PLATINUM = "platinum"  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    INELIGIBLE = "ineligible"  # –ù–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω


class EligibilityEngine:
    """–î–≤–∏–∂–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã eligibility"""
        self.logger = logger
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ eligibility (–∏–∑ –¢–ó)
        self.min_balance_plex = Decimal('100')  # –ú–∏–Ω–∏–º—É–º 100 PLEX
        self.min_total_sent = Decimal('500')    # –ú–∏–Ω–∏–º—É–º $500 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–ø. –∫–æ—à–µ–ª–µ–∫
        self.min_swaps = 3                      # –ú–∏–Ω–∏–º—É–º 3 swap –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.min_unique_days = 2                # –ú–∏–Ω–∏–º—É–º 2 –¥–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.max_days_inactive = 7              # –ú–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        # –¢–∏—Ä—ã –∏ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã
        self.tier_criteria = {
            EligibilityTier.PLATINUM: {
                'min_sent_usd': Decimal('10000'),
                'min_swaps': 50,
                'min_days': 20,
                'reward_multiplier': Decimal('2.0'),
                'max_reward_usd': Decimal('1000')
            },
            EligibilityTier.GOLD: {
                'min_sent_usd': Decimal('5000'),
                'min_swaps': 25,
                'min_days': 15,
                'reward_multiplier': Decimal('1.5'),
                'max_reward_usd': Decimal('500')
            },
            EligibilityTier.SILVER: {
                'min_sent_usd': Decimal('1000'),
                'min_swaps': 10,
                'min_days': 7,
                'reward_multiplier': Decimal('1.2'),
                'max_reward_usd': Decimal('200')
            },
            EligibilityTier.BRONZE: {
                'min_sent_usd': Decimal('500'),
                'min_swaps': 3,
                'min_days': 2,
                'reward_multiplier': Decimal('1.0'),
                'max_reward_usd': Decimal('100')
            }
        }
        
        logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ eligibility –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.min_balance_plex} PLEX")
        logger.info(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: ${self.min_total_sent}")

    def calculate_eligibility(self, 
                            address: str,
                            current_balance: Decimal,
                            total_sent_to_corp: Decimal,
                            swaps_data: List[Dict],
                            category_result: Dict) -> Dict:
        """
        –†–∞—Å—á–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞
        
        Args:
            address: –ê–¥—Ä–µ—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            current_balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å PLEX
            total_sent_to_corp: –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–ø. –∫–æ—à–µ–ª–µ–∫ (USD)
            swaps_data: –î–∞–Ω–Ω—ã–µ swap –æ–ø–µ—Ä–∞—Ü–∏–π
            category_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç eligibility
        """
        logger.debug(f"üéØ –†–∞—Å—á–µ—Ç eligibility –¥–ª—è {address}")
        
        try:
            # 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            base_checks = self._perform_base_checks(
                address, current_balance, total_sent_to_corp, swaps_data
            )
            
            if not base_checks['eligible']:
                return self._create_eligibility_result(
                    tier=EligibilityTier.INELIGIBLE,
                    eligible=False,
                    reason=base_checks['reason'],
                    details=base_checks
                )
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = category_result.get('category')
            if category == 'sold_token':
                return self._create_eligibility_result(
                    tier=EligibilityTier.INELIGIBLE,
                    eligible=False,
                    reason="–£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–¥–∞–≤–∞–ª —Ç–æ–∫–µ–Ω—ã - –Ω–∞–≥—Ä–∞–¥—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",
                    details={'blocking_category': category}
                )
            
            # 3. –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = self._calculate_metrics(swaps_data, total_sent_to_corp)
            
            # 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏—Ä–∞
            tier = self._determine_tier(metrics)
            
            # 5. –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
            reward_calculation = self._calculate_reward(tier, metrics, total_sent_to_corp)
            
            # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–º–Ω–∏—Å—Ç–∏–∏
            amnesty_needed = category in ['missed_purchase', 'transferred']
            amnesty_eligible = category_result.get('amnesty_eligible', False)
            
            final_eligible = base_checks['eligible'] and (not amnesty_needed or amnesty_eligible)
            
            return self._create_eligibility_result(
                tier=tier,
                eligible=final_eligible,
                reason=self._generate_eligibility_reason(tier, final_eligible, amnesty_needed),
                details={
                    **base_checks,
                    **metrics,
                    **reward_calculation,
                    'amnesty_needed': amnesty_needed,
                    'amnesty_eligible': amnesty_eligible,
                    'category': category
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ eligibility –¥–ª—è {address}: {e}")
            return self._create_eligibility_result(
                tier=EligibilityTier.INELIGIBLE,
                eligible=False,
                reason=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}",
                details={'error': str(e)}
            )

    def _perform_base_checks(self, 
                           address: str,
                           balance: Decimal,
                           total_sent: Decimal,
                           swaps: List[Dict]) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ eligibility"""
        
        checks = {
            'balance_check': balance >= self.min_balance_plex,
            'sent_check': total_sent >= self.min_total_sent,
            'swaps_check': len(swaps) >= self.min_swaps,
            'activity_check': True  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        }
        
        failed_checks = [k for k, v in checks.items() if not v]
        
        if failed_checks:
            reason = f"–ù–µ –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏: {', '.join(failed_checks)}"
            details = f"–ë–∞–ª–∞–Ω—Å: {balance} PLEX (–Ω—É–∂–Ω–æ {self.min_balance_plex}), "
            details += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${total_sent} (–Ω—É–∂–Ω–æ ${self.min_total_sent}), "
            details += f"Swaps: {len(swaps)} (–Ω—É–∂–Ω–æ {self.min_swaps})"
            
            return {
                'eligible': False,
                'reason': reason,
                'details': details,
                **checks,
                'balance': balance,
                'total_sent': total_sent,
                'swaps_count': len(swaps)
            }
        
        return {
            'eligible': True,
            'reason': "–í—Å–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã",
            **checks,
            'balance': balance,
            'total_sent': total_sent,
            'swaps_count': len(swaps)
        }

    def _calculate_metrics(self, swaps: List[Dict], total_sent: Decimal) -> Dict:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        
        total_volume = sum(Decimal(str(swap.get('usd_value', 0))) for swap in swaps)
        unique_days = len(set(swap.get('date', datetime.now().date()) for swap in swaps))
        avg_swap_size = total_volume / len(swaps) if swaps else Decimal('0')
        
        return {
            'total_volume_usd': total_volume,
            'unique_days_active': unique_days,
            'avg_swap_size_usd': avg_swap_size,
            'total_sent_usd': total_sent,
            'contribution_score': self._calculate_contribution_score(total_sent, total_volume)
        }

    def _calculate_contribution_score(self, sent: Decimal, volume: Decimal) -> Decimal:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –≤–∫–ª–∞–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        # –§–æ—Ä–º—É–ª–∞: 70% –≤–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ + 30% –≤–µ—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–±—ä–µ–º–∞
        sent_score = sent / Decimal('1000')  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ 1000 USD
        volume_score = volume / Decimal('5000')  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ 5000 USD
        
        return (sent_score * Decimal('0.7')) + (volume_score * Decimal('0.3'))

    def _determine_tier(self, metrics: Dict) -> EligibilityTier:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        
        sent_usd = metrics['total_sent_usd']
        swaps_count = metrics.get('swaps_count', 0)
        days_active = metrics['unique_days_active']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ä—ã –æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É
        for tier, criteria in self.tier_criteria.items():
            if (sent_usd >= criteria['min_sent_usd'] and
                swaps_count >= criteria['min_swaps'] and
                days_active >= criteria['min_days']):
                return tier
        
        return EligibilityTier.INELIGIBLE

    def _calculate_reward(self, tier: EligibilityTier, metrics: Dict, total_sent: Decimal) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã"""
        
        if tier == EligibilityTier.INELIGIBLE:
            return {
                'base_reward_usd': Decimal('0'),
                'multiplier': Decimal('0'),
                'final_reward_usd': Decimal('0'),
                'max_reward_usd': Decimal('0')
            }
        
        criteria = self.tier_criteria[tier]
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ = 0.5% –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã
        base_reward = total_sent * Decimal('0.005')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä —Ç–∏—Ä–∞
        multiplied_reward = base_reward * criteria['reward_multiplier']
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º —Ç–∏—Ä–∞
        final_reward = min(multiplied_reward, criteria['max_reward_usd'])
        
        return {
            'base_reward_usd': base_reward,
            'multiplier': criteria['reward_multiplier'],
            'final_reward_usd': final_reward,
            'max_reward_usd': criteria['max_reward_usd'],
            'tier_name': tier.value
        }

    def _generate_eligibility_reason(self, tier: EligibilityTier, eligible: bool, amnesty_needed: bool) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏—á–∏–Ω—ã eligibility"""
        
        if not eligible:
            if amnesty_needed:
                return f"–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–º–Ω–∏—Å—Ç–∏—è –¥–ª—è —Ç–∏—Ä–∞ {tier.value}"
            else:
                return f"–ù–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏—Ä–∞ {tier.value}"
        
        return f"–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏—Ä–∞ {tier.value}"

    def _create_eligibility_result(self, 
                                 tier: EligibilityTier,
                                 eligible: bool,
                                 reason: str,
                                 details: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ eligibility"""
        
        return {
            'tier': tier.value,
            'tier_name': tier.name,
            'eligible': eligible,
            'reason': reason,
            'timestamp': datetime.now().isoformat(),
            'details': details
        }

    def generate_eligibility_report(self, eligibility_results: Dict[str, Dict]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ eligibility"""
        
        report = {
            'total_addresses': len(eligibility_results),
            'eligible_count': 0,
            'tiers': {},
            'total_rewards_usd': Decimal('0'),
            'statistics': {}
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏—Ä–∞–º
        for address, result in eligibility_results.items():
            tier = result['tier']
            eligible = result['eligible']
            
            if tier not in report['tiers']:
                report['tiers'][tier] = {
                    'count': 0,
                    'eligible_count': 0,
                    'total_rewards': Decimal('0'),
                    'addresses': []
                }
            
            report['tiers'][tier]['count'] += 1
            report['tiers'][tier]['addresses'].append(address)
            
            if eligible:
                report['eligible_count'] += 1
                report['tiers'][tier]['eligible_count'] += 1
                
                reward = Decimal(str(result['details'].get('final_reward_usd', 0)))
                report['tiers'][tier]['total_rewards'] += reward
                report['total_rewards_usd'] += reward
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = report['total_addresses']
        report['statistics'] = {
            'eligibility_rate': report['eligible_count'] / total * 100 if total > 0 else 0,
            'avg_reward_usd': report['total_rewards_usd'] / report['eligible_count'] if report['eligible_count'] > 0 else Decimal('0'),
            'tier_distribution': {
                tier: data['count'] / total * 100 if total > 0 else 0
                for tier, data in report['tiers'].items()
            }
        }
        
        logger.info(f"üéØ –û—Ç—á–µ—Ç –ø–æ eligibility —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"   üë• –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {total}")
        logger.info(f"   ‚úÖ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {report['eligible_count']} ({report['statistics']['eligibility_rate']:.1f}%)")
        logger.info(f"   üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥: ${report['total_rewards_usd']}")
        logger.info(f"   üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: ${report['statistics']['avg_reward_usd']}")
        
        return report


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
eligibility_engine = EligibilityEngine()
