Вот полный, исчерпывающий и структурированный ТЗ на продукт **PLEX Dynamic Staking Manager** на основе всех предоставленных файлов проекта, с учетом философии "Zero Ambiguity" и требований к разработке для Copilot/VS Code Pro, включая все ограничения, рекомендации по архитектуре, строгие запреты на mock-объекты, реалии блокчейн-экосистемы, бизнес-логику и UI/UX.
ТЗ оформлено в формате, который сразу подходит для передачи в Copilot, команду разработки или внешнему подрядчику.

---

# PLEX Dynamic Staking Manager — Техническое задание

## Краткое описание продукта

Приложение для анализа и награждения участников программы динамического стейкинга токена PLEX ONE в сети Binance Smart Chain (BSC). Продукт осуществляет автоматизированный сбор, обработку и анализ всех покупок, продаж и переводов токена PLEX в пуле PancakeSwap, категоризацию участников, контроль условий для начисления наград, логирование, историю действий и максимально прозрачную работу с реальными данными блокчейна BSC через QuickNode.

---

## 1. Архитектура и модули

### 1.1 Общая структура проекта

```
/core           — бизнес-логика, ядро стейкинга, расчет наград, фильтрация
/db             — работа с БД и кэшем, история, резервные копии, экспорт
/blockchain     — слой взаимодействия с QuickNode/BSC, API-клиенты
/api            — все эндпоинты и интерфейсы внешних взаимодействий (если есть)
/ui             — интерфейс на Python GUI (например, CustomTkinter)
  /themes       — темная тема, стили, иконки
/logs           — логи действий, ошибок, операций
/utils          — утилиты, валидаторы, конвертеры
/config         — конфиги (адреса, ABI, лимиты, параметры)
/tests          — только реальные данные, тесты на production (никаких mock)
README.md       — описание продукта и инструкции
```

### 1.2 Главные модули и их ответственность

* **core/rewards.py** — расчет наград, категоризация участников, амнистии
* **core/eligibility.py** — алгоритмы проверки условий по всем категориям
* **db/manager.py** — основной менеджер работы с БД (локальный SQLite/PostgreSQL)
* **db/history.py** — модуль хранения истории действий и всех запросов
* **blockchain/web3\_manager.py** — клиент для работы с QuickNode (HTTP/WSS)
* **blockchain/swap\_analyzer.py** — обработка и агрегация swap-логов
* **ui/main.py** — основной GUI (CustomTkinter), темная тема
* **ui/log\_viewer.py** — окно для логирования и истории действий
* **utils/cache.py** — кэширование событий и оптимизация запросов
* **config/addresses.py** — константы, адреса токенов, пулов, ABI
* **config/settings.py** — параметры сети, лимиты, режимы газа

---

## 2. Ключевая бизнес-логика

### 2.1 Категоризация участников

* **Категория 1 (идеальные):** ежедневно совершали покупку PLEX на PancakeSwap на сумму \$2.8–3.2 USDT, не пропустили ни дня, не продавали токен.
* **Категория 2 (пропуски):** хотя бы 1 пропуск покупки в период. Возможность ручной амнистии.
* **Категория 3 (продажи):** любые продажи — полный бан на награду, амнистии нет.
* **Категория 4 (переводы):** участники, которые переводили PLEX на другие адреса. Не блокируется, но отмечается в отчёте.

### 2.2 Логика анализа

* Оператор выбирает период анализа (N дней или весь срок).
* Система собирает **все swap-события** PancakeSwap по пулу USDT/PLEX за период (только реальные данные, только Mainnet).
* Внутри приложения фильтруются события: покупка, продажа, перевод.
* По каждому адресу формируется полный хронологический отчет, выделяются все нарушения, допускается ручная амнистия для категорий 2 и 4.
* Автоматический расчет расходов на газ, статусов отправки транзакций, обработка ошибок.

---

## 3. Взаимодействие с блокчейном

* Только **реальные запросы** к QuickNode (HTTP/WSS), запрещены любые mock-объекты, симуляции, тестовые данные, sandbox и др. Использование только production-ключей и только mainnet BSC.
* Система обязана поддерживать **batch-запросы** к событиям swap и Transfer, максимальная агрегация внутри приложения.
* Вся обработка swap-логов строится на пакетировании (запрос по пулу за сутки/неделю), агрегация внутри локального слоя.
* Использовать только проверенные адреса токена и пула:

  * PLEX ONE: `0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1`
  * USDT: `0x55d398326f99059fF775485246999027B3197955`
  * Пул: `0x41d9650faf3341cbf8947fd8063a1fc88dbf1889`
* Вся обработка больших массивов строится на оптимизации запросов, локальном кэшировании, адаптивном rate-limit, и batch-обработке.

---

## 4. Логирование и история

* В каждом окне приложения доступен **живой лог** действий: каждый запрос к ноде, попытка отправки транзакции, ошибки, изменения режима газа, амнистии, ручные действия и т.д.
* Лог обновляется в реальном времени, с возможностью фильтрации по типу события, адресу, периоду, статусу.
* **История всех действий и запросов** автоматически сохраняется в отдельный журнал, доступный из интерфейса, с экспортом в CSV/XLSX для аудита.
* Поддержка резервного копирования истории, опция восстановления через встроенный мастер.

---

## 5. Защита, безопасность, UX/UI

* Кошелек системы подключается только локально (сид-фраза/приватный ключ никогда не покидает машину).
* Вся обработка и расчеты — только на стороне оператора, никакой передачи приватных данных.
* Интерфейс в тёмной теме, на основе палитры ChatGPT: глубокий графитовый фон, зеленые/бирюзовые акценты, крупные кнопки, адаптивный шрифт без засечек, продуманная контрастность, информативные иконки.
* Вся лента событий и истории — с прокруткой, поиском и фильтрацией.
* Встроенная документация, подсказки и быстрые инструкции прямо в интерфейсе.

---

## 6. Строгие ограничения и табу

* **Категорически запрещено:**

  * Использование любых mock-объектов, симуляций, sandbox, демо-режимов, фейковых адресов, тестовых данных — только реальные данные блокчейна, только Mainnet.
  * Любые попытки тестирования на нереальных данных — немедленный стоп проекта.
  * Любые ручные обходы (DEBUG, DEMO\_MODE, условные ветки) — исключены.
* Все unit-тесты (если требуются) — только с реальными Mainnet-данными.

---

## 7. Проверки качества и контроль

* После каждого этапа — обязательный **checkpoint**:

  * Проверка соответствия всех функций реальным данным BSC.
  * Проверка корректности логирования и полноты истории.
  * Проверка UX: удобство поиска, фильтрации, быстродействия.
  * Проверка безопасности: приватные ключи нигде не сохраняются, не покидают машину.
  * Проверка резервного копирования: история и база восстанавливается полностью.

---

## 8. Примеры интерфейса и функциональности

* Ссылки на интерфейсы блокчейна:

  * [График и аналитика GeckoTerminal](https://www.geckoterminal.com/ru/bsc/pools/0x41d9650faf3341cbf8947fd8063a1fc88dbf1889)
  * [Покупка PLEX ONE на PancakeSwap](https://pancakeswap.finance/swap?outputCurrency=0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1&inputCurrency=0x55d398326f99059fF775485246999027B3197955)
  * [Код контракта на BSCScan](https://bscscan.com/address/0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1#code)
* В интерфейсе — иконки, прогресс-бары, фильтры, живой лог операций, возможность экспорта в CSV/XLSX, настройка резервных копий.

---

## 9. Готовые шаблоны для Copilot

* Примеры эффективных промптов, которые должны использоваться для генерации модулей:

  ```
  Create a Python class for collecting PLEX token transfers on BSC:
  - Use Web3.py with QuickNode endpoint
  - Get Transfer events with proper topic filtering
  - Chunk requests by 1000 blocks to avoid payload limits
  - Handle rate limiting with exponential backoff
  - Save results to PostgreSQL with SQLAlchemy
  - NO mock data, only real blockchain queries
  ```

  ```
  Implement eligibility calculation for staking rewards:
  - Input: user address, total sent to corp wallet, snapshot balance
  - Calculate percentage of contribution
  - Apply tiered reward system (1-5%, 6-10%, etc)
  - Consider minimum threshold of 100 PLEX
  - Return detailed breakdown with all calculations
  ```
* Всегда требовать **production-ready code without mocks**.

---

## 10. Приоритеты и контроль

1. **Функциональность (приоритет №1):** сбор и анализ всех swap-событий за период.
2. **Безопасность (приоритет №2):** приватные ключи всегда локально.
3. **Производительность (приоритет №3):** оптимизация запросов, кэширование, минимизация расходов на газ и API.

---

## 11. Граничные условия и edge-cases

* Потеря связи с нодой → повторная попытка, логирование ошибки, предупреждение оператору.
* Превышение лимита API → снижение параллелизма, уменьшение batch, задержка и очередь.
* Критические ошибки (например, отказ блокчейна) — STOP, детальный лог, ручное подтверждение действий перед продолжением.

---

## 12. Чеклист финальной проверки

* [ ] Работает на 100% реальных данных mainnet BSC
* [ ] Живой лог операций и история действий корректно ведутся и доступны из интерфейса
* [ ] Интерфейс полностью на тёмной теме, крупные элементы, удобные фильтры
* [ ] Все экспортируемые данные соответствуют бизнес-логике
* [ ] Реализовано резервное копирование и восстановление истории
* [ ] Любые нарушения (mock, фейк, симуляция) — немедленный STOP

---

## 13. Роль исполнителя

**Разработчик (или команда):**

* Глубоко понимает Web3, Python, работу с QuickNode, mainnet BSC, GUI-фреймворки.
* Следует философии "Zero Ambiguity" и методологии универсального ТЗ.
* Принимает решения только на основании четко прописанных правил, без интерпретаций и "на глаз".
* Полностью документирует логику, каждое исключение/edge-case покрыто, каждый модуль снабжен README и автотестом на production-данных.

---

## 14. Приложения и ресурсы

* Адрес QuickNode:

  * HTTP: `https://old-patient-butterfly.bsc.quiknode.pro/4f77305d4e6f7ce51cace16a02b88659c7ec249d/`
  * WSS: `wss://old-patient-butterfly.bsc.quiknode.pro/4f77305d4e6f7ce51cace16a02b88659c7ec249d/`

* Адрес токена:

  * `0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1`

* Адрес пула:

  * `0x41d9650faf3341cbf8947fd8063a1fc88dbf1889`

---

## 15. Финальный формат сдачи

1. **Весь исходный код, 100% production-ready, ни одной заглушки или mock.**
2. **README.md с пошаговой инструкцией по запуску, настройке и обновлению.**
3. **Структурированные тесты с реальными данными mainnet.**
4. **Полная документация модулей, все параметры и константы вынесены в отдельные файлы.**
5. **Скрипт резервного копирования/восстановления истории.**

---

