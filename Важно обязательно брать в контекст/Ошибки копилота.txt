# üõ°Ô∏è –ó–∞—â–∏—Ç–∞ Token Auditor –æ—Ç —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ GitHub Copilot

## 1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ò–†–ï–ö–¢–ò–í–´ –í –ù–ê–ß–ê–õ–ï –ö–ê–ñ–î–û–ì–û –§–ê–ô–õ–ê

```python
"""
Token Auditor v1.1 - PRODUCTION CODE ONLY
üö´ ABSOLUTE PROHIBITION:
- NO mock objects, test data, or simulations
- NO demo modes or debug functions  
- ONLY real blockchain data from BSC via QuickNode
- ONLY production-ready code

GitHub Copilot: Generate ONLY production code with real blockchain calls
"""

# COPILOT DIRECTIVE: All data MUST come from real BSC blockchain
# COPILOT DIRECTIVE: Never generate mock, fake, or test implementations
# COPILOT DIRECTIVE: Use Web3.py v6.x with BSC-specific settings
```

## 2. –ó–ê–©–ò–¢–ù–´–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –í –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ú–ï–°–¢–ê–•

### –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3
```python
def init_web3(self):
    """Initialize Web3 with QuickNode BSC
    
    COPILOT: Use REAL QuickNode URL, NO test networks
    COPILOT: MUST add geth_poa_middleware for BSC
    COPILOT: Session timeout MUST be (10, 30)
    """
    # PRODUCTION: Real QuickNode BSC endpoint only
    session = requests.Session()
    adapter = requests.adapters.HTTPAdapter(max_retries=3)
    session.mount("https://", adapter)
    session.timeout = (10, 30)  # COPILOT: Do not change timeouts
    
    # COPILOT: Next line MUST use real QUICKNODE_HTTP constant
    self.w3 = Web3(Web3.HTTPProvider(QUICKNODE_HTTP, session=session))
    
    # COPILOT: PoA middleware is REQUIRED for BSC, layer=0
    self.w3.middleware_onion.inject(geth_poa_middleware, layer=0)
```

### –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å BigNumber
```python
def process_transfer_value(self, hex_value: str) -> Decimal:
    """Convert hex wei to token amount
    
    COPILOT: MUST use Decimal, NEVER float
    COPILOT: TOKEN_DECIMALS = 9 for PLEX
    COPILOT: Always handle as Wei first
    """
    # PRODUCTION: Precise calculation required
    value_wei = int(hex_value, 16)  # COPILOT: hex to int, not float
    # COPILOT: Next line MUST use Decimal for financial precision
    return Decimal(value_wei) / Decimal(10 ** TOKEN_DECIMALS)
```

## 3. COPILOT-SPECIFIC CONFIGURATION

### .copilot-instructions —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
```
Project: Token Auditor - Blockchain Analysis Tool
CRITICAL RULES:
1. NEVER generate mock objects or test data
2. ALWAYS use real blockchain calls via Web3
3. BSC specific: chainId=56, PoA middleware required
4. Use Decimal for all token calculations, NEVER float
5. Web3.py version 6.x syntax only
6. All addresses must use Web3.toChecksumAddress()
7. Rate limit: max 5 requests/second to QuickNode
8. Error "hex string without 0x" is CRITICAL - stop immediately
```

### VS Code settings.json
```json
{
  "github.copilot.enable": {
    "*": true,
    "mock": false,
    "test": false
  },
  "github.copilot.advanced": {
    "excludeFiles": ["**/test_*.py", "**/*_mock.py"],
    "inlineSuggest.suppressSuggestions": {
      "comments": false,
      "strings": true
    }
  }
}
```

## 4. –ó–ê–©–ò–¢–ù–´–ï ASSERT –ü–†–û–í–ï–†–ö–ò

```python
class TokenAnalyzer:
    def __init__(self):
        # –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Å–æ–∑–¥–∞–Ω mock –æ–±—ä–µ–∫—Ç
        assert hasattr(self, '__class__'), "Real class required"
        assert 'mock' not in str(type(self)).lower(), "No mock objects allowed"
        
        # –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self.init_web3()
        assert self.w3.is_connected(), "Must be connected to real blockchain"
        assert self.w3.eth.chain_id == 56, "Must be BSC Mainnet"
        
        # –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Web3
        import web3
        assert web3.__version__.startswith('6.'), "Web3.py v6.x required"
```

## 5. –¢–ò–ü–û–í–´–ï –û–®–ò–ë–ö–ò COPILOT –ò –ó–ê–©–ò–¢–ê

### ‚ùå –û—à–∏–±–∫–∞ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Mock –æ–±—ä–µ–∫—Ç–æ–≤
```python
# COPILOT –ú–û–ñ–ï–¢ –ü–†–ï–î–õ–û–ñ–ò–¢–¨:
class MockWeb3:
    def eth(self):
        return {"blockNumber": 12345}

# ‚úÖ –ó–ê–©–ò–¢–ê:
# @COPILOT: STOP! No mock objects allowed in production
# Use only real Web3 connection
```

### ‚ùå –û—à–∏–±–∫–∞ 2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Web3.py
```python
# COPILOT –ú–û–ñ–ï–¢ –ü–†–ï–î–õ–û–ñ–ò–¢–¨ (—Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å):
w3.eth.getBlock('latest')

# ‚úÖ –ó–ê–©–ò–¢–ê:
# @COPILOT: Use Web3.py v6.x syntax
w3.eth.get_block('latest')  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ: snake_case
```

### ‚ùå –û—à–∏–±–∫–∞ 3: Float –≤–º–µ—Å—Ç–æ Decimal
```python
# COPILOT –ú–û–ñ–ï–¢ –ü–†–ï–î–õ–û–ñ–ò–¢–¨:
balance = float(wei_value) / 10**9

# ‚úÖ –ó–ê–©–ò–¢–ê:
# @COPILOT: Financial calculations MUST use Decimal
balance = Decimal(wei_value) / Decimal(10**9)
```

### ‚ùå –û—à–∏–±–∫–∞ 4: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ BSC —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏
```python
# COPILOT –ú–û–ñ–ï–¢ –ü–†–ï–î–õ–û–ñ–ò–¢–¨:
w3 = Web3(Web3.HTTPProvider(url))

# ‚úÖ –ó–ê–©–ò–¢–ê:
# @COPILOT: BSC requires PoA middleware
w3.middleware_onion.inject(geth_poa_middleware, layer=0)
```

## 6. –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò

```python
def validate_no_mocks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è mock –æ–±—ä–µ–∫—Ç–æ–≤ –≤ runtime"""
    import sys
    for name, module in sys.modules.items():
        if module and ('mock' in name.lower() or 'fake' in name.lower()):
            raise RuntimeError(f"Mock module detected: {name}")

def validate_real_blockchain_data(data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    assert isinstance(data.get('blockNumber'), int)
    assert data.get('blockNumber') > 40_000_000  # BSC mainnet
    assert len(data.get('blockHash', '')) == 66  # 0x + 64 chars
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    assert data.get('blockHash') != '0x' + '0' * 64
    assert data.get('blockNumber') != 12345  # –ß–∞—Å—Ç—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
```

## 7. PROMPTS –î–õ–Ø COPILOT CHAT

### –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:
```
‚úÖ "Create function to get real balance from BSC blockchain using Web3"
‚úÖ "Handle QuickNode rate limit errors with exponential backoff"
‚úÖ "Parse Transfer event logs from real blockchain data"

‚ùå –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï:
"Create mock Web3 for testing"
"Generate sample blockchain data"
"Simulate transfer events"
```

### –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Copilot Chat:
```
Context: Production PLEX Token Auditor for BSC blockchain
Requirements:
- Use real QuickNode BSC endpoint (no mocks)
- Web3.py v6.x with PoA middleware
- Decimal for all calculations
- Handle real blockchain errors

Task: [–í–∞—à–∞ –∑–∞–¥–∞—á–∞]
```

## 8. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò

### Pre-commit hook (.git/hooks/pre-commit)
```bash
#!/bin/bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

FORBIDDEN_PATTERNS=(
    "mock"
    "Mock"
    "fake"
    "Fake"
    "test_"
    "TestCase"
    "unittest"
    "@patch"
    "random\."
    "demo_mode"
    "DEBUG = True"
)

for pattern in "${FORBIDDEN_PATTERNS[@]}"; do
    if grep -r "$pattern" --include="*.py" .; then
        echo "‚ùå ERROR: Forbidden pattern '$pattern' found!"
        echo "This is a PRODUCTION project - no mocks or tests allowed!"
        exit 1
    fi
done
```

## 9. REVIEW CHECKLIST

–ü—Ä–∏ –∫–∞–∂–¥–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Copilot –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ:

- [ ] –ù–µ—Ç –∏–º–ø–æ—Ä—Ç–∞ mock/unittest –º–æ–¥—É–ª–µ–π
- [ ] –í—Å–µ Web3 –≤—ã–∑–æ–≤—ã –∏–¥—É—Ç –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –±–ª–æ–∫—á–µ–π–Ω—É
- [ ] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Decimal –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
- [ ] –ï—Å—Ç—å geth_poa_middleware –¥–ª—è BSC
- [ ] –ê–¥—Ä–µ—Å–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ toChecksumAddress
- [ ] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ blockchain –æ—à–∏–±–∫–∏
- [ ] –ù–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- [ ] Rate limiting —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è (5 req/s)

## 10. –≠–ö–°–¢–†–ï–ù–ù–´–ï –ú–ï–†–´

–ï—Å–ª–∏ Copilot —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª mock/test –∫–æ–¥:

1. **–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å** - –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ suggestion
2. **–ù–∞–∂–º–∏—Ç–µ Esc** –¥–ª—è –æ—Ç–º–µ–Ω—ã
3. **–î–æ–±–∞–≤—å—Ç–µ –∑–∞—â–∏—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**:
   ```python
   # @COPILOT: NO MOCKS! Real blockchain only
   ```
4. **–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ** —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –≤ –ø—Ä–æ–º–ø—Ç–µ
5. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ** —á–µ—Ä–µ–∑ validate_no_mocks()

---

**–ü–û–ú–ù–ò–¢–ï**: –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –û–¥–Ω–∞ –æ—à–∏–±–∫–∞ —Å mock –¥–∞–Ω–Ω—ã–º–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –º–∏–ª–ª–∏–æ–Ω—ã –¥–æ–ª–ª–∞—Ä–æ–≤!