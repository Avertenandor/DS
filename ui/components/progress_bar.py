"""
PLEX Dynamic Staking Manager - Progress Bar
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable, Any, Union
from enum import Enum
import customtkinter as ctk

from ui.themes.dark_theme import get_theme
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class ProgressState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞."""
    IDLE = "idle"
    RUNNING = "running"
    PAUSED = "paused"
    COMPLETED = "completed"
    ERROR = "error"
    CANCELLED = "cancelled"


class ProgressBar(ctk.CTkFrame):
    """
    Production-ready –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ ETA
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—É–∑ –∏ –æ—Ç–º–µ–Ω—ã
    - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    
    def __init__(
        self,
        parent,
        title: str = "–ü—Ä–æ–≥—Ä–µ—Å—Å",
        show_percentage: bool = True,
        show_eta: bool = True,
        show_speed: bool = True,
        animated: bool = True,
        style: str = "default",
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProgressBar.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            show_percentage: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            show_eta: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            show_speed: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            animated: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
            style: –°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ('default', 'compact', 'detailed')
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self.theme = get_theme()
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ñ—Ä–µ–π–º–∞
        frame_style = self.theme.get_frame_style('card')
        frame_style.update(kwargs)
        super().__init__(parent, **frame_style)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.title = title
        self.show_percentage = show_percentage
        self.show_eta = show_eta
        self.show_speed = show_speed
        self.animated = animated
        self.style = style
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.state = ProgressState.IDLE
        self.current_value = 0.0
        self.max_value = 100.0
        self.min_value = 0.0
        self.target_value = 0.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        self.start_time: Optional[datetime] = None
        self.pause_time: Optional[datetime] = None
        self.total_paused_time = timedelta()
        self.last_update_time: Optional[datetime] = None
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.progress_history: List[tuple] = []  # (time, value)
        self.max_history_size = 10
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        self.animation_thread: Optional[threading.Thread] = None
        self.animation_running = False
        self.animation_speed = 0.02  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
        
        # –ö–æ–ª–±—ç–∫–∏
        self.on_progress_changed: Optional[Callable[[float], None]] = None
        self.on_completed: Optional[Callable[[], None]] = None
        self.on_cancelled: Optional[Callable[[], None]] = None
        self.on_error: Optional[Callable[[str], None]] = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        
        logger.debug(f"üìä ProgressBar '{title}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _create_widgets(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = self.theme.create_styled_label(
            self,
            self.title,
            'title' if self.style == 'detailed' else 'primary'
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = self.theme.create_styled_progressbar(
            self,
            height=12 if self.style == 'detailed' else 8
        )
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.info_frame = self.theme.create_styled_frame(self, 'primary')
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if self.show_percentage:
            self.percentage_label = self.theme.create_styled_label(
                self.info_frame,
                "0%",
                'accent'
            )
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = self.theme.create_styled_label(
            self.info_frame,
            "–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É",
            'secondary'
        )
        
        # ETA
        if self.show_eta:
            self.eta_label = self.theme.create_styled_label(
                self.info_frame,
                "ETA: --:--",
                'muted'
            )
        
        # –°–∫–æ—Ä–æ—Å—Ç—å
        if self.show_speed:
            self.speed_label = self.theme.create_styled_label(
                self.info_frame,
                "–°–∫–æ—Ä–æ—Å—Ç—å: --",
                'muted'
            )
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.elapsed_label = self.theme.create_styled_label(
            self.info_frame,
            "–í—Ä–µ–º—è: 00:00",
            'muted'
        )
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è detailed —Å—Ç–∏–ª—è)
        if self.style == 'detailed':
            self.control_frame = self.theme.create_styled_frame(self, 'primary')
            
            self.pause_button = self.theme.create_styled_button(
                self.control_frame,
                "‚è∏Ô∏è –ü–∞—É–∑–∞",
                'secondary',
                command=self._toggle_pause,
                width=80
            )
            
            self.cancel_button = self.theme.create_styled_button(
                self.control_frame,
                "‚ùå –û—Ç–º–µ–Ω–∞",
                'danger',
                command=self._cancel_progress,
                width=80
            )
            
            self.reset_button = self.theme.create_styled_button(
                self.control_frame,
                "üîÑ –°–±—Ä–æ—Å",
                'secondary',
                command=self._reset_progress,
                width=80
            )
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è detailed —Å—Ç–∏–ª—è)
        if self.style == 'detailed':
            self.details_frame = self.theme.create_styled_frame(self, 'secondary')
            
            self.details_text = self.theme.create_styled_textbox(
                self.details_frame,
                height=60,
                font=('Consolas', 9, 'normal')
            )
    
    def _setup_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        if self.style == 'compact':
            self._setup_compact_layout()
        elif self.style == 'detailed':
            self._setup_detailed_layout()
        else:
            self._setup_default_layout()
    
    def _setup_default_layout(self) -> None:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label.pack(pady=(10, 5))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar.pack(fill='x', padx=10, pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.info_frame.pack(fill='x', padx=10, pady=(5, 10))
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        left_info = self.theme.create_styled_frame(self.info_frame, 'primary')
        left_info.pack(side='left', fill='x', expand=True)
        
        right_info = self.theme.create_styled_frame(self.info_frame, 'primary')
        right_info.pack(side='right')
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å
        if self.show_percentage:
            self.percentage_label.pack(side='left')
        
        self.status_label.pack(side='left', padx=(10, 0))
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å
        self.elapsed_label.pack(side='right')
        
        if self.show_eta:
            self.eta_label.pack(side='right', padx=(0, 10))
        
        if self.show_speed:
            self.speed_label.pack(side='right', padx=(0, 10))
    
    def _setup_compact_layout(self) -> None:
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞."""
        # –í—Å–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        main_info = self.theme.create_styled_frame(self, 'primary')
        main_info.pack(fill='x', padx=5, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–µ–≤–∞
        self.title_label.pack(side='left')
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ
        progress_frame = self.theme.create_styled_frame(main_info, 'primary')
        progress_frame.pack(side='left', fill='x', expand=True, padx=(10, 10))
        
        self.progress_bar.pack(fill='x')
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞
        if self.show_percentage:
            self.percentage_label.pack(side='right')
    
    def _setup_detailed_layout(self) -> None:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label.pack(pady=(10, 5))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar.pack(fill='x', padx=10, pady=5)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.info_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_row1 = self.theme.create_styled_frame(self.info_frame, 'primary')
        info_row1.pack(fill='x', pady=2)
        
        if self.show_percentage:
            self.percentage_label.pack(side='left')
        
        self.status_label.pack(side='left', padx=(10, 0))
        self.elapsed_label.pack(side='right')
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if self.show_eta or self.show_speed:
            info_row2 = self.theme.create_styled_frame(self.info_frame, 'primary')
            info_row2.pack(fill='x', pady=2)
            
            if self.show_speed:
                self.speed_label.pack(side='left')
            
            if self.show_eta:
                self.eta_label.pack(side='right')
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame.pack(fill='x', padx=10, pady=5)
        
        self.pause_button.pack(side='left', padx=(0, 5))
        self.cancel_button.pack(side='left', padx=(0, 5))
        self.reset_button.pack(side='right')
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.details_frame.pack(fill='both', expand=True, padx=10, pady=(5, 10))
        self.details_text.pack(fill='both', expand=True, padx=5, pady=5)
    
    def _update_display(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            progress_ratio = self.get_progress_ratio()
            self.progress_bar.set(progress_ratio)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            if self.show_percentage:
                percentage = int(progress_ratio * 100)
                self.percentage_label.configure(text=f"{percentage}%")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status_text = self._get_status_text()
            self.status_label.configure(text=status_text)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            elapsed = self._get_elapsed_time()
            self.elapsed_label.configure(text=f"–í—Ä–µ–º—è: {self._format_timedelta(elapsed)}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ETA
            if self.show_eta:
                eta = self._calculate_eta()
                eta_text = f"ETA: {self._format_timedelta(eta)}" if eta else "ETA: --:--"
                self.eta_label.configure(text=eta_text)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            if self.show_speed:
                speed = self._calculate_speed()
                speed_text = f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f}/—Å" if speed else "–°–∫–æ—Ä–æ—Å—Ç—å: --"
                self.speed_label.configure(text=speed_text)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if self.style == 'detailed':
                self._update_details()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    def _get_status_text(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞."""
        status_texts = {
            ProgressState.IDLE: "–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É",
            ProgressState.RUNNING: "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...",
            ProgressState.PAUSED: "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            ProgressState.COMPLETED: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            ProgressState.ERROR: "–û—à–∏–±–∫–∞",
            ProgressState.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω–æ"
        }
        
        return status_texts.get(self.state, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    def _calculate_eta(self) -> Optional[timedelta]:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        try:
            if self.state != ProgressState.RUNNING:
                return None
            
            speed = self._calculate_speed()
            if not speed or speed <= 0:
                return None
            
            remaining = self.max_value - self.current_value
            eta_seconds = remaining / speed
            
            return timedelta(seconds=eta_seconds)
            
        except Exception:
            return None
    
    def _calculate_speed(self) -> Optional[float]:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        try:
            if len(self.progress_history) < 2:
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
            recent_history = self.progress_history[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
            
            if len(recent_history) < 2:
                return None
            
            time_diff = (recent_history[-1][0] - recent_history[0][0]).total_seconds()
            value_diff = recent_history[-1][1] - recent_history[0][1]
            
            if time_diff <= 0:
                return None
            
            return value_diff / time_diff
            
        except Exception:
            return None
    
    def _get_elapsed_time(self) -> timedelta:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        if not self.start_time:
            return timedelta()
        
        current_time = datetime.now()
        
        if self.state == ProgressState.PAUSED and self.pause_time:
            # –ï—Å–ª–∏ –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã
            elapsed = (self.pause_time - self.start_time) - self.total_paused_time
        else:
            # –û–±—â–µ–µ –≤—Ä–µ–º—è –º–∏–Ω—É—Å –≤—Ä–µ–º—è –ø–∞—É–∑
            elapsed = (current_time - self.start_time) - self.total_paused_time
        
        return max(elapsed, timedelta())
    
    def _format_timedelta(self, td: timedelta) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏."""
        if not td:
            return "00:00"
        
        total_seconds = int(td.total_seconds())
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
        
        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        else:
            return f"{minutes:02d}:{seconds:02d}"
    
    def _update_details(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        try:
            if not hasattr(self, 'details_text'):
                return
            
            details = []
            details.append(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.value}")
            details.append(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {self.current_value:.2f} / {self.max_value:.2f}")
            details.append(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {self.get_progress_ratio():.2%}")
            
            if self.start_time:
                details.append(f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {self.start_time.strftime('%H:%M:%S')}")
            
            elapsed = self._get_elapsed_time()
            details.append(f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {self._format_timedelta(elapsed)}")
            
            if self.total_paused_time.total_seconds() > 0:
                details.append(f"–í—Ä–µ–º—è –ø–∞—É–∑: {self._format_timedelta(self.total_paused_time)}")
            
            speed = self._calculate_speed()
            if speed:
                details.append(f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} –µ–¥–∏–Ω–∏—Ü/—Å–µ–∫")
            
            eta = self._calculate_eta()
            if eta:
                details.append(f"–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {self._format_timedelta(eta)}")
            
            details.append(f"–ò—Å—Ç–æ—Ä–∏—è: {len(self.progress_history)} –∑–∞–ø–∏—Å–µ–π")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            self.details_text.delete('1.0', 'end')
            self.details_text.insert('1.0', '\n'.join(details))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
    
    def _animate_progress(self) -> None:
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        while self.animation_running:
            try:
                if abs(self.current_value - self.target_value) > 0.1:
                    # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                    diff = self.target_value - self.current_value
                    self.current_value += diff * 0.1  # 10% –æ—Ç —Ä–∞–∑–Ω–æ—Å—Ç–∏ –∑–∞ –∫–∞–¥—Ä
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    self.after_idle(self._update_display)
                else:
                    # –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    self.current_value = self.target_value
                    self.after_idle(self._update_display)
                
                time.sleep(self.animation_speed)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                break
    
    def _start_animation(self) -> None:
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏."""
        if not self.animated or self.animation_running:
            return
        
        self.animation_running = True
        self.animation_thread = threading.Thread(target=self._animate_progress, daemon=True)
        self.animation_thread.start()
    
    def _stop_animation(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏."""
        self.animation_running = False
        if self.animation_thread and self.animation_thread.is_alive():
            self.animation_thread.join(timeout=1)
    
    def _toggle_pause(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã."""
        if self.state == ProgressState.RUNNING:
            self.pause()
        elif self.state == ProgressState.PAUSED:
            self.resume()
    
    def _cancel_progress(self) -> None:
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        self.cancel()
    
    def _reset_progress(self) -> None:
        """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        self.reset()
    
    # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        if self.state == ProgressState.RUNNING:
            return
        
        self.state = ProgressState.RUNNING
        
        if not self.start_time:
            self.start_time = datetime.now()
        
        self.last_update_time = datetime.now()
        
        if self.animated:
            self._start_animation()
        
        self._update_display()
        logger.debug(f"‚ñ∂Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å '{self.title}' –∑–∞–ø—É—â–µ–Ω")
    
    def pause(self) -> None:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        if self.state != ProgressState.RUNNING:
            return
        
        self.state = ProgressState.PAUSED
        self.pause_time = datetime.now()
        
        if self.style == 'detailed':
            self.pause_button.configure(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        
        self._update_display()
        logger.debug(f"‚è∏Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å '{self.title}' –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def resume(self) -> None:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        if self.state != ProgressState.PAUSED:
            return
        
        if self.pause_time:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—É–∑
            pause_duration = datetime.now() - self.pause_time
            self.total_paused_time += pause_duration
            self.pause_time = None
        
        self.state = ProgressState.RUNNING
        self.last_update_time = datetime.now()
        
        if self.style == 'detailed':
            self.pause_button.configure(text="‚è∏Ô∏è –ü–∞—É–∑–∞")
        
        self._update_display()
        logger.debug(f"‚ñ∂Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å '{self.title}' –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def cancel(self) -> None:
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        self.state = ProgressState.CANCELLED
        self._stop_animation()
        self._update_display()
        
        if self.on_cancelled:
            self.on_cancelled()
        
        logger.debug(f"‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å '{self.title}' –æ—Ç–º–µ–Ω–µ–Ω")
    
    def complete(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        self.state = ProgressState.COMPLETED
        self.current_value = self.max_value
        self.target_value = self.max_value
        self._stop_animation()
        self._update_display()
        
        if self.on_completed:
            self.on_completed()
        
        logger.debug(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å '{self.title}' –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def error(self, message: str = "") -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏."""
        self.state = ProgressState.ERROR
        self._stop_animation()
        self._update_display()
        
        if self.on_error:
            self.on_error(message)
        
        logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ '{self.title}': {message}")
    
    def reset(self) -> None:
        """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        self.state = ProgressState.IDLE
        self.current_value = self.min_value
        self.target_value = self.min_value
        self.start_time = None
        self.pause_time = None
        self.total_paused_time = timedelta()
        self.last_update_time = None
        self.progress_history.clear()
        
        self._stop_animation()
        
        if self.style == 'detailed':
            self.pause_button.configure(text="‚è∏Ô∏è –ü–∞—É–∑–∞")
        
        self._update_display()
        logger.debug(f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å '{self.title}' —Å–±—Ä–æ—à–µ–Ω")
    
    def set_progress(self, value: float, message: str = "") -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            message: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        value = max(self.min_value, min(value, self.max_value))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        current_time = datetime.now()
        self.progress_history.append((current_time, value))
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.progress_history) > self.max_history_size:
            self.progress_history = self.progress_history[-self.max_history_size:]
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if self.animated and self.state == ProgressState.RUNNING:
            self.target_value = value
            if not self.animation_running:
                self._start_animation()
        else:
            self.current_value = value
            self.target_value = value
        
        self.last_update_time = current_time
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not self.animated:
            self._update_display()
        
        # –ö–æ–ª–±—ç–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if self.on_progress_changed:
            self.on_progress_changed(value)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º—É–º–∞
        if value >= self.max_value and self.state == ProgressState.RUNNING:
            self.complete()
    
    def increment(self, delta: float = 1.0, message: str = "") -> None:
        """
        –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        
        Args:
            delta: –ó–Ω–∞—á–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
            message: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        new_value = self.current_value + delta
        self.set_progress(new_value, message)
    
    def get_progress_ratio(self) -> float:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (0.0 - 1.0).
        
        Returns:
            float: –û—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        if self.max_value == self.min_value:
            return 1.0
        
        return (self.current_value - self.min_value) / (self.max_value - self.min_value)
    
    def set_range(self, min_value: float, max_value: float) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            min_value: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            max_value: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        self.min_value = min_value
        self.max_value = max_value
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        self.current_value = max(min_value, min(self.current_value, max_value))
        self.target_value = max(min_value, min(self.target_value, max_value))
        
        self._update_display()
    
    def set_title(self, title: str) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
        
        Args:
            title: –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        """
        self.title = title
        self.title_label.configure(text=title)
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        elapsed = self._get_elapsed_time()
        speed = self._calculate_speed()
        eta = self._calculate_eta()
        
        return {
            'title': self.title,
            'state': self.state.value,
            'current_value': self.current_value,
            'max_value': self.max_value,
            'min_value': self.min_value,
            'progress_ratio': self.get_progress_ratio(),
            'percentage': int(self.get_progress_ratio() * 100),
            'elapsed_time': elapsed.total_seconds(),
            'paused_time': self.total_paused_time.total_seconds(),
            'speed': speed,
            'eta_seconds': eta.total_seconds() if eta else None,
            'history_size': len(self.progress_history),
            'is_animated': self.animated,
            'is_animation_running': self.animation_running
        }


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['ProgressBar', 'ProgressState']


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    def demo_progress_bar():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ProgressBar."""
        try:
            print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ProgressBar...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            root = ctk.CTk()
            root.title("PLEX Progress Bar Demo")
            root.geometry("800x600")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
            from ui.themes.dark_theme import apply_window_style
            apply_window_style(root)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π
            compact_progress = ProgressBar(
                root,
                title="–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
                style="compact",
                show_eta=False,
                show_speed=False
            )
            compact_progress.pack(fill='x', padx=20, pady=10)
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            default_progress = ProgressBar(
                root,
                title="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
                style="default",
                animated=True
            )
            default_progress.pack(fill='x', padx=20, pady=10)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π
            detailed_progress = ProgressBar(
                root,
                title="–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
                style="detailed",
                animated=True,
                show_percentage=True,
                show_eta=True,
                show_speed=True
            )
            detailed_progress.pack(fill='both', expand=True, padx=20, pady=10)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def simulate_progress():
                import random
                
                # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
                compact_progress.start()
                default_progress.start()
                detailed_progress.start()
                
                def update_progress():
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
                    compact_progress.increment(random.uniform(0.5, 2.0))
                    default_progress.increment(random.uniform(0.3, 1.5))
                    detailed_progress.increment(random.uniform(0.2, 1.0))
                    
                    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                    if (compact_progress.state == ProgressState.RUNNING or
                        default_progress.state == ProgressState.RUNNING or
                        detailed_progress.state == ProgressState.RUNNING):
                        
                        root.after(100, update_progress)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100–º—Å
                
                # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                root.after(500, update_progress)
            
            # –ö–æ–ª–±—ç–∫–∏
            def on_completed():
                print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            def on_progress_changed(value):
                # print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω: {value}")
                pass
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤
            detailed_progress.on_completed = on_completed
            detailed_progress.on_progress_changed = on_progress_changed
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
            start_button = ctk.CTkButton(
                root,
                text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é",
                command=simulate_progress,
                font=('Segoe UI', 12, 'bold')
            )
            start_button.pack(pady=10)
            
            print("‚úÖ Demo –∑–∞–ø—É—â–µ–Ω–æ. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            root.mainloop()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    # demo_progress_bar()
    print("üí° –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ProgressBar —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
