"""
–ú–æ–¥—É–ª—å: –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è PLEX Dynamic Staking Manager
–û–ø–∏—Å–∞–Ω–∏–µ: –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CustomTkinter v5.2.1
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import customtkinter as ctk
from typing import Optional, Dict, Any
from abc import ABC, abstractmethod

from utils.logger import get_logger
from ui.themes.chatgpt_theme import ChatGPTTheme

logger = get_logger("PLEX_BaseDialog")

class BaseDialog(ctk.CTkToplevel, ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω"""
    
    def __init__(
        self,
        parent: Optional[ctk.CTk] = None,
        title: str = "PLEX Dialog",
        width: int = 400,
        height: int = 300,
        resizable: bool = False,
        modal: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞
            width: –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
            height: –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞
            resizable: –ú–æ–∂–µ—Ç –ª–∏ –æ–∫–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä
            modal: –ú–æ–¥–∞–ª—å–Ω–æ–µ –ª–∏ –æ–∫–Ω–æ
        """
        super().__init__(parent)
        
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BaseDialog: {title}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.parent = parent
        self.title_text = title
        self.result: Optional[Dict[str, Any]] = None
        self.is_modal = modal
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        self.theme = ChatGPTTheme()
        self._apply_theme()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self._setup_window(width, height, resizable)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self._center_window()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_interface()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏
        if modal:
            self._setup_modal()
    
    def _apply_theme(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –¥–∏–∞–ª–æ–≥—É"""
        colors = self.theme.get_colors()
        self.configure(fg_color=colors['bg_primary'])
    
    def _setup_window(self, width: int, height: int, resizable: bool) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∫–Ω–∞"""
        self.title(self.title_text)
        self.geometry(f"{width}x{height}")
        self.resizable(resizable, resizable)
        
        # –ò–∫–æ–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            self.iconbitmap("assets/plex_icon.ico")
        except:
            pass  # –ò–∫–æ–Ω–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
    
    def _center_window(self) -> None:
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.update_idletasks()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        window_width = self.winfo_width()
        window_height = self.winfo_height()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        self.geometry(f"+{x}+{y}")
    
    def _setup_modal(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self.parent:
            self.transient(self.parent)
            self.grab_set()
        
        # –§–æ–∫—É—Å –Ω–∞ –¥–∏–∞–ª–æ–≥
        self.focus_set()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.protocol("WM_DELETE_WINDOW", self._on_close)
    
    @abstractmethod
    def _create_interface(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        pass
    
    def _on_close(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        logger.info(f"üîö –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞: {self.title_text}")
        self.result = None
        self._close_dialog()
    
    def _close_dialog(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        if self.is_modal and self.parent:
            self.grab_release()
        self.destroy()
    
    def show_dialog(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
        """
        logger.info(f"üì± –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞: {self.title_text}")
        
        if self.is_modal:
            self.wait_window()
        
        return self.result
    
    def accept(self, result: Dict[str, Any]) -> None:
        """
        –ü—Ä–∏–Ω—è—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞
        """
        logger.info(f"‚úÖ –î–∏–∞–ª–æ–≥ –ø—Ä–∏–Ω—è—Ç: {self.title_text}")
        self.result = result
        self._close_dialog()
    
    def reject(self) -> None:
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        logger.info(f"‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {self.title_text}")
        self.result = None
        self._close_dialog()

class MessageDialog(BaseDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(
        self,
        parent: Optional[ctk.CTk] = None,
        title: str = "–°–æ–æ–±—â–µ–Ω–∏–µ",
        message: str = "",
        dialog_type: str = "info",  # info, warning, error, question
        width: int = 400,
        height: int = 200
    ):
        self.message = message
        self.dialog_type = dialog_type
        super().__init__(parent, title, width, height)
    
    def _create_interface(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        colors = self.theme.get_colors()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        icon_map = {
            "info": "‚ÑπÔ∏è",
            "warning": "‚ö†Ô∏è",
            "error": "‚ùå",
            "question": "‚ùì"
        }
        
        icon_label = ctk.CTkLabel(
            main_frame,
            text=icon_map.get(self.dialog_type, "‚ÑπÔ∏è"),
            font=("Arial", 24)
        )
        icon_label.pack(pady=(0, 10))
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_label = ctk.CTkLabel(
            main_frame,
            text=self.message,
            font=("Arial", 12),
            wraplength=350,
            justify="center"
        )
        message_label.pack(pady=(0, 20), fill="x")
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        button_frame.pack(fill="x")
        
        if self.dialog_type == "question":
            # –î–∞/–ù–µ—Ç –∫–Ω–æ–ø–∫–∏
            yes_button = ctk.CTkButton(
                button_frame,
                text="–î–∞",
                command=lambda: self.accept({"result": True})
            )
            yes_button.pack(side="left", padx=(0, 10))
            
            no_button = ctk.CTkButton(
                button_frame,
                text="–ù–µ—Ç",
                command=lambda: self.accept({"result": False})
            )
            no_button.pack(side="right")
        else:
            # –ü—Ä–æ—Å—Ç–æ –û–ö
            ok_button = ctk.CTkButton(
                button_frame,
                text="–û–ö",
                command=lambda: self.accept({"result": True})
            )
            ok_button.pack()

class InputDialog(BaseDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(
        self,
        parent: Optional[ctk.CTk] = None,
        title: str = "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö",
        prompt: str = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        default_value: str = "",
        width: int = 400,
        height: int = 250
    ):
        self.prompt = prompt
        self.default_value = default_value
        self.entry_var = ctk.StringVar(value=default_value)
        super().__init__(parent, title, width, height)
    
    def _create_interface(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞ –≤–≤–æ–¥–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        prompt_label = ctk.CTkLabel(
            main_frame,
            text=self.prompt,
            font=("Arial", 12)
        )
        prompt_label.pack(pady=(0, 10))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.entry = ctk.CTkEntry(
            main_frame,
            textvariable=self.entry_var,
            font=("Arial", 12)
        )
        self.entry.pack(fill="x", pady=(0, 20))
        self.entry.focus_set()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter
        self.entry.bind("<Return>", lambda e: self._on_ok())
        self.entry.bind("<Escape>", lambda e: self.reject())
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        button_frame.pack(fill="x")
        
        ok_button = ctk.CTkButton(
            button_frame,
            text="–û–ö",
            command=self._on_ok
        )
        ok_button.pack(side="left", padx=(0, 10))
        
        cancel_button = ctk.CTkButton(
            button_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.reject
        )
        cancel_button.pack(side="right")
    
    def _on_ok(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –û–ö"""
        value = self.entry_var.get().strip()
        if value:
            self.accept({"value": value})
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
            pass

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
def show_info(parent: Optional[ctk.CTk], title: str, message: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    dialog = MessageDialog(parent, title, message, "info")
    dialog.show_dialog()

def show_warning(parent: Optional[ctk.CTk], title: str, message: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    dialog = MessageDialog(parent, title, message, "warning")
    dialog.show_dialog()

def show_error(parent: Optional[ctk.CTk], title: str, message: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É"""
    dialog = MessageDialog(parent, title, message, "error")
    dialog.show_dialog()

def ask_question(parent: Optional[ctk.CTk], title: str, message: str) -> bool:
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–∞/–Ω–µ—Ç"""
    dialog = MessageDialog(parent, title, message, "question")
    result = dialog.show_dialog()
    return result.get("result", False) if result else False

def get_input(
    parent: Optional[ctk.CTk], 
    title: str, 
    prompt: str, 
    default: str = ""
) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dialog = InputDialog(parent, title, prompt, default)
    result = dialog.show_dialog()
    return result.get("value") if result else None
