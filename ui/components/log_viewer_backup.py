"""
PLEX Dynamic Staking Manager - Log Viewer
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import threading
import time
from datetime import datetime
from typing import Dict, List, Optional, Callable, Any
from enum import Enum
import tkinter as tk
from tkinter import filedialog, messagebox
import customtkinter as ctk

from ui.themes.dark_theme import get_theme
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class LogLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    DEBUG = "DEBUG"
    INFO = "INFO"
    WARNING = "WARNING"
    ERROR = "ERROR"
    CRITICAL = "CRITICAL"


class LogEntry:
    """–ó–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ."""
    
    def __init__(self, timestamp: str, level: str, message: str, module: str = ""):
        self.timestamp = timestamp
        self.level = level
        self.message = message
        self.module = module
        self.full_text = f"[{timestamp}] {level} - {module}: {message}"


class LogViewer(ctk.CTkFrame):
    """
    Production-ready –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    - –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    - –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
    - –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    """
    
    def __init__(
        self,
        parent,
        log_file_path: Optional[str] = None,
        auto_scroll: bool = True,
        max_lines: int = 1000,
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LogViewer.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            log_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
            auto_scroll: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
            max_lines: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self.theme = get_theme()
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ñ—Ä–µ–π–º–∞
        frame_style = self.theme.get_frame_style('secondary')
        frame_style.update(kwargs)
        super().__init__(parent, **frame_style)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.log_file_path = log_file_path
        self.auto_scroll = auto_scroll
        self.max_lines = max_lines
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.log_entries: List[LogEntry] = []
        self.filtered_entries: List[LogEntry] = []
        self.is_monitoring = False
        self.monitor_thread: Optional[threading.Thread] = None
        self.last_file_size = 0
        
        # –§–∏–ª—å—Ç—Ä—ã
        self.level_filter = set(LogLevel)  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.search_text = ""
        self.module_filter = ""
        
        # –ö–æ–ª–±—ç–∫–∏
        self.on_log_entry: Optional[Callable[[LogEntry], None]] = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
        if self.log_file_path and os.path.exists(self.log_file_path):
            self.start_monitoring()
        
        logger.debug("üìã LogViewer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _create_widgets(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_panel = self.theme.create_styled_frame(self, 'primary')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.btn_open_file = self.theme.create_styled_button(
            self.control_panel,
            "üìÇ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª",
            'secondary',
            command=self._open_log_file,
            width=120
        )
        
        self.btn_clear = self.theme.create_styled_button(
            self.control_panel,
            "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            'secondary',
            command=self._clear_logs,
            width=100
        )
        
        self.btn_export = self.theme.create_styled_button(
            self.control_panel,
            "üíæ –≠–∫—Å–ø–æ—Ä—Ç",
            'secondary',
            command=self._export_logs,
            width=100
        )
        
        self.btn_refresh = self.theme.create_styled_button(
            self.control_panel,
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            'primary',
            command=self._refresh_logs,
            width=100
        )
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.auto_scroll_var = ctk.BooleanVar(value=self.auto_scroll)
        self.switch_auto_scroll = ctk.CTkSwitch(
            self.control_panel,
            text="–ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞",
            variable=self.auto_scroll_var,
            command=self._toggle_auto_scroll,
            **self.theme.get_switch_style()
        )
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.filter_panel = self.theme.create_styled_frame(self, 'primary')
        
        # –ü–æ–∏—Å–∫
        self.search_label = self.theme.create_styled_label(
            self.filter_panel,
            "üîç –ü–æ–∏—Å–∫:",
            'secondary'
        )
        
        self.search_entry = self.theme.create_styled_entry(
            self.filter_panel,
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...",
            width=200
        )
        self.search_entry.bind('<KeyRelease>', self._on_search_changed)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥—É–ª—é
        self.module_label = self.theme.create_styled_label(
            self.filter_panel,
            "üì¶ –ú–æ–¥—É–ª—å:",
            'secondary'
        )
        
        self.module_entry = self.theme.create_styled_entry(
            self.filter_panel,
            "–§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥—É–ª—é...",
            width=150
        )
        self.module_entry.bind('<KeyRelease>', self._on_module_filter_changed)
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
        self.level_frame = self.theme.create_styled_frame(self.filter_panel, 'primary')
        
        self.level_label = self.theme.create_styled_label(
            self.level_frame,
            "üìä –£—Ä–æ–≤–Ω–∏:",
            'secondary'
        )
        
        # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.level_vars = {}
        self.level_checkboxes = {}
        
        level_colors = {
            LogLevel.DEBUG: self.theme.colors['text_muted'],
            LogLevel.INFO: self.theme.colors['info'],
            LogLevel.WARNING: self.theme.colors['warning'],
            LogLevel.ERROR: self.theme.colors['error'],
            LogLevel.CRITICAL: self.theme.colors['btn_danger']
        }
        
        for level in LogLevel:
            var = ctk.BooleanVar(value=True)
            self.level_vars[level] = var
            
            checkbox = ctk.CTkCheckBox(
                self.level_frame,
                text=level.value,
                variable=var,
                command=self._on_level_filter_changed,
                text_color=level_colors.get(level, self.theme.colors['text_primary']),
                font=('Segoe UI', 10, 'normal')
            )
            self.level_checkboxes[level] = checkbox
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.log_frame = self.theme.create_styled_frame(self, 'card')
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_textbox = self.theme.create_styled_textbox(
            self.log_frame,
            font=('Consolas', 9, 'normal'),
            wrap='word'
        )
        
        # –°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª—å
        self.status_panel = self.theme.create_styled_frame(self, 'primary')
        
        self.status_label = self.theme.create_styled_label(
            self.status_panel,
            "üìã –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            'muted'
        )
        
        self.log_count_label = self.theme.create_styled_label(
            self.status_panel,
            "–ó–∞–ø–∏—Å–µ–π: 0",
            'muted'
        )
        
        self.file_status_label = self.theme.create_styled_label(
            self.status_panel,
            "–§–∞–π–ª: –Ω–µ –≤—ã–±—Ä–∞–Ω",
            'muted'
        )
    
    def _setup_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_panel.pack(fill='x', padx=10, pady=(10, 5))
        
        self.btn_open_file.pack(side='left', padx=(0, 5))
        self.btn_clear.pack(side='left', padx=(0, 5))
        self.btn_export.pack(side='left', padx=(0, 5))
        self.btn_refresh.pack(side='left', padx=(0, 10))
        self.switch_auto_scroll.pack(side='right')
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.filter_panel.pack(fill='x', padx=10, pady=5)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_row1 = self.theme.create_styled_frame(self.filter_panel, 'primary')
        filter_row1.pack(fill='x', pady=(5, 2))
        
        self.search_label.pack(side='left', padx=(0, 5))
        self.search_entry.pack(side='left', padx=(0, 20))
        self.module_label.pack(side='left', padx=(0, 5))
        self.module_entry.pack(side='left')
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—É—Ä–æ–≤–Ω–∏)
        self.level_frame.pack(fill='x', pady=(2, 5))
        
        self.level_label.pack(side='left', padx=(0, 10))
        for checkbox in self.level_checkboxes.values():
            checkbox.pack(side='left', padx=(0, 10))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.log_frame.pack(fill='both', expand=True, padx=10, pady=5)
        self.log_textbox.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª—å
        self.status_panel.pack(fill='x', padx=10, pady=(5, 10))
        
        self.status_label.pack(side='left')
        self.log_count_label.pack(side='left', padx=(20, 0))
        self.file_status_label.pack(side='right')
    
    def _open_log_file(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤."""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–æ–≤",
                filetypes=[
                    ("Log files", "*.log"),
                    ("Text files", "*.txt"),
                    ("All files", "*.*")
                ]
            )
            
            if file_path:
                self.set_log_file(file_path)
                self._update_status(f"üìÇ –û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {os.path.basename(file_path)}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:\n{e}")
    
    def _clear_logs(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤."""
        try:
            self.log_entries.clear()
            self.filtered_entries.clear()
            self.log_textbox.delete('1.0', 'end')
            self._update_log_count()
            self._update_status("üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    def _export_logs(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª."""
        try:
            if not self.filtered_entries:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏",
                defaultextension=".log",
                filetypes=[
                    ("Log files", "*.log"),
                    ("Text files", "*.txt"),
                    ("All files", "*.*")
                ]
            )
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    for entry in self.filtered_entries:
                        f.write(f"{entry.full_text}\n")
                
                self._update_status(f"üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤: {os.path.basename(file_path)}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{file_path}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏:\n{e}")
    
    def _refresh_logs(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤."""
        try:
            if self.log_file_path and os.path.exists(self.log_file_path):
                self._read_log_file()
                self._update_status("üîÑ –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                self._update_status("‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            self._update_status(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def _toggle_auto_scroll(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏."""
        self.auto_scroll = self.auto_scroll_var.get()
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if self.auto_scroll else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        self._update_status(f"üìú –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ {status}")
    
    def _on_search_changed(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        self.search_text = self.search_entry.get().lower()
        self._apply_filters()
    
    def _on_module_filter_changed(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–æ–¥—É–ª—é."""
        self.module_filter = self.module_entry.get().lower()
        self._apply_filters()
      def _on_level_filter_changed(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º."""
        self.level_filter = {
            level for level, var in self.level_vars.items()
            if var.get()
        }
        self._apply_filters()

    def _apply_filters(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        try:
            self.filtered_entries = []
            
            for entry in self.log_entries:
                # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é (–µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—É—Å—Ç–æ–π)
                if self.level_filter and not any(level.value == entry.level for level in self.level_filter):
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
                if self.search_text and self.search_text not in entry.full_text.lower():
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥—É–ª—é
                if self.module_filter and self.module_filter not in entry.module.lower():
                    continue
                
                self.filtered_entries.append(entry)
            
            self._update_display()
            self._update_log_count()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            # –î–æ–±–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä —Å–ª–æ–º–∞–ª—Å—è
            self.filtered_entries = self.log_entries.copy()
            self._update_display()
            self._update_log_count()
    
    def _update_display(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤."""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
            self.log_textbox.delete('1.0', 'end')
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            for entry in self.filtered_entries[-self.max_lines:]:
                self._insert_log_entry(entry)
            
            # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
            if self.auto_scroll:
                self.log_textbox.see('end')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    def _insert_log_entry(self, entry: LogEntry) -> None:
        """
        –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π.
        
        Args:
            entry: –ó–∞–ø–∏—Å—å –ª–æ–≥–∞
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ —É—Ä–æ–≤–Ω—é
            level_colors = {
                'DEBUG': self.theme.colors['text_muted'],
                'INFO': self.theme.colors['info'],
                'WARNING': self.theme.colors['warning'],
                'ERROR': self.theme.colors['error'],
                'CRITICAL': self.theme.colors['btn_danger']
            }
            
            color = level_colors.get(entry.level, self.theme.colors['text_primary'])
            
            # –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
            start_pos = self.log_textbox.index('end')
            self.log_textbox.insert('end', f"{entry.full_text}\n")
            end_pos = self.log_textbox.index('end')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –¥–ª—è —Ü–≤–µ—Ç–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            try:
                tag_name = f"level_{entry.level}"
                self.log_textbox.tag_configure(tag_name, foreground=color)
                self.log_textbox.tag_add(tag_name, start_pos, end_pos)
            except:
                pass  # –ï—Å–ª–∏ —Ç–µ–≥–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")
    
    def _parse_log_line(self, line: str) -> Optional[LogEntry]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞.
        
        Args:
            line: –°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞
            
        Returns:
            LogEntry –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        """
        try:
            line = line.strip()
            if not line:
                return None
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            # [2024-01-01 12:00:00] INFO - module.name: Message
            if line.startswith('[') and ']' in line:
                parts = line.split(']', 1)
                if len(parts) == 2:
                    timestamp = parts[0][1:]  # –£–±–∏—Ä–∞–µ–º [
                    rest = parts[1].strip()
                    
                    # –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω—è
                    level_part = rest.split(' - ', 1)
                    if len(level_part) == 2:
                        level = level_part[0].strip()
                        message_part = level_part[1]
                        
                        # –ü–æ–∏—Å–∫ –º–æ–¥—É–ª—è
                        if ':' in message_part:
                            module_message = message_part.split(':', 1)
                            module = module_message[0].strip()
                            message = module_message[1].strip()
                        else:
                            module = ""
                            message = message_part.strip()
                        
                        return LogEntry(timestamp, level, message, module)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–ø–∏—Å—å
            return LogEntry(
                timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                level='INFO',
                message=line,
                module='unknown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞: {e}")
            return None
    
    def _read_log_file(self) -> None:
        """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤."""
        try:
            if not self.log_file_path or not os.path.exists(self.log_file_path):
                return
            
            with open(self.log_file_path, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
            if self.is_monitoring and hasattr(self, '_last_line_count'):
                new_lines = lines[self._last_line_count:]
                self._last_line_count = len(lines)
            else:
                new_lines = lines
                self._last_line_count = len(lines)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
            for line in new_lines:
                entry = self._parse_log_line(line)
                if entry:
                    self.log_entries.append(entry)
                    
                    # –í—ã–∑–æ–≤ –∫–æ–ª–±—ç–∫–∞ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    if self.on_log_entry:
                        self.on_log_entry(entry)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
            if len(self.log_entries) > self.max_lines * 2:
                self.log_entries = self.log_entries[-self.max_lines:]
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self._apply_filters()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
    
    def _monitor_log_file(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        while self.is_monitoring and self.log_file_path:
            try:
                if os.path.exists(self.log_file_path):
                    current_size = os.path.getsize(self.log_file_path)
                    
                    # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if current_size != self.last_file_size:
                        self.last_file_size = current_size
                        self._read_log_file()
                
                time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
                time.sleep(5)  # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _update_status(self, message: str) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        """
        try:
            self.status_label.configure(text=message)
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            self.after(5000, lambda: self.status_label.configure(text="üìã –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"))
        except:
            pass
    
    def _update_log_count(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤."""
        try:
            total = len(self.log_entries)
            filtered = len(self.filtered_entries)
            
            if total == filtered:
                text = f"–ó–∞–ø–∏—Å–µ–π: {total}"
            else:
                text = f"–ó–∞–ø–∏—Å–µ–π: {filtered}/{total}"
                
            self.log_count_label.configure(text=text)
        except:
            pass
    
    def _update_file_status(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞."""
        try:
            if self.log_file_path:
                filename = os.path.basename(self.log_file_path)
                status = "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥" if self.is_monitoring else "–∑–∞–≥—Ä—É–∂–µ–Ω"
                text = f"–§–∞–π–ª: {filename} ({status})"
            else:
                text = "–§–∞–π–ª: –Ω–µ –≤—ã–±—Ä–∞–Ω"
                
            self.file_status_label.configure(text=text)
        except:
            pass
    
    # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def set_log_file(self, file_path: str) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        """
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.stop_monitoring()
            
            self.log_file_path = file_path
            self.last_file_size = 0
            self._last_line_count = 0
            
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ª–æ–≥–æ–≤
            self.log_entries.clear()
            
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            self._read_log_file()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self._update_file_status()
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.start_monitoring()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
    
    def start_monitoring(self) -> None:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤."""
        if not self.log_file_path or self.is_monitoring:
            return
        
        try:
            self.is_monitoring = True
            self.monitor_thread = threading.Thread(
                target=self._monitor_log_file,
                daemon=True
            )
            self.monitor_thread.start()
            
            self._update_file_status()
            logger.debug("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.is_monitoring = False
    
    def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤."""
        if not self.is_monitoring:
            return
        
        try:
            self.is_monitoring = False
            
            if self.monitor_thread and self.monitor_thread.is_alive():
                self.monitor_thread.join(timeout=2)
            
            self._update_file_status()
            logger.debug("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def add_log_entry(self, level: str, message: str, module: str = "") -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ.
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
            module: –ú–æ–¥—É–ª—å
        """
        try:
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            entry = LogEntry(timestamp, level, message, module)
            
            self.log_entries.append(entry)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
            if len(self.log_entries) > self.max_lines * 2:
                self.log_entries = self.log_entries[-self.max_lines:]
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            self._apply_filters()
            
            # –í—ã–∑–æ–≤ –∫–æ–ª–±—ç–∫–∞
            if self.on_log_entry:
                self.on_log_entry(entry)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")
    
    def get_filtered_logs(self) -> List[LogEntry]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤.
        
        Returns:
            List[LogEntry]: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        return self.filtered_entries.copy()
    
    def set_max_lines(self, max_lines: int) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫.
        
        Args:
            max_lines: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        """
        self.max_lines = max_lines
        
        # –û–±—Ä–µ–∑–∫–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if len(self.log_entries) > max_lines * 2:
            self.log_entries = self.log_entries[-max_lines:]
            self._apply_filters()


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['LogViewer', 'LogLevel', 'LogEntry']


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    def demo_log_viewer():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LogViewer."""
        try:
            import tempfile
            import os
            
            print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LogViewer...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
            with tempfile.NamedTemporaryFile(mode='w', suffix='.log', delete=False) as f:
                test_log_file = f.name
                f.write("[2024-01-01 10:00:00] INFO - blockchain.node_client: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ QuickNode —É—Å–ø–µ—à–Ω–æ\n")
                f.write("[2024-01-01 10:00:01] DEBUG - swap_analyzer: –ê–Ω–∞–ª–∏–∑ swap —Å–æ–±—ã—Ç–∏–π –Ω–∞—á–∞—Ç\n")
                f.write("[2024-01-01 10:00:02] WARNING - gas_manager: –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: 15 gwei\n")
                f.write("[2024-01-01 10:00:03] ERROR - balance_checker: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è 0x123...\n")
                f.write("[2024-01-01 10:00:04] INFO - reward_manager: –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è 150 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            root = ctk.CTk()
            root.title("PLEX Log Viewer Demo")
            root.geometry("1000x700")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
            from ui.themes.dark_theme import apply_window_style
            apply_window_style(root)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ LogViewer
            log_viewer = LogViewer(root, log_file_path=test_log_file, auto_scroll=True)
            log_viewer.pack(fill='both', expand=True, padx=10, pady=10)
            
            # –ö–æ–ª–±—ç–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            def on_new_log(entry):
                print(f"üìã –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {entry.level} - {entry.message}")
            
            log_viewer.on_log_entry = on_new_log
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤
            def add_test_log():
                import random
                levels = ['INFO', 'DEBUG', 'WARNING', 'ERROR']
                modules = ['staking_manager', 'reward_calculator', 'ui.main_window']
                messages = [
                    "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö",
                    "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                ]
                
                level = random.choice(levels)
                module = random.choice(modules)
                message = random.choice(messages)
                
                log_viewer.add_log_entry(level, message, module)
                
                # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                root.after(2000, add_test_log)
            
            # –ó–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤
            root.after(1000, add_test_log)
            
            print("‚úÖ LogViewer –∑–∞–ø—É—â–µ–Ω. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            
            try:
                root.mainloop()
            finally:
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                try:
                    os.unlink(test_log_file)
                except:
                    pass
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    # demo_log_viewer()
    print("üí° –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ LogViewer —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
