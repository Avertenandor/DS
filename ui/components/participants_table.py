"""
PLEX Dynamic Staking Manager - Participants Table
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import tkinter as tk
from tkinter import ttk, messagebox, Menu
from typing import Dict, List, Optional, Any, Callable
import customtkinter as ctk
from decimal import Decimal
from datetime import datetime

from ui.themes.dark_theme import get_theme
from utils.logger import get_logger
from utils.converters import format_number

logger = get_logger(__name__)


class ParticipantsTable(ctk.CTkFrame):
    """
    –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, 
    —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.
    """
    
    def __init__(self, parent, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        super().__init__(parent, **kwargs)
        
        self.theme = get_theme()
        self.participants_data = []
        self.filtered_data = []
        self.selected_participant = None
        
        # –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        self.on_participant_select: Optional[Callable] = None
        self.on_participant_details: Optional[Callable] = None
        self.on_amnesty_request: Optional[Callable] = None
        self.on_reward_send: Optional[Callable] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.sort_column = None
        self.sort_reverse = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_interface()
        
        logger.debug("‚úÖ ParticipantsTable –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–∞–±–ª–∏—Ü—ã."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self._create_header()
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self._create_filters()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        self._create_table()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self._create_status_bar()
    
    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
        header_frame = ctk.CTkFrame(self)
        header_frame.configure(fg_color="transparent")
        header_frame.pack(fill='x', padx=10, pady=(10, 5))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            header_frame,
            text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title_label.pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = ctk.CTkFrame(header_frame)
        actions_frame.configure(fg_color="transparent")
        actions_frame.pack(side='right')
        
        # –ö–Ω–æ–ø–∫–∞ "–î–µ—Ç–∞–ª–∏"
        self.details_btn = ctk.CTkButton(
            actions_frame,
            text="üìã –î–µ—Ç–∞–ª–∏",
            command=self._show_participant_details,
            fg_color=self.theme.colors['btn_secondary'],
            width=100,
            height=30,
            state="disabled"
        )
        self.details_btn.pack(side='left', padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ "–ê–º–Ω–∏—Å—Ç–∏—è"
        self.amnesty_btn = ctk.CTkButton(
            actions_frame,
            text="ü§ù –ê–º–Ω–∏—Å—Ç–∏—è",
            command=self._request_amnesty,
            fg_color=self.theme.colors['warning'],
            width=100,
            height=30,
            state="disabled"
        )
        self.amnesty_btn.pack(side='left', padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–≥—Ä–∞–¥–∞"
        self.reward_btn = ctk.CTkButton(
            actions_frame,
            text="üéÅ –ù–∞–≥—Ä–∞–¥–∞",
            command=self._send_reward,
            fg_color=self.theme.colors['success'],
            width=100,
            height=30,
            state="disabled"
        )
        self.reward_btn.pack(side='left')
    
    def _create_filters(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        filters_frame = ctk.CTkFrame(self)
        filters_frame.configure(fg_color=self.theme.colors['bg_secondary'])
        filters_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
        search_label = ctk.CTkLabel(
            filters_frame,
            text="üîç –ü–æ–∏—Å–∫:",
            text_color=self.theme.colors['text_secondary']
        )
        search_label.pack(side='left', padx=(10, 5), pady=10)
        
        self.search_entry = ctk.CTkEntry(
            filters_frame,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞...",
            width=300,
            height=30
        )
        self.search_entry.pack(side='left', padx=(0, 10), pady=10)
        self.search_entry.bind('<KeyRelease>', self._on_search_change)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_label = ctk.CTkLabel(
            filters_frame,
            text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:",
            text_color=self.theme.colors['text_secondary']
        )
        category_label.pack(side='left', padx=(10, 5), pady=10)
        
        self.category_filter = ctk.CTkOptionMenu(
            filters_frame,
            values=["–í—Å–µ", "–ò–¥–µ–∞–ª—å–Ω—ã–µ", "–ü—Ä–æ–ø—É—Å–∫–∏", "–ü—Ä–æ–¥–∞–∂–∏", "–ü–µ—Ä–µ–≤–æ–¥—ã"],
            command=self._on_filter_change,
            width=150,
            height=30
        )
        self.category_filter.pack(side='left', padx=(0, 10), pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        reset_btn = ctk.CTkButton(
            filters_frame,
            text="üîÑ –°–±—Ä–æ—Å",
            command=self._reset_filters,
            fg_color=self.theme.colors['btn_secondary'],
            width=80,
            height=30
        )
        reset_btn.pack(side='right', padx=10, pady=10)
    
    def _create_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        table_frame = ctk.CTkFrame(self)
        table_frame.configure(fg_color=self.theme.colors['bg_tertiary'])
        table_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        columns = ('address', 'balance', 'category', 'status', 'contribution', 'last_activity')
        
        self.tree = ttk.Treeview(
            table_frame, 
            columns=columns, 
            show='headings',
            height=15
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        headers = {
            'address': 'üìç –ê–¥—Ä–µ—Å',
            'balance': 'üí∞ –ë–∞–ª–∞–Ω—Å',
            'category': 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è', 
            'status': 'üîÑ –°—Ç–∞—Ç—É—Å',
            'contribution': 'üìä –í–∫–ª–∞–¥',
            'last_activity': '‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
        }
        
        for col in columns:
            self.tree.heading(
                col, 
                text=headers[col],
                command=lambda c=col: self._sort_by_column(c)
            )
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {
            'address': 200,
            'balance': 120,
            'category': 100,
            'status': 100,
            'contribution': 100,
            'last_activity': 150
        }
        
        for col in columns:
            self.tree.column(col, width=column_widths[col], anchor='center')
        
        # Scrollbar –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # –£–ø–∞–∫–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.tree.pack(side='left', fill='both', expand=True, padx=(10, 0), pady=10)
        scrollbar.pack(side='right', fill='y', pady=10, padx=(0, 10))
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.tree.bind('<<TreeviewSelect>>', self._on_tree_select)
        self.tree.bind('<Double-1>', self._on_tree_double_click)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self._create_context_menu()
        
        # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        self.no_data_label = ctk.CTkLabel(
            table_frame,
            text="üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è\\n\\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            font=("Arial", 14),
            text_color=self.theme.colors['text_muted'],
            justify='center'
        )
    
    def _create_context_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã."""
        self.context_menu = Menu(self.tree, tearoff=0)
        self.context_menu.add_command(label="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", command=self._show_participant_details)
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å", command=self._copy_address)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="ü§ù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–º–Ω–∏—Å—Ç–∏—é", command=self._request_amnesty)
        self.context_menu.add_command(label="üéÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", command=self._send_reward)
        
        self.tree.bind("<Button-3>", self._show_context_menu)  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
    
    def _create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞."""
        status_frame = ctk.CTkFrame(self)
        status_frame.configure(fg_color=self.theme.colors['bg_secondary'])
        status_frame.pack(fill='x', padx=10, pady=(5, 10))
        
        self.status_label = ctk.CTkLabel(
            status_frame,
            text="üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0 | –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: 0 | –í—ã–±—Ä–∞–Ω–æ: –Ω–µ—Ç",
            text_color=self.theme.colors['text_secondary']
        )
        self.status_label.pack(side='left', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_btn = ctk.CTkButton(
            status_frame,
            text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç",
            command=self._export_data,
            fg_color=self.theme.colors['btn_secondary'],
            width=100,
            height=25
        )
        export_btn.pack(side='right', padx=10, pady=5)
    
    def update_participants(self, participants_data: List[Dict[str, Any]]):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        
        Args:
            participants_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        try:
            self.participants_data = participants_data
            self.filtered_data = participants_data.copy()
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.tree.get_children():
                self.tree.delete(item)
                
            if not participants_data:
                # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É
                self.no_data_label.place(relx=0.5, rely=0.5, anchor='center')
            else:
                # –°–∫—Ä—ã—Ç—å –∑–∞–≥–ª—É—à–∫—É
                self.no_data_label.place_forget()
                
                # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                for participant in participants_data:
                    self._add_participant_to_tree(participant)
            
            self._update_status_bar()
            
            logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(participants_data)} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É:\\n{e}")
    
    def _add_participant_to_tree(self, participant: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É."""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            address = participant.get('address', 'N/A')
            balance = format_number(participant.get('balance', 0), 2) + ' PLEX'
            category = participant.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            status = participant.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –†–∞—Å—á–µ—Ç –≤–∫–ª–∞–¥–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            contribution = participant.get('contribution_percent', 0)
            contribution_str = f"{contribution:.1f}%"
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            last_activity = participant.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if isinstance(last_activity, datetime):
                last_activity = last_activity.strftime('%Y-%m-%d %H:%M')
            
            # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            short_address = f"{address[:6]}...{address[-4:]}" if len(address) > 10 else address
            
            # –í—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
            item_id = self.tree.insert('', 'end', values=(
                short_address,
                balance,
                category,
                status,
                contribution_str,
                last_activity
            ))
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
            self.tree.item(item_id, tags=[address])
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant.get('address', 'N/A')}: {e}")
    
    def _on_tree_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        try:
            selection = self.tree.selection()
            if selection:
                item_id = selection[0]
                tags = self.tree.item(item_id, 'tags')
                if tags:
                    address = tags[0]
                    
                    # –ü–æ–∏—Å–∫ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    self.selected_participant = None
                    for participant in self.filtered_data:
                        if participant.get('address') == address:
                            self.selected_participant = participant
                            break
                    
                    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
                    self.details_btn.configure(state="normal")
                    
                    # –£—Å–ª–æ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∞–º–Ω–∏—Å—Ç–∏–∏ –∏ –Ω–∞–≥—Ä–∞–¥
                    if self.selected_participant:
                        category = self.selected_participant.get('category', '')
                        if '–ø—Ä–æ–ø—É—Å–∫' in category.lower() or '–ø–µ—Ä–µ–≤–æ–¥' in category.lower():
                            self.amnesty_btn.configure(state="normal")
                        else:
                            self.amnesty_btn.configure(state="disabled")
                            
                        if category.lower() == '–∏–¥–µ–∞–ª—å–Ω—ã–µ':
                            self.reward_btn.configure(state="normal")
                        else:
                            self.reward_btn.configure(state="disabled")
                    
                    # –í—ã–∑–æ–≤ –∫–æ–ª–±—ç–∫–∞
                    if self.on_participant_select:
                        self.on_participant_select(self.selected_participant)
                        
                    self._update_status_bar()
            else:
                # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞
                self._deactivate_buttons()
                self.selected_participant = None
                self._update_status_bar()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
    
    def _on_tree_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ - –ø–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π."""
        self._show_participant_details()
    
    def _show_context_menu(self, event):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é."""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            item = self.tree.identify_row(event.y)
            if item:
                self.tree.selection_set(item)
                self.context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    def _deactivate_buttons(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π."""
        self.details_btn.configure(state="disabled")
        self.amnesty_btn.configure(state="disabled")
        self.reward_btn.configure(state="disabled")
    
    def _show_participant_details(self):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
        if self.selected_participant and self.on_participant_details:
            self.on_participant_details(self.selected_participant)
        else:
            messagebox.showinfo("–î–µ—Ç–∞–ª–∏", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π")
    
    def _request_amnesty(self):
        """–ó–∞–ø—Ä–æ—Å –∞–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
        if self.selected_participant and self.on_amnesty_request:
            self.on_amnesty_request(self.selected_participant)
        else:
            messagebox.showinfo("–ê–º–Ω–∏—Å—Ç–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–º–Ω–∏—Å—Ç–∏–∏")
    
    def _send_reward(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã —É—á–∞—Å—Ç–Ω–∏–∫—É."""
        if self.selected_participant and self.on_reward_send:
            self.on_reward_send(self.selected_participant)
        else:
            messagebox.showinfo("–ù–∞–≥—Ä–∞–¥–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã")
    
    def _copy_address(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        if self.selected_participant:
            address = self.selected_participant.get('address', '')
            self.clipboard_clear()
            self.clipboard_append(address)
            messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", f"–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\\n{address}")
    
    def _on_search_change(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        self._apply_filters()
    
    def _on_filter_change(self, value):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        self._apply_filters()
    
    def _apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º."""
        try:
            search_text = self.search_entry.get().lower()
            category_filter = self.category_filter.get()
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.filtered_data = []
            for participant in self.participants_data:
                # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                address = participant.get('address', '').lower()
                if search_text and search_text not in address:
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if category_filter != "–í—Å–µ":
                    category = participant.get('category', '')
                    if category_filter.lower() not in category.lower():
                        continue
                
                self.filtered_data.append(participant)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            for participant in self.filtered_data:
                self._add_participant_to_tree(participant)
                
            self._update_status_bar()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def _reset_filters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        self.search_entry.delete(0, 'end')
        self.category_filter.set("–í—Å–µ")
        self._apply_filters()
    
    def _sort_by_column(self, column):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ."""
        try:
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if self.sort_column == column:
                self.sort_reverse = not self.sort_reverse
            else:
                self.sort_column = column
                self.sort_reverse = False
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if column == 'address':
                self.filtered_data.sort(key=lambda x: x.get('address', ''), reverse=self.sort_reverse)
            elif column == 'balance':
                self.filtered_data.sort(key=lambda x: float(x.get('balance', 0)), reverse=self.sort_reverse)
            elif column == 'category':
                self.filtered_data.sort(key=lambda x: x.get('category', ''), reverse=self.sort_reverse)
            elif column == 'contribution':
                self.filtered_data.sort(key=lambda x: float(x.get('contribution_percent', 0)), reverse=self.sort_reverse)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            for participant in self.filtered_data:
                self._add_participant_to_tree(participant)
                
            logger.debug(f"üìä –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ {column}, –æ–±—Ä–∞—Ç–Ω–æ: {self.sort_reverse}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ {column}: {e}")
    
    def _update_status_bar(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞."""
        total_count = len(self.participants_data)
        filtered_count = len(self.filtered_data)
        selected_text = f"–≤—ã–±—Ä–∞–Ω {self.selected_participant.get('address', 'N/A')[:10]}..." if self.selected_participant else "–Ω–µ—Ç"
        
        status_text = f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_count} | –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filtered_count} | –í—ã–±—Ä–∞–Ω–æ: {selected_text}"
        self.status_label.configure(text=status_text)
    
    def _export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª."""
        try:
            from tkinter import filedialog
            import json
            
            if not self.filtered_data:
                messagebox.showwarning("–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            filename = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(self.filtered_data, f, indent=2, ensure_ascii=False, default=str)
                
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\\n{filename}")
                logger.info(f"üìÑ –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\\n{e}")
    
    def set_callbacks(self, on_select=None, on_details=None, on_amnesty=None, on_reward=None):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
        
        Args:
            on_select: –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            on_details: –ö–æ–ª–±—ç–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
            on_amnesty: –ö–æ–ª–±—ç–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–º–Ω–∏—Å—Ç–∏–∏
            on_reward: –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã
        """
        self.on_participant_select = on_select
        self.on_participant_details = on_details
        self.on_amnesty_request = on_amnesty
        self.on_reward_send = on_reward
        
        logger.debug("‚úÖ –ö–æ–ª–±—ç–∫–∏ –¥–ª—è ParticipantsTable —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
