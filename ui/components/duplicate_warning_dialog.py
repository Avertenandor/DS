"""
PLEX Dynamic Staking Manager - Duplicate Payment Protection Dialog
–ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–≥–æ UI.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import customtkinter as ctk
from typing import List, Dict, Any, Optional, Callable
from decimal import Decimal
from datetime import datetime, timedelta
import threading
import time

from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class DuplicateWarningDialog:
    """
    –î–∏–∞–ª–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö –≤—ã–ø–ª–∞—Ç.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    - –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
    """
    
    def __init__(self, parent_window, duplicates_data: List[Dict[str, Any]], 
                 callback: Optional[Callable] = None, widget_factory=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞.
        
        Args:
            parent_window: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            duplicates_data: –î–∞–Ω–Ω—ã–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        self.parent = parent_window
        self.duplicates_data = duplicates_data
        self.callback = callback
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        self.user_decisions = {}  # address -> {'action': 'exclude'/'include', 'reason': '...'}
        self.result = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        self.dialog = None
        self.create_dialog()
        
        logger.info(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –¥–∏–∞–ª–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ {len(duplicates_data)} –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö")
    
    def create_dialog(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ UI –¥–∏–∞–ª–æ–≥–∞."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.dialog = ctk.CTkToplevel(self.parent)
            self.dialog.title("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—ã–ø–ª–∞—Ç")
            self.dialog.geometry("800x600")
            self.dialog.resizable(True, True)
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
            self.center_dialog()
            
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –æ–∫–Ω–æ–º
            self.dialog.transient(self.parent)
            self.dialog.grab_set()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            self.setup_theme()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.create_header()
            self.create_duplicates_list()
            self.create_action_buttons()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
            self.dialog.protocol("WM_DELETE_WINDOW", self.on_cancel)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            raise
    
    def setup_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–∞."""
        try:
            # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            self.colors = {
                'warning_bg': '#2b1810',
                'warning_accent': '#ff6b35',
                'safe_bg': '#1a2b1a',
                'safe_accent': '#4caf50',
                'danger_bg': '#2b1a1a',
                'danger_accent': '#f44336',
                'text_primary': '#ffffff',
                'text_secondary': '#b0b0b0'
            }
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –¥–∏–∞–ª–æ–≥—É
            self.dialog.configure(fg_color=self.colors['warning_bg'])
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã: {e}")
    
    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞."""
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
            header_frame = ctk.CTkFrame(
                self.dialog,
                fg_color=self.colors['warning_accent'],
                corner_radius=10
            )
            header_frame.pack(fill="x", padx=20, pady=(20, 10))
            
            # –ò–∫–æ–Ω–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
            title_frame.pack(fill="x", padx=20, pady=15)
            
            warning_icon = ctk.CTkLabel(
                title_frame,
                text="‚ö†Ô∏è",
                font=ctk.CTkFont(size=32),
                text_color=self.colors['text_primary']
            )
            warning_icon.pack(side="left", padx=(0, 15))
            
            title_text = ctk.CTkLabel(
                title_frame,
                text="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—ã–ø–ª–∞—Ç",
                font=ctk.CTkFont(size=18, weight="bold"),
                text_color=self.colors['text_primary']
            )
            title_text.pack(side="left")
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            description_label = ctk.CTkLabel(
                header_frame,
                text=(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(self.duplicates_data)} –∞–¥—Ä–µ—Å–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏.\\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –≤ –≤—ã–ø–ª–∞—Ç—É."
                ),
                font=ctk.CTkFont(size=12),
                text_color=self.colors['text_primary'],
                wraplength=700
            )
            description_label.pack(padx=20, pady=(0, 15))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
    
    def create_duplicates_list(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
        try:
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
            list_frame = ctk.CTkFrame(self.dialog)
            list_frame.pack(fill="both", expand=True, padx=20, pady=10)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
            list_header = ctk.CTkLabel(
                list_frame,
                text="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã:",
                font=ctk.CTkFont(size=14, weight="bold"),
                anchor="w"
            )
            list_header.pack(fill="x", padx=15, pady=(15, 5))
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            scrollable_frame = ctk.CTkScrollableFrame(
                list_frame,
                height=350
            )
            scrollable_frame.pack(fill="both", expand=True, padx=15, pady=(0, 15))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
            for i, duplicate_info in enumerate(self.duplicates_data):
                self.create_duplicate_item(scrollable_frame, duplicate_info, i)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
    
    def create_duplicate_item(self, parent, duplicate_info: Dict[str, Any], index: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
        try:
            address = duplicate_info.get('address', 'Unknown')
            amount = duplicate_info.get('amount', Decimal('0'))
            risk_level = duplicate_info.get('risk_level', 'medium')
            last_payment = duplicate_info.get('last_payment_date')
            reasons = duplicate_info.get('reasons', [])
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            risk_colors = {
                'high': self.colors['danger_accent'],
                'medium': self.colors['warning_accent'],
                'low': '#ffeb3b'
            }
            risk_color = risk_colors.get(risk_level, self.colors['warning_accent'])
            
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
            item_frame = ctk.CTkFrame(
                parent,
                fg_color=risk_color,
                corner_radius=8
            )
            item_frame.pack(fill="x", pady=5)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            info_frame = ctk.CTkFrame(item_frame, fg_color="transparent")
            info_frame.pack(fill="x", padx=15, pady=10)
            
            # –ê–¥—Ä–µ—Å –∏ —Å—É–º–º–∞
            address_label = ctk.CTkLabel(
                info_frame,
                text=f"üìç {address[:10]}...{address[-10:]}",
                font=ctk.CTkFont(size=12, weight="bold"),
                anchor="w"
            )
            address_label.pack(fill="x")
            
            amount_label = ctk.CTkLabel(
                info_frame,
                text=f"üí∞ –°—É–º–º–∞: {amount:,.2f} PLEX",
                font=ctk.CTkFont(size=11),
                anchor="w"
            )
            amount_label.pack(fill="x")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–ø–ª–∞—Ç–µ
            if last_payment:
                last_payment_str = last_payment.strftime("%d.%m.%Y %H:%M") if isinstance(last_payment, datetime) else str(last_payment)
                payment_label = ctk.CTkLabel(
                    info_frame,
                    text=f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞: {last_payment_str}",
                    font=ctk.CTkFont(size=10),
                    text_color=self.colors['text_secondary'],
                    anchor="w"
                )
                payment_label.pack(fill="x")
            
            # –ü—Ä–∏—á–∏–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if reasons:
                reasons_text = " ‚Ä¢ ".join(reasons[:3])  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–∏—á–∏–Ω—ã
                if len(reasons) > 3:
                    reasons_text += f" (+{len(reasons)-3} –µ—â–µ)"
                
                reasons_label = ctk.CTkLabel(
                    info_frame,
                    text=f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω—ã: {reasons_text}",
                    font=ctk.CTkFont(size=10),
                    text_color=self.colors['text_secondary'],
                    anchor="w",
                    wraplength=400
                )
                reasons_label.pack(fill="x", pady=(5, 0))
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            actions_frame = ctk.CTkFrame(item_frame, fg_color="transparent")
            actions_frame.pack(fill="x", padx=15, pady=(0, 10))
              # –ö–Ω–æ–ø–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            exclude_btn = ctk.CTkButton(
                actions_frame,
                text="‚ùå –ò—Å–∫–ª—é—á–∏—Ç—å",
                width=100,
                height=30,
                fg_color=self.colors['danger_accent'],
                command=lambda addr=address: self.exclude_address(addr, index)
            )
            exclude_btn.pack(side="left", padx=(0, 10))
              # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è
            include_btn = ctk.CTkButton(
                actions_frame,
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å",
                width=100,
                height=30,
                fg_color=self.colors['safe_accent'],
                command=lambda addr=address: self.include_address(addr, index)
            )
            include_btn.pack(side="left", padx=(0, 10))
              # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π
            details_btn = ctk.CTkButton(
                actions_frame,
                text="üìã –î–µ—Ç–∞–ª–∏",
                width=80,
                height=30,
                fg_color="#607d8b",
                command=lambda addr=address: self.show_details(addr, duplicate_info)
            )
            details_btn.pack(side="left")
            
            # –°—Ç–∞—Ç—É—Å —Ä–µ—à–µ–Ω–∏—è
            status_label = ctk.CTkLabel(
                actions_frame,
                text="‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è",
                font=ctk.CTkFont(size=10),
                text_color=self.colors['text_secondary']
            )
            status_label.pack(side="right")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            setattr(status_label, 'address', address)
            setattr(item_frame, 'status_label', status_label)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")
    
    def create_action_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π."""
        try:
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–æ–∫
            buttons_frame = ctk.CTkFrame(self.dialog)
            buttons_frame.pack(fill="x", padx=20, pady=(10, 20))
            
            # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
            left_buttons = ctk.CTkFrame(buttons_frame, fg_color="transparent")
            left_buttons.pack(side="left", padx=15, pady=15)
              # –ö–Ω–æ–ø–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö
            exclude_all_btn = ctk.CTkButton(
                left_buttons,
                text="‚ùå –ò—Å–∫–ª—é—á–∏—Ç—å –≤—Å–µ",
                width=120,
                height=35,
                fg_color=self.colors['danger_accent'],
                command=self.exclude_all
            )
            exclude_all_btn.pack(side="left", padx=(0, 10))
              # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö
            include_all_btn = ctk.CTkButton(
                left_buttons,
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ",
                width=120,
                height=35,
                fg_color=self.colors['safe_accent'],
                command=self.include_all
            )
            include_all_btn.pack(side="left", padx=(0, 10))
            
            # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
            right_buttons = ctk.CTkFrame(buttons_frame, fg_color="transparent")
            right_buttons.pack(side="right", padx=15, pady=15)
              # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            cancel_btn = ctk.CTkButton(
                right_buttons,
                text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞",
                width=100,
                height=35,
                fg_color="#757575",
                command=self.on_cancel
            )
            cancel_btn.pack(side="left", padx=(0, 10))
              # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            apply_btn = ctk.CTkButton(
                right_buttons,
                text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                width=120,
                height=35,
                fg_color="#2196f3",
                command=self.on_apply
            )
            apply_btn.pack(side="left")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—à–µ–Ω–∏–π
            self.stats_label = ctk.CTkLabel(
                buttons_frame,
                text=self.get_stats_text(),
                font=ctk.CTkFont(size=10),
                text_color=self.colors['text_secondary']
            )
            self.stats_label.pack(pady=5)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π: {e}")
    
    def exclude_address(self, address: str, index: int):
        """–ò—Å–∫–ª—é—á–∏—Ç—å –∞–¥—Ä–µ—Å –∏–∑ –≤—ã–ø–ª–∞—Ç—ã."""
        try:
            self.user_decisions[address] = {
                'action': 'exclude',
                'reason': '–ò—Å–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                'timestamp': datetime.now()
            }
            
            self.update_item_status(address, "‚ùå –ò—Å–∫–ª—é—á–µ–Ω")
            self.update_stats()
            
            logger.debug(f"üë§ –ê–¥—Ä–µ—Å {address[:10]}... –∏—Å–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {e}")
    
    def include_address(self, address: str, index: int):
        """–í–∫–ª—é—á–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –≤—ã–ø–ª–∞—Ç—É."""
        try:
            self.user_decisions[address] = {
                'action': 'include',
                'reason': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
                'timestamp': datetime.now()
            }
            
            self.update_item_status(address, "‚úÖ –í–∫–ª—é—á–µ–Ω")
            self.update_stats()
            
            logger.debug(f"üë§ –ê–¥—Ä–µ—Å {address[:10]}... –≤–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {e}")
    
    def show_details(self, address: str, duplicate_info: Dict[str, Any]):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É–±–ª–∏–∫–∞—Ç–µ."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π
            details_window = ctk.CTkToplevel(self.dialog)
            details_window.title(f"–î–µ—Ç–∞–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞: {address[:10]}...")
            details_window.geometry("500x400")
            details_window.transient(self.dialog)
            
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π
            details_frame = ctk.CTkScrollableFrame(details_window)
            details_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = ctk.CTkLabel(
                details_frame,
                text=f"–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—É–±–ª–∏–∫–∞—Ç–µ",
                font=ctk.CTkFont(size=16, weight="bold")
            )
            title_label.pack(anchor="w", pady=(0, 20))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥—Ä–µ—Å–µ
            info_items = [
                ("üìç –ê–¥—Ä–µ—Å:", address),
                ("üí∞ –°—É–º–º–∞:", f"{duplicate_info.get('amount', 0):,.2f} PLEX"),
                ("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:", duplicate_info.get('risk_level', 'medium').upper()),
                ("‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞:", str(duplicate_info.get('last_payment_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))),
                ("üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:", str(duplicate_info.get('matches_count', 0))),
            ]
            
            for label, value in info_items:
                item_frame = ctk.CTkFrame(details_frame, fg_color="transparent")
                item_frame.pack(fill="x", pady=2)
                
                label_widget = ctk.CTkLabel(item_frame, text=label, width=150, anchor="w")
                label_widget.pack(side="left")
                
                value_widget = ctk.CTkLabel(item_frame, text=value, anchor="w")
                value_widget.pack(side="left", padx=(10, 0))
            
            # –ü—Ä–∏—á–∏–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            reasons = duplicate_info.get('reasons', [])
            if reasons:
                reasons_label = ctk.CTkLabel(
                    details_frame,
                    text="‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    font=ctk.CTkFont(size=12, weight="bold"),
                    anchor="w"
                )
                reasons_label.pack(anchor="w", pady=(20, 5))
                
                for reason in reasons:
                    reason_label = ctk.CTkLabel(
                        details_frame,
                        text=f"  ‚Ä¢ {reason}",
                        anchor="w"
                    )
                    reason_label.pack(anchor="w", pady=1)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_btn = ctk.CTkButton(
                details_window,
                text="–ó–∞–∫—Ä—ã—Ç—å",
                command=details_window.destroy
            )
            close_btn.pack(pady=20)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")
    
    def exclude_all(self):
        """–ò—Å–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞."""
        try:
            for duplicate_info in self.duplicates_data:
                address = duplicate_info.get('address')
                if address:
                    self.user_decisions[address] = {
                        'action': 'exclude',
                        'reason': '–ò—Å–∫–ª—é—á–µ–Ω –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π',
                        'timestamp': datetime.now()
                    }
                    self.update_item_status(address, "‚ùå –ò—Å–∫–ª—é—á–µ–Ω")
            
            self.update_stats()
            logger.info("üë• –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def include_all(self):
        """–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞."""
        try:
            for duplicate_info in self.duplicates_data:
                address = duplicate_info.get('address')
                if address:
                    self.user_decisions[address] = {
                        'action': 'include',
                        'reason': '–í–∫–ª—é—á–µ–Ω –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π',
                        'timestamp': datetime.now()
                    }
                    self.update_item_status(address, "‚úÖ –í–∫–ª—é—á–µ–Ω")
            
            self.update_stats()
            logger.info("üë• –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def update_item_status(self, address: str, status_text: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞."""
        try:
            # –ü–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            for widget in self.dialog.winfo_children():
                self._find_and_update_status_label(widget, address, status_text)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def _find_and_update_status_label(self, widget, address: str, status_text: str):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
        try:
            if hasattr(widget, 'status_label'):
                status_label = widget.status_label
                if hasattr(status_label, 'address') and status_label.address == address:
                    status_label.configure(text=status_text)
                    return
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –≤–∏–¥–∂–µ—Ç–∞—Ö
            for child in widget.winfo_children():
                self._find_and_update_status_label(child, address, status_text)
                
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—à–µ–Ω–∏–π."""
        try:
            if hasattr(self, 'stats_label'):
                self.stats_label.configure(text=self.get_stats_text())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_stats_text(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            total = len(self.duplicates_data)
            decided = len(self.user_decisions)
            excluded = len([d for d in self.user_decisions.values() if d['action'] == 'exclude'])
            included = len([d for d in self.user_decisions.values() if d['action'] == 'include'])
            pending = total - decided
            
            return f"–í—Å–µ–≥–æ: {total} | –†–µ—à–µ–Ω–æ: {decided} | –ò—Å–∫–ª—é—á–µ–Ω–æ: {excluded} | –í–∫–ª—é—á–µ–Ω–æ: {included} | –û–∂–∏–¥–∞–µ—Ç: {pending}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    def on_apply(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã
            total_decisions = len(self.user_decisions)
            total_duplicates = len(self.duplicates_data)
            
            if total_decisions < total_duplicates:
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
                pending_count = total_duplicates - total_decisions
                
                confirm_dialog = ctk.CTkToplevel(self.dialog)
                confirm_dialog.title("‚ö†Ô∏è –ù–µ –≤—Å–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã")
                confirm_dialog.geometry("400x200")
                confirm_dialog.transient(self.dialog)
                confirm_dialog.grab_set()
                
                warning_label = ctk.CTkLabel(
                    confirm_dialog,
                    text=f"–û—Å—Ç–∞–µ—Ç—Å—è {pending_count} –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.\\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏?",
                    font=ctk.CTkFont(size=12),
                    wraplength=350
                )
                warning_label.pack(pady=30)
                
                buttons_frame = ctk.CTkFrame(confirm_dialog, fg_color="transparent")
                buttons_frame.pack(pady=20)
                
                yes_btn = ctk.CTkButton(
                    buttons_frame,
                    text="–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                    command=lambda: [confirm_dialog.destroy(), self._finalize_decisions()]
                )
                yes_btn.pack(side="left", padx=10)
                
                no_btn = ctk.CTkButton(
                    buttons_frame,
                    text="–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è",
                    command=confirm_dialog.destroy
                )
                no_btn.pack(side="left", padx=10)
                
                return
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
            self._finalize_decisions()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π: {e}")
    
    def _finalize_decisions(self):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π."""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.result = {
                'user_decisions': self.user_decisions,
                'excluded_addresses': [
                    addr for addr, decision in self.user_decisions.items()
                    if decision['action'] == 'exclude'
                ],
                'included_addresses': [
                    addr for addr, decision in self.user_decisions.items()
                    if decision['action'] == 'include'
                ],
                'total_duplicates': len(self.duplicates_data),
                'total_decisions': len(self.user_decisions),
                'timestamp': datetime.now()
            }
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            excluded_count = len(self.result['excluded_addresses'])
            included_count = len(self.result['included_addresses'])
            
            logger.info(f"‚úÖ –†–µ—à–µ–Ω–∏—è –ø–æ –¥—É–±–ª–∏–∫–∞—Ç–∞–º –ø—Ä–∏–Ω—è—Ç—ã: –∏—Å–∫–ª—é—á–µ–Ω–æ {excluded_count}, –≤–∫–ª—é—á–µ–Ω–æ {included_count}")
            
            # –í—ã–∑–æ–≤ callback
            if self.callback:
                threading.Thread(
                    target=self.callback,
                    args=(self.result,),
                    daemon=True
                ).start()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞
            self.dialog.destroy()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏–π: {e}")
    
    def on_cancel(self):
        """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
        try:
            logger.info("‚Ü©Ô∏è –î–∏–∞–ª–æ–≥ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã
            self.result = {
                'cancelled': True,
                'timestamp': datetime.now()
            }
            
            # –í—ã–∑–æ–≤ callback —Å –æ—Ç–º–µ–Ω–æ–π
            if self.callback:
                threading.Thread(
                    target=self.callback,
                    args=(self.result,),
                    daemon=True
                ).start()
            
            self.dialog.destroy()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞: {e}")
            if self.dialog:
                self.dialog.destroy()
    
    def center_dialog(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞."""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            self.dialog.update_idletasks()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–æ–Ω
            parent_x = self.parent.winfo_x()
            parent_y = self.parent.winfo_y()
            parent_width = self.parent.winfo_width()
            parent_height = self.parent.winfo_height()
            
            dialog_width = self.dialog.winfo_width()
            dialog_height = self.dialog.winfo_height()
            
            # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            x = parent_x + (parent_width // 2) - (dialog_width // 2)
            y = parent_y + (parent_height // 2) - (dialog_height // 2)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            self.dialog.geometry(f"{dialog_width}x{dialog_height}+{x}+{y}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")


def show_duplicate_warning(parent_window, duplicates_data: List[Dict[str, Any]], 
                          callback: Optional[Callable] = None) -> DuplicateWarningDialog:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö.
    
    Args:
        parent_window: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        duplicates_data: –î–∞–Ω–Ω—ã–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
        callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        
    Returns:
        DuplicateWarningDialog: –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        dialog = DuplicateWarningDialog(parent_window, duplicates_data, callback)
        return dialog
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
        raise


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['DuplicateWarningDialog', 'show_duplicate_warning']


if __name__ == "__main__":
    print("‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DuplicateWarningDialog...")
    print("üí° –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç—Ä–µ–±—É–µ—Ç CustomTkinter –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ")
    print("üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç —Å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º UI")
