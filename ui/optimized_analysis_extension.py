"""
PLEX Dynamic Staking Manager - Optimized Analysis Tab Extension
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ FullOptimizedAnalyzer –≤ UI.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import threading
import time
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any, Tuple

from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory
from core.full_optimized_analyzer import FullOptimizedAnalyzer
from core.duplicate_protection import DuplicateProtectionManager

logger = get_logger(__name__)


class OptimizedAnalysisExtension:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ UI.
    –≠–∫–æ–Ω–æ–º–∏—è 88.8% API –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ–±—ã—á–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º.
    """
    
    def __init__(self, analysis_tab):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.
        
        Args:
            analysis_tab: –≠–∫–∑–µ–º–ø–ª—è—Ä AnalysisTab
        """
        self.analysis_tab = analysis_tab
        self.optimized_analyzer = None
        self.duplicate_protection = None
        self.show_duplicate_warning = None
        
        self._init_optimized_analyzer()
        self._init_duplicate_protection()
        self._init_ui_components()
        
        logger.info("üöÄ OptimizedAnalysisExtension –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def _init_optimized_analyzer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
        try:
            if (self.analysis_tab.staking_manager and 
                hasattr(self.analysis_tab.staking_manager, 'web3_manager')):
                
                self.optimized_analyzer = FullOptimizedAnalyzer(
                    self.analysis_tab.staking_manager.web3_manager,
                    self.analysis_tab.staking_manager.swap_analyzer
                )
                logger.info("‚úÖ FullOptimizedAnalyzer –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ UI")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FullOptimizedAnalyzer: {e}")
    
    def _init_duplicate_protection(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
        try:
            if (self.analysis_tab.staking_manager and 
                hasattr(self.analysis_tab.staking_manager, 'web3_manager')):
                
                self.duplicate_protection = DuplicateProtectionManager(
                    self.analysis_tab.staking_manager.web3_manager
                )
                logger.info("üõ°Ô∏è DuplicateProtection –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ UI")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DuplicateProtection: {e}")
    
    def _init_ui_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        try:
            from ui.components.duplicate_warning_dialog import show_duplicate_warning
            self.show_duplicate_warning = show_duplicate_warning
            
            logger.info("‚úÖ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    
    def run_optimized_analysis_thread(self, period_start: datetime, period_end: datetime, min_volume: float) -> None:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        
        Args:
            period_start: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            period_end: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
        """
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def update_progress(value, message=""):
                if self.analysis_tab.analysis_running:
                    self.analysis_tab.after_idle(
                        lambda: self.analysis_tab.progress_bar.set_progress(value, message)
                    )
            
            # –†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞ –≤ –¥–Ω—è—Ö
            period_days = (period_end - period_start).days
            
            # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                analysis_result = loop.run_until_complete(
                    self.optimized_analyzer.run_optimized_full_analysis(
                        period_days=period_days,
                        progress_callback=update_progress
                    )
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if analysis_result and 'eligible_addresses' in analysis_result:
                    self._check_and_handle_duplicates(analysis_result)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                self._update_ui_with_results(analysis_result)
                
                logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
            finally:
                loop.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self._handle_analysis_error(e)
        finally:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            self.analysis_tab.after_idle(self._finish_analysis)
    
    def _check_and_handle_duplicates(self, analysis_result: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
        try:
            if not self.duplicate_protection:
                return
            
            eligible_addresses = analysis_result.get('eligible_addresses', [])
            if not eligible_addresses:
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            duplicates = self.duplicate_protection.check_duplicates(eligible_addresses)
            
            if duplicates:
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                
                # –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.analysis_tab.after_idle(
                    lambda: self._show_duplicate_warning_dialog(duplicates, analysis_result)
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
    
    def _show_duplicate_warning_dialog(self, duplicates: List[Dict], analysis_result: Dict[str, Any]):
        """–ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö."""
        try:
            if not self.show_duplicate_warning:
                return
            
            def handle_duplicate_decision(decision_result):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥—É–±–ª–∏–∫–∞—Ç–∞–º."""
                try:
                    if decision_result.get('cancelled'):
                        logger.info("‚Ü©Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                        return
                    
                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    excluded_addresses = decision_result.get('excluded_addresses', [])
                    
                    if excluded_addresses:
                        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        eligible_addresses = analysis_result.get('eligible_addresses', [])
                        filtered_addresses = [
                            addr for addr in eligible_addresses 
                            if addr not in excluded_addresses
                        ]
                        
                        analysis_result['eligible_addresses'] = filtered_addresses
                        analysis_result['excluded_duplicates'] = excluded_addresses
                        
                        logger.info(f"üõ°Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ {len(excluded_addresses)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    self._update_ui_with_results(analysis_result)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –ø–æ –¥—É–±–ª–∏–∫–∞—Ç–∞–º: {e}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
            parent_window = self.analysis_tab.winfo_toplevel()
            
            # –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞
            self.show_duplicate_warning(
                parent_window, 
                duplicates, 
                handle_duplicate_decision
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
    
    def _update_ui_with_results(self, analysis_result: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            if not analysis_result:
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_text = self._format_analysis_results(analysis_result)
            
            self.analysis_tab.after_idle(
                lambda: self.analysis_tab.results_textbox.delete("1.0", "end")
            )
            self.analysis_tab.after_idle(
                lambda: self.analysis_tab.results_textbox.insert("1.0", results_text)
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —ç–∫–æ–Ω–æ–º–∏–∏ API
            if 'credits_used' in analysis_result:
                savings_text = self._format_savings_metrics(analysis_result)
                self.analysis_tab.after_idle(
                    lambda: self.analysis_tab.results_textbox.insert("end", f"\n\n{savings_text}")
                )
            
            logger.info("‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: {e}")
    
    def _format_analysis_results(self, result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            eligible_count = len(result.get('eligible_addresses', []))
            total_reward = result.get('total_reward_amount', Decimal('0'))
            excluded_duplicates = len(result.get('excluded_duplicates', []))
            
            text = f"""üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê

‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤: {eligible_count:,}
üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥: {total_reward:,.2f} PLEX
üõ°Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {excluded_duplicates}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê:
‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('execution_time', 0):.1f} —Å–µ–∫—É–Ω–¥
üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–ª–æ–∫–æ–≤: {result.get('blocks_analyzed', 0):,}
üìà –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result.get('transactions_found', 0):,}
"""
            
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    
    def _format_savings_metrics(self, result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —ç–∫–æ–Ω–æ–º–∏–∏ API."""
        try:
            credits_used = result.get('credits_used', 0)
            estimated_without_optimization = result.get('estimated_without_optimization', 0)
            savings = estimated_without_optimization - credits_used
            savings_percent = (savings / estimated_without_optimization * 100) if estimated_without_optimization > 0 else 0
            
            text = f"""üí° –≠–ö–û–ù–û–ú–ò–Ø API –ö–†–ï–î–ò–¢–û–í:
üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {credits_used:,} –∫—Ä–µ–¥–∏—Ç–æ–≤
üîπ –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {estimated_without_optimization:,} –∫—Ä–µ–¥–∏—Ç–æ–≤
üîπ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {savings:,} –∫—Ä–µ–¥–∏—Ç–æ–≤
üîπ –≠–∫–æ–Ω–æ–º–∏—è: {savings_percent:.1f}%

üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏—Ç –¥–æ 88.8% API –∫—Ä–µ–¥–∏—Ç–æ–≤!"""
            
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —ç–∫–æ–Ω–æ–º–∏–∏: {e}")
            return ""
    
    def _handle_analysis_error(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {error}"
            
            self.analysis_tab.after_idle(
                lambda: self.analysis_tab.results_textbox.delete("1.0", "end")
            )
            self.analysis_tab.after_idle(
                lambda: self.analysis_tab.results_textbox.insert("1.0", error_message)
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _finish_analysis(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            self.analysis_tab.analysis_running = False
            self.analysis_tab.progress_bar.set_progress(100, "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞
            if hasattr(self.analysis_tab, 'start_analysis_button'):
                self.analysis_tab.start_analysis_button.configure(state="normal")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")


def patch_analysis_tab_with_optimization(analysis_tab):
    """
    –ü–∞—Ç—á–∏–Ω–≥ AnalysisTab –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
    
    Args:
        analysis_tab: –≠–∫–∑–µ–º–ø–ª—è—Ä AnalysisTab –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞
    """
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        extension = OptimizedAnalysisExtension(analysis_tab)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        analysis_tab.optimization_extension = extension
        
        # –ó–∞–º–µ–Ω–∞ –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        original_method = getattr(analysis_tab, 'run_analysis_thread', None)
        
        if original_method:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            analysis_tab._original_run_analysis_thread = original_method
            
            # –ó–∞–º–µ–Ω–∞ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            analysis_tab.run_analysis_thread = extension.run_optimized_analysis_thread
            
            logger.info("üîÑ AnalysisTab —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ run_analysis_thread –¥–ª—è –∑–∞–º–µ–Ω—ã")
        
        return extension
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∏–Ω–≥–∞ AnalysisTab: {e}")
        return None


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['OptimizedAnalysisExtension', 'patch_analysis_tab_with_optimization']


if __name__ == "__main__":
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è OptimizedAnalysisExtension...")
    print("üí° –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç FullOptimizedAnalyzer –≤ UI")
    print("üéØ –≠–∫–æ–Ω–æ–º–∏—è 88.8% API –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
