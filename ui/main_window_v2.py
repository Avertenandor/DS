"""
–ú–æ–¥—É–ª—å: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ PLEX Dynamic Staking Manager
–û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π ChatGPT –∏ –≤–∫–ª–∞–¥–æ—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import tkinter as tk
from typing import Dict, List, Optional, Callable
import threading
import queue
from datetime import datetime

try:
    import customtkinter as ctk
    UI_AVAILABLE = True
except ImportError:
    UI_AVAILABLE = False

from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory
from config.constants import *

logger = get_logger("PLEX_UI")

# ChatGPT Dark Theme Colors
UI_COLORS = {
    'bg_primary': '#212121',      # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω
    'bg_secondary': '#2A2A2A',    # –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ñ–æ–Ω  
    'bg_tertiary': '#333333',     # –¢—Ä–µ—Ç–∏—á–Ω—ã–π —Ñ–æ–Ω
    'accent': '#10A37F',          # –ó–µ–ª–µ–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç
    'accent_hover': '#0E8F6F',    # –ó–µ–ª–µ–Ω—ã–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    'text_primary': '#ECECEC',    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    'text_secondary': '#A0A0A0',  # –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    'error': '#EF4444',           # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
    'warning': '#F59E0B',         # –ñ–µ–ª—Ç—ã–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    'success': '#10B981',         # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —É—Å–ø–µ—Ö–∞
    'border': '#404040'           # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
}

class PLEXStakingUI:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ PLEX Dynamic Staking Manager"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI"""
        if not UI_AVAILABLE:
            raise ImportError("CustomTkinter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install customtkinter")
        
        self.logger = logger
        self.log_queue = queue.Queue()
        self.progress_callback = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("green")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = ctk.CTk()
        self.root.title("PLEX Dynamic Staking Manager v1.0.0")
        self.root.geometry("1400x900")
        self.root.configure(fg_color=UI_COLORS['bg_primary'])
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (1400 // 2)
        y = (self.root.winfo_screenheight() // 2) - (900 // 2)
        self.root.geometry(f"1400x900+{x}+{y}")
        
        # –î–∞–Ω–Ω—ã–µ
        self.current_analysis_results = None
        self.connection_status = False
        
        self.logger.info("üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        self._create_ui()
        self.logger.info("‚úÖ UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω")

    def _create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self._create_main_container()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self._create_status_bar()
        
        # –ñ–∏–≤—ã–µ –ª–æ–≥–∏
        self._create_log_viewer()

    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = ctk.CTkFrame(
            self.root,
            height=80,
            fg_color=UI_COLORS['bg_secondary'],
            corner_radius=0
        )
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        title_frame.pack(side="left", fill="y", padx=20)
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            title_frame,
            text="üöÄ PLEX Dynamic Staking Manager",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=UI_COLORS['text_primary']
        )
        title_label.pack(anchor="w", pady=(10, 0))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = ctk.CTkLabel(
            title_frame,
            text="Production-ready —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞",
            font=ctk.CTkFont(size=12),
            text_color=UI_COLORS['text_secondary']
        )
        subtitle_label.pack(anchor="w")
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        status_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        status_frame.pack(side="right", fill="y", padx=20)
        
        self.connection_label = ctk.CTkLabel(
            status_frame,
            text="üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            font=ctk.CTkFont(size=14),
            text_color=UI_COLORS['error']
        )
        self.connection_label.pack(pady=(20, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connect_btn = ctk.CTkButton(
            status_frame,
            text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
            command=self._test_connection,
            fg_color=UI_COLORS['accent'],
            hover_color=UI_COLORS['accent_hover'],
            width=120,
            height=32
        )
        self.connect_btn.pack(pady=(5, 0))

    def _create_main_container(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.main_frame = ctk.CTkFrame(
            self.root,
            fg_color=UI_COLORS['bg_primary']
        )
        self.main_frame.pack(fill="both", expand=True, padx=10, pady=(10, 0))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–æ–≤
        self.tabview = ctk.CTkTabview(
            self.main_frame,
            fg_color=UI_COLORS['bg_secondary'],
            segmented_button_fg_color=UI_COLORS['bg_tertiary'],
            segmented_button_selected_color=UI_COLORS['accent'],
            segmented_button_selected_hover_color=UI_COLORS['accent_hover'],
            text_color=UI_COLORS['text_primary']
        )
        self.tabview.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabview.add("üìä –ê–Ω–∞–ª–∏–∑")
        self.tabview.add("üèÜ –ù–∞–≥—Ä–∞–¥—ã") 
        self.tabview.add("ü§ù –ê–º–Ω–∏—Å—Ç–∏–∏")
        self.tabview.add("üìà –ò—Å—Ç–æ—Ä–∏—è")
        self.tabview.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self._create_analysis_tab()
        self._create_rewards_tab()
        self._create_amnesty_tab()
        self._create_history_tab()
        self._create_settings_tab()

    def _create_analysis_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        tab = self.tabview.tab("üìä –ê–Ω–∞–ª–∏–∑")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left_frame = ctk.CTkFrame(tab, width=350, fg_color=UI_COLORS['bg_secondary'])
        left_frame.pack(side="left", fill="y", padx=(0, 10), pady=0)
        left_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_label = ctk.CTkLabel(
            left_frame,
            text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=UI_COLORS['text_primary']
        )
        settings_label.pack(pady=(20, 10), padx=20)
        
        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        period_label = ctk.CTkLabel(
            left_frame,
            text="–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (–¥–Ω–∏):",
            font=ctk.CTkFont(size=12),
            text_color=UI_COLORS['text_secondary']
        )
        period_label.pack(pady=(10, 5), padx=20, anchor="w")
        
        self.period_entry = self.widget_factory.create_entry(
    left_frame,
    width=200,
    height=32
)
self.widget_factory.setup_placeholder(period_entry, "30")
        self.period_entry.pack(pady=(0, 10), padx=20)
        self.period_entry.insert(0, "30")
        
        # –§–∏–ª—å—Ç—Ä—ã
        filter_label = ctk.CTkLabel(
            left_frame,
            text="–§–∏–ª—å—Ç—Ä—ã:",
            font=ctk.CTkFont(size=12),
            text_color=UI_COLORS['text_secondary']
        )
        filter_label.pack(pady=(10, 5), padx=20, anchor="w")
        
        self.min_balance_var = ctk.StringVar(value="100")
        min_balance_frame = ctk.CTkFrame(left_frame, fg_color="transparent")
        min_balance_frame.pack(pady=5, padx=20, fill="x")
        
        ctk.CTkLabel(
            min_balance_frame,
            text="–ú–∏–Ω. –±–∞–ª–∞–Ω—Å PLEX:",
            text_color=UI_COLORS['text_secondary']
        ).pack(side="left")
        
        ctk.CTkEntry(
            min_balance_frame,
            textvariable=self.min_balance_var,
            width=80,
            height=24
        ).pack(side="right")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ctk.CTkFrame(left_frame, fg_color="transparent")
        buttons_frame.pack(pady=20, padx=20, fill="x")
        
        self.analyze_btn = ctk.CTkButton(
            buttons_frame,
            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
            command=self._start_analysis,
            fg_color=UI_COLORS['accent'],
            hover_color=UI_COLORS['accent_hover'],
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.analyze_btn.pack(fill="x", pady=(0, 10))
        
        self.export_btn = ctk.CTkButton(
            buttons_frame,
            text="üìÅ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            command=self._export_analysis,
            fg_color=UI_COLORS['bg_tertiary'],
            hover_color="#404040",
            height=32,
            state="disabled"
        )
        self.export_btn.pack(fill="x")
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        right_frame = ctk.CTkFrame(tab, fg_color=UI_COLORS['bg_secondary'])
        right_frame.pack(side="right", fill="both", expand=True, pady=0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_label = ctk.CTkLabel(
            right_frame,
            text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=UI_COLORS['text_primary']
        )
        results_label.pack(pady=(20, 10), padx=20)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_frame = ctk.CTkFrame(right_frame, fg_color=UI_COLORS['bg_tertiary'])
        self.stats_frame.pack(fill="x", padx=20, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–ª–∏—Ç–∫–∏
        stats_grid = ctk.CTkFrame(self.stats_frame, fg_color="transparent")
        stats_grid.pack(fill="x", padx=10, pady=10)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        row1 = ctk.CTkFrame(stats_grid, fg_color="transparent")
        row1.pack(fill="x", pady=(0, 5))
        
        self.total_participants_label = self._create_stat_tile(row1, "–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "0", "üë•")
        self.total_participants_label.pack(side="left", fill="x", expand=True, padx=(0, 5))
        
        self.perfect_participants_label = self._create_stat_tile(row1, "Perfect", "0", "‚ú®")
        self.perfect_participants_label.pack(side="left", fill="x", expand=True, padx=5)
        
        self.eligible_participants_label = self._create_stat_tile(row1, "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã", "0", "üéØ")
        self.eligible_participants_label.pack(side="left", fill="x", expand=True, padx=(5, 0))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_frame = ctk.CTkFrame(right_frame, fg_color=UI_COLORS['bg_tertiary'])
        self.progress_frame.pack(fill="x", padx=20, pady=(0, 10))
        
        self.progress_label = ctk.CTkLabel(
            self.progress_frame,
            text="–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É",
            text_color=UI_COLORS['text_secondary']
        )
        self.progress_label.pack(pady=(10, 5))
        
        self.progress_bar = ctk.CTkProgressBar(
            self.progress_frame,
            width=400,
            height=10,
            progress_color=UI_COLORS['accent']
        )
        self.progress_bar.pack(pady=(0, 10))
        self.progress_bar.set(0)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
        self.results_text = ctk.CTkTextbox(
            right_frame,
            font=ctk.CTkFont(family="Courier", size=11),
            fg_color=UI_COLORS['bg_primary'],
            text_color=UI_COLORS['text_primary']
        )
        self.results_text.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.results_text.insert("1.0", "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...\n\n")
        self.results_text.insert("end", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n")
        self.results_text.insert("end", "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞\n")
        self.results_text.insert("end", "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º (Perfect, Missed, Sold, Transferred)\n")
        self.results_text.insert("end", "‚Ä¢ –†–∞—Å—á–µ—Ç eligibility –∏ –Ω–∞–≥—Ä–∞–¥\n")
        self.results_text.insert("end", "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel/CSV\n")

    def _create_rewards_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏"""
        tab = self.tabview.tab("üèÜ –ù–∞–≥—Ä–∞–¥—ã")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            tab,
            text="üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=UI_COLORS['text_primary']
        )
        title_label.pack(pady=20)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        placeholder_label = ctk.CTkLabel(
            tab,
            text="üöß –ú–æ–¥—É–ª—å –Ω–∞–≥—Ä–∞–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
            font=ctk.CTkFont(size=16),
            text_color=UI_COLORS['text_secondary']
        )
        placeholder_label.pack(pady=50)

    def _create_amnesty_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–º–Ω–∏—Å—Ç–∏—è–º–∏"""
        tab = self.tabview.tab("ü§ù –ê–º–Ω–∏—Å—Ç–∏–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            tab,
            text="ü§ù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏—è–º–∏",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=UI_COLORS['text_primary']
        )
        title_label.pack(pady=20)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        placeholder_label = ctk.CTkLabel(
            tab,
            text="üöß –ú–æ–¥—É–ª—å –∞–º–Ω–∏—Å—Ç–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
            font=ctk.CTkFont(size=16),
            text_color=UI_COLORS['text_secondary']
        )
        placeholder_label.pack(pady=50)

    def _create_history_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        tab = self.tabview.tab("üìà –ò—Å—Ç–æ—Ä–∏—è")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            tab,
            text="üìà –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=UI_COLORS['text_primary']
        )
        title_label.pack(pady=20)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        placeholder_label = ctk.CTkLabel(
            tab,
            text="üöß –ú–æ–¥—É–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
            font=ctk.CTkFont(size=16),
            text_color=UI_COLORS['text_secondary']
        )
        placeholder_label.pack(pady=50)

    def _create_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        tab = self.tabview.tab("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            tab,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=UI_COLORS['text_primary']
        )
        title_label.pack(pady=20)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        placeholder_label = ctk.CTkLabel(
            tab,
            text="üöß –ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
            font=ctk.CTkFont(size=16),
            text_color=UI_COLORS['text_secondary']
        )
        placeholder_label.pack(pady=50)

    def _create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_frame = ctk.CTkFrame(
            self.root,
            height=30,
            fg_color=UI_COLORS['bg_tertiary'],
            corner_radius=0
        )
        self.status_frame.pack(fill="x", side="bottom", padx=0, pady=0)
        self.status_frame.pack_propagate(False)
        
        self.status_label = ctk.CTkLabel(
            self.status_frame,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=ctk.CTkFont(size=10),
            text_color=UI_COLORS['text_secondary']
        )
        self.status_label.pack(side="left", padx=10, pady=5)
        
        # –í—Ä–µ–º—è
        self.time_label = ctk.CTkLabel(
            self.status_frame,
            text=datetime.now().strftime("%H:%M:%S"),
            font=ctk.CTkFont(size=10),
            text_color=UI_COLORS['text_secondary']
        )
        self.time_label.pack(side="right", padx=10, pady=5)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self._update_time()

    def _create_log_viewer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –ª–æ–≥–æ–≤"""
        # –§—Ä–µ–π–º –ª–æ–≥–æ–≤ (—Å–≤–µ—Ä–Ω—É—Ç—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.log_frame = ctk.CTkFrame(
            self.root,
            height=0,  # –ù–∞—á–∞–ª—å–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç
            fg_color=UI_COLORS['bg_secondary']
        )
        self.log_frame.pack(fill="x", side="bottom", padx=10, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ª–æ–≥–∏
        self.toggle_logs_btn = ctk.CTkButton(
            self.status_frame,
            text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏",
            command=self._toggle_logs,
            width=100,
            height=20,
            fg_color="transparent",
            text_color=UI_COLORS['text_secondary']
        )
        self.toggle_logs_btn.pack(side="right", padx=(0, 10), pady=5)
        
        self.logs_visible = False

    def _create_stat_tile(self, parent, title: str, value: str, icon: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∏—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        tile = ctk.CTkFrame(parent, fg_color=UI_COLORS['bg_primary'])
        
        # –ò–∫–æ–Ω–∫–∞
        icon_label = ctk.CTkLabel(
            tile,
            text=icon,
            font=ctk.CTkFont(size=20)
        )
        icon_label.pack(pady=(10, 0))
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = ctk.CTkLabel(
            tile,
            text=value,
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=UI_COLORS['accent']
        )
        value_label.pack()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            tile,
            text=title,
            font=ctk.CTkFont(size=10),
            text_color=UI_COLORS['text_secondary']
        )
        title_label.pack(pady=(0, 10))
        
        return tile

    def _test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.connect_btn.configure(state="disabled", text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        
        def test():
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                import time
                time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                
                self.root.after(0, lambda: self._connection_success())
            except Exception as e:
                self.root.after(0, lambda: self._connection_failed(str(e)))
        
        threading.Thread(target=test, daemon=True).start()

    def _connection_success(self):
        """–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        self.connection_status = True
        self.connection_label.configure(
            text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC",
            text_color=UI_COLORS['success']
        )
        self.connect_btn.configure(
            state="normal",
            text="–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å",
            fg_color=UI_COLORS['success']
        )
        self._update_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    def _connection_failed(self, error: str):
        """–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.connection_status = False
        self.connection_label.configure(
            text="üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            text_color=UI_COLORS['error']
        )
        self.connect_btn.configure(
            state="normal",
            text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
            fg_color=UI_COLORS['error']
        )
        self._update_status(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error}")

    def _start_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if not self.connection_status:
            self._show_error("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            days = int(self.period_entry.get() or "30")
        except ValueError:
            self._show_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.analyze_btn.configure(state="disabled", text="–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω...")
        self.progress_bar.set(0)
        self._update_status("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        def analyze():
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                for i in range(101):
                    progress = i / 100
                    self.root.after(0, lambda p=progress: self._update_progress(p, f"–ê–Ω–∞–ª–∏–∑: {i}%"))
                    import time
                    time.sleep(0.05)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
                
                # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                results = {
                    'total_participants': 150,
                    'perfect': 45,
                    'eligible': 120,
                    'categories': {
                        'perfect': 45,
                        'missed_purchase': 60,
                        'transferred': 30,
                        'sold_token': 15
                    }
                }
                
                self.root.after(0, lambda: self._analysis_complete(results))
                
            except Exception as e:
                self.root.after(0, lambda: self._analysis_failed(str(e)))
        
        threading.Thread(target=analyze, daemon=True).start()

    def _update_progress(self, progress: float, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar.set(progress)
        self.progress_label.configure(text=message)
        self._update_status(message)

    def _analysis_complete(self, results: Dict):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        self.current_analysis_results = results
        self.analyze_btn.configure(state="normal", text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
        self.export_btn.configure(state="normal")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats(results)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._display_results(results)
        
        self.progress_bar.set(1.0)
        self.progress_label.configure(text="–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        self._update_status("–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

    def _analysis_failed(self, error: str):
        """–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        self.analyze_btn.configure(state="normal", text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
        self.progress_bar.set(0)
        self.progress_label.configure(text="–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
        self._update_status(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error}")
        self._show_error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error}")

    def _update_stats(self, results: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–ª–∏—Ç–∫–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total = results.get('total_participants', 0)
        perfect = results.get('perfect', 0)
        eligible = results.get('eligible', 0)
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å label'—ã –≤ –ø–ª–∏—Ç–∫–∞—Ö
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ label'—ã –∑–Ω–∞—á–µ–Ω–∏–π

    def _display_results(self, results: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        self.results_text.delete("1.0", "end")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.results_text.insert("end", "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –£–ß–ê–°–¢–ù–ò–ö–û–í\n")
        self.results_text.insert("end", "=" * 50 + "\n\n")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.results_text.insert("end", f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {results.get('total_participants', 0)}\n")
        self.results_text.insert("end", f"‚ú® Perfect —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {results.get('perfect', 0)}\n")
        self.results_text.insert("end", f"üéØ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {results.get('eligible', 0)}\n\n")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = results.get('categories', {})
        if categories:
            self.results_text.insert("end", "üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:\n")
            self.results_text.insert("end", "-" * 30 + "\n")
            
            for category, count in categories.items():
                emoji = {
                    'perfect': '‚ú®',
                    'missed_purchase': '‚è∞',
                    'transferred': 'üîÑ',
                    'sold_token': '‚ùå'
                }.get(category, 'üìã')
                
                percentage = (count / results.get('total_participants', 1)) * 100
                self.results_text.insert("end", f"{emoji} {category.replace('_', ' ').title()}: {count} ({percentage:.1f}%)\n")
        
        self.results_text.insert("end", "\n" + "=" * 50 + "\n")
        self.results_text.insert("end", f"‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    def _export_analysis(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.current_analysis_results:
            self._show_error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        self._show_info("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    def _toggle_logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ª–æ–≥–∏"""
        if self.logs_visible:
            self.log_frame.configure(height=0)
            self.toggle_logs_btn.configure(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
            self.logs_visible = False
        else:
            self.log_frame.configure(height=200)
            self.toggle_logs_btn.configure(text="üìÑ –°–∫—Ä—ã—Ç—å –ª–æ–≥–∏")
            self.logs_visible = True
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not hasattr(self, 'log_text'):
                self.log_text = ctk.CTkTextbox(
                    self.log_frame,
                    font=ctk.CTkFont(family="Courier", size=9),
                    fg_color=UI_COLORS['bg_primary'],
                    text_color=UI_COLORS['text_secondary']
                )
                self.log_text.pack(fill="both", expand=True, padx=10, pady=10)
                self.log_text.insert("1.0", "–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞...\n")

    def _update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ"""
        current_time = datetime.now().strftime("%H:%M:%S")
        self.time_label.configure(text=current_time)
        self.root.after(1000, self._update_time)

    def _update_status(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.configure(text=message)
        self.logger.info(f"UI Status: {message}")

    def _show_error(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É"""
        self._update_status(f"–û—à–∏–±–∫–∞: {message}")
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å popup
        self.logger.error(f"UI Error: {message}")

    def _show_info(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        self._update_status(message)
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å popup
        self.logger.info(f"UI Info: {message}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            self.root.after(1000, self._test_connection)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            self.root.mainloop()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UI: {e}")
            raise
        finally:
            self.logger.info("üîÑ UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    if UI_AVAILABLE:
        app = PLEXStakingUI()
        app.run()
    else:
        print("‚ùå CustomTkinter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install customtkinter")
