"""
PLEX Dynamic Staking Manager - Settings Tab
–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any, Tuple
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import customtkinter as ctk
import os
import json

from ui.themes.dark_theme import get_theme
from ui.components.progress_bar import ProgressBar, ProgressState
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class SettingsTab(ctk.CTkFrame):
    """
    –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É
    - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π
    - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    
    def __init__(self, parent, settings_manager=None, widget_factory=None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SettingsTab.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            settings_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä SettingsManager
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self.theme = get_theme()
        self.widget_factory = widget_factory or SafeWidgetFactory(self.theme)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ñ—Ä–µ–π–º–∞
        frame_style = self.theme.get_frame_style('primary')
        frame_style.update(kwargs)
        super().__init__(parent, **frame_style)
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_manager = settings_manager
        
        # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.current_settings = {}
        self.unsaved_changes = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        self._load_current_settings()
        
        logger.debug("‚öôÔ∏è SettingsTab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_widgets(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = self.theme.create_styled_label(
            self,
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            'title'
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._create_blockchain_settings()
        self._create_analysis_settings()
        self._create_logging_settings()
        self._create_backup_settings()
        self._create_interface_settings()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = self.theme.create_styled_frame(self, 'card')
        
        self.save_button = self.theme.create_styled_button(
            self.control_frame,
            "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            'success',
            command=self._save_settings,
            width=150        )
        
        self.reset_button = self.theme.create_styled_button(
            self.control_frame,
            "üîÑ –°–±—Ä–æ—Å–∏—Ç—å",
            'warning',
            command=self._reset_settings,
            width=120
        )
        
        self.factory_reset_button = self.theme.create_styled_button(
            self.control_frame,
            "üè≠ –ó–∞–≤–æ–¥—Å–∫–∏–µ",
            'danger',
            command=self._factory_reset,
            width=120
        )
        
        self.export_button = self.theme.create_styled_button(
            self.control_frame,
            "üì§ –≠–∫—Å–ø–æ—Ä—Ç",
            'info',
            command=self._export_settings,
            width=100
        )
        
        self.import_button = self.theme.create_styled_button(
            self.control_frame,
            "üì• –ò–º–ø–æ—Ä—Ç",
            'secondary',
            command=self._import_settings,
            width=100
        )
        
        # –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.status_frame = self.theme.create_styled_frame(self.control_frame, 'primary')
        
        self.changes_label = self.theme.create_styled_label(
            self.status_frame,
            "üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            'success'
        )
        self.changes_label.configure(text_color=self.theme.get_status_color('success'))
    
    def _create_blockchain_settings(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫—á–µ–π–Ω–∞."""
        self.blockchain_frame = self.theme.create_styled_frame(self, 'card')
        
        self.blockchain_title = self.theme.create_styled_label(
            self.blockchain_frame,
            "üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞",
            'subtitle'
        )
          # QuickNode RPC URL
        self.rpc_frame = self.theme.create_styled_frame(self.blockchain_frame, 'primary')
        
        self.rpc_label = self.theme.create_styled_label(
            self.rpc_frame,
            "üåê RPC Endpoint:",
            'primary'
        )
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ RPC –Ω–æ–¥—ã
        self.preset_rpc_frame = self.theme.create_styled_frame(self.rpc_frame, 'primary')
        
        self.preset_rpc_label = self.theme.create_styled_label(
            self.preset_rpc_frame,
            "üìã –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:",
            'secondary'
        )
        
        self.rpc_presets = {
            "QuickNode (–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)": os.getenv('QUICKNODE_HTTP', ''),
            "BSC Official RPC": "https://bsc-dataseed.binance.org/",
            "BSC RPC 1": "https://bsc-dataseed1.binance.org/",
            "BSC RPC 2": "https://bsc-dataseed2.binance.org/",
            "1RPC BSC": "https://1rpc.io/bnb",
            "Ankr BSC": "https://rpc.ankr.com/bsc",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π": ""
        }
        
        self.rpc_preset_var = ctk.StringVar(value="QuickNode (–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)")
        self.rpc_preset_menu = ctk.CTkOptionMenu(
            self.preset_rpc_frame,
            values=list(self.rpc_presets.keys()),
            variable=self.rpc_preset_var,
            command=self._on_rpc_preset_changed,
            **self.theme.get_button_style('secondary')
        )
        
        self.rpc_entry = self.theme.create_styled_entry(
            self.rpc_frame,
            placeholder="https://your-endpoint.bsc.quicknode.pro/...",
            width=400
        )
        self.rpc_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        self.test_connection_button = self.theme.create_styled_button(
            self.rpc_frame,
            "üîå –¢–µ—Å—Ç",
            'info',
            command=self._test_blockchain_connection,
            width=60
        )
        
        # –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.network_frame = self.theme.create_styled_frame(self.blockchain_frame, 'primary')
        
        self.network_label = self.theme.create_styled_label(
            self.network_frame,
            "üåç –°–µ—Ç—å:",
            'primary'
        )
        
        self.network_var = ctk.StringVar(value="BSC_MAINNET")
        self.network_menu = ctk.CTkOptionMenu(
            self.network_frame,
            values=["BSC Mainnet", "BSC Testnet"],
            variable=self.network_var,
            command=self._on_network_changed,
            **self.theme.get_button_style('secondary')
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.requests_frame = self.theme.create_styled_frame(self.blockchain_frame, 'primary')
        
        self.batch_size_label = self.theme.create_styled_label(
            self.requests_frame,
            "üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞:",
            'primary'
        )
        
        self.batch_size_entry = self.theme.create_styled_entry(
            self.requests_frame,
            placeholder="100",
            width=80
        )
        self.batch_size_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        self.timeout_label = self.theme.create_styled_label(
            self.requests_frame,
            "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç (—Å–µ–∫):",
            'primary'
        )
        
        self.timeout_entry = self.theme.create_styled_entry(
            self.requests_frame,
            placeholder="30",
            width=80
        )
        self.timeout_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        self.retries_label = self.theme.create_styled_label(
            self.requests_frame,
            "üîÑ –ü–æ–≤—Ç–æ—Ä—ã:",
            'primary'
        )
        
        self.retries_entry = self.theme.create_styled_entry(
            self.requests_frame,
            placeholder="3",
            width=80
        )
        self.retries_entry.bind('<KeyRelease>', self._on_setting_changed)
    
    def _create_analysis_settings(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏–∑–∞."""
        self.analysis_frame = self.theme.create_styled_frame(self, 'card')
        
        self.analysis_title = self.theme.create_styled_label(
            self.analysis_frame,
            "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞",
            'subtitle'
        )
        
        # –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        self.contracts_frame = self.theme.create_styled_frame(self.analysis_frame, 'primary')
        
        self.plex_contract_label = self.theme.create_styled_label(
            self.contracts_frame,
            "üíé –ö–æ–Ω—Ç—Ä–∞–∫—Ç PLEX:",
            'primary'
        )
        
        self.plex_contract_entry = self.theme.create_styled_entry(
            self.contracts_frame,
            placeholder="0x...",
            width=350
        )
        self.plex_contract_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        self.usdt_contract_label = self.theme.create_styled_label(
            self.contracts_frame,
            "üíµ –ö–æ–Ω—Ç—Ä–∞–∫—Ç USDT:",
            'primary'
        )
        
        self.usdt_contract_entry = self.theme.create_styled_entry(
            self.contracts_frame,
            placeholder="0x...",
            width=350
        )
        self.usdt_contract_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        self.params_frame = self.theme.create_styled_frame(self.analysis_frame, 'primary')
        
        self.min_volume_label = self.theme.create_styled_label(
            self.params_frame,
            "üí∞ –ú–∏–Ω. –æ–±—ä–µ–º (USD):",
            'primary'
        )
        
        self.min_volume_entry = self.theme.create_styled_entry(
            self.params_frame,
            placeholder="100",
            width=100
        )
        self.min_volume_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        self.max_participants_label = self.theme.create_styled_label(
            self.params_frame,
            "üë• –ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
            'primary'
        )
        
        self.max_participants_entry = self.theme.create_styled_entry(
            self.params_frame,
            placeholder="1000",
            width=100
        )
        self.max_participants_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cache_frame = self.theme.create_styled_frame(self.analysis_frame, 'primary')
        
        self.cache_enabled_var = ctk.BooleanVar(value=True)
        self.cache_enabled_switch = ctk.CTkSwitch(
            self.cache_frame,
            text="–í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
            variable=self.cache_enabled_var,
            command=self._on_setting_changed,
            **self.theme.get_switch_style()
        )
        
        self.cache_ttl_label = self.theme.create_styled_label(
            self.cache_frame,
            "‚è∞ TTL –∫—ç—à–∞ (–º–∏–Ω):",
            'primary'
        )
        
        self.cache_ttl_entry = self.theme.create_styled_entry(
            self.cache_frame,
            placeholder="60",
            width=80
        )
        self.cache_ttl_entry.bind('<KeyRelease>', self._on_setting_changed)
    
    def _create_logging_settings(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.logging_frame = self.theme.create_styled_frame(self, 'card')
        
        self.logging_title = self.theme.create_styled_label(
            self.logging_frame,
            "üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            'subtitle'
        )
        
        # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.log_level_frame = self.theme.create_styled_frame(self.logging_frame, 'primary')
        
        self.log_level_label = self.theme.create_styled_label(
            self.log_level_frame,
            "üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:",
            'primary'
        )
        
        self.log_level_var = ctk.StringVar(value="INFO")
        self.log_level_menu = ctk.CTkOptionMenu(
            self.log_level_frame,
            values=["DEBUG", "INFO", "WARNING", "ERROR"],
            variable=self.log_level_var,
            command=self._on_log_level_changed,
            **self.theme.get_button_style('secondary')
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
        self.log_file_frame = self.theme.create_styled_frame(self.logging_frame, 'primary')
        
        self.max_log_size_label = self.theme.create_styled_label(
            self.log_file_frame,
            "üìÅ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (MB):",
            'primary'
        )
        
        self.max_log_size_entry = self.theme.create_styled_entry(
            self.log_file_frame,
            placeholder="100",
            width=80
        )
        self.max_log_size_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        self.log_retention_label = self.theme.create_styled_label(
            self.log_file_frame,
            "üóÑÔ∏è –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ (–¥–Ω–µ–π):",
            'primary'
        )
        
        self.log_retention_entry = self.theme.create_styled_entry(
            self.log_file_frame,
            placeholder="30",
            width=80
        )
        self.log_retention_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.console_logging_var = ctk.BooleanVar(value=True)
        self.console_logging_switch = ctk.CTkSwitch(
            self.log_file_frame,
            text="–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å",
            variable=self.console_logging_var,
            command=self._on_setting_changed,
            **self.theme.get_switch_style()
        )
    
    def _create_backup_settings(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.backup_frame = self.theme.create_styled_frame(self, 'card')
        
        self.backup_title = self.theme.create_styled_label(
            self.backup_frame,
            "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
            'subtitle'
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.auto_backup_frame = self.theme.create_styled_frame(self.backup_frame, 'primary')
        
        self.auto_backup_var = ctk.BooleanVar(value=True)
        self.auto_backup_switch = ctk.CTkSwitch(
            self.auto_backup_frame,
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
            variable=self.auto_backup_var,
            command=self._on_setting_changed,
            **self.theme.get_switch_style()
        )
        
        self.backup_interval_label = self.theme.create_styled_label(
            self.auto_backup_frame,
            "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª (—á–∞—Å—ã):",
            'primary'
        )
        
        self.backup_interval_entry = self.theme.create_styled_entry(
            self.auto_backup_frame,
            placeholder="24",
            width=80
        )
        self.backup_interval_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        # –ü—É—Ç—å –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        self.backup_path_frame = self.theme.create_styled_frame(self.backup_frame, 'primary')
        
        self.backup_path_label = self.theme.create_styled_label(
            self.backup_path_frame,
            "üìÇ –ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤:",
            'primary'
        )
        
        self.backup_path_entry = self.theme.create_styled_entry(
            self.backup_path_frame,
            placeholder="./backups",
            width=300
        )
        self.backup_path_entry.bind('<KeyRelease>', self._on_setting_changed)
        
        self.browse_backup_button = self.theme.create_styled_button(
            self.backup_path_frame,
            "üìÅ",
            'secondary',
            command=self._browse_backup_path,
            width=40
        )
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤
        self.backup_retention_label = self.theme.create_styled_label(
            self.backup_path_frame,
            "üóÑÔ∏è –•—Ä–∞–Ω–∏—Ç—å –±—ç–∫–∞–ø—ã (–¥–Ω–µ–π):",
            'primary'
        )
        
        self.backup_retention_entry = self.theme.create_styled_entry(
            self.backup_path_frame,
            placeholder="7",
            width=80
        )
        self.backup_retention_entry.bind('<KeyRelease>', self._on_setting_changed)
    
    def _create_interface_settings(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.interface_frame = self.theme.create_styled_frame(self, 'card')
        
        self.interface_title = self.theme.create_styled_label(
            self.interface_frame,
            "üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            'subtitle'
        )
        
        # –¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.theme_frame = self.theme.create_styled_frame(self.interface_frame, 'primary')
        
        self.ui_theme_label = self.theme.create_styled_label(
            self.theme_frame,
            "üé® –¢–µ–º–∞:",
            'primary'
        )
        
        self.ui_theme_var = ctk.StringVar(value="dark")
        self.ui_theme_menu = ctk.CTkOptionMenu(
            self.theme_frame,
            values=["–¢–µ–º–Ω–∞—è", "–°–≤–µ—Ç–ª–∞—è", "–°–∏—Å—Ç–µ–º–Ω–∞—è"],
            variable=self.ui_theme_var,
            command=self._on_theme_changed,
            **self.theme.get_button_style('secondary')
        )
        
        # –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.language_label = self.theme.create_styled_label(
            self.theme_frame,
            "üåê –Ø–∑—ã–∫:",
            'primary'
        )
        
        self.language_var = ctk.StringVar(value="ru")
        self.language_menu = ctk.CTkOptionMenu(
            self.theme_frame,
            values=["–†—É—Å—Å–∫–∏–π", "English"],
            variable=self.language_var,
            command=self._on_language_changed,
            **self.theme.get_button_style('secondary')
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notifications_frame = self.theme.create_styled_frame(self.interface_frame, 'primary')
        
        self.notifications_var = ctk.BooleanVar(value=True)
        self.notifications_switch = ctk.CTkSwitch(
            self.notifications_frame,
            text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            variable=self.notifications_var,
            command=self._on_setting_changed,
            **self.theme.get_switch_style()
        )
        
        self.sound_notifications_var = ctk.BooleanVar(value=False)
        self.sound_notifications_switch = ctk.CTkSwitch(
            self.notifications_frame,
            text="–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            variable=self.sound_notifications_var,
            command=self._on_setting_changed,
            **self.theme.get_switch_style()
        )
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.autosave_var = ctk.BooleanVar(value=True)
        self.autosave_switch = ctk.CTkSwitch(
            self.notifications_frame,
            text="–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            variable=self.autosave_var,
            command=self._on_setting_changed,
            **self.theme.get_switch_style()
        )
    
    def _setup_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label.pack(pady=(20, 10))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.scrollable_frame = ctk.CTkScrollableFrame(
            self,
            **self.theme.get_frame_style('primary')
        )
        self.scrollable_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._setup_blockchain_layout()
        self._setup_analysis_layout()
        self._setup_logging_layout()
        self._setup_backup_layout()
        self._setup_interface_layout()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–µ –≤ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
        self.control_frame.pack(fill='x', padx=20, pady=(10, 20))
          # –°—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        buttons_frame = self.theme.create_styled_frame(self.control_frame, 'primary')
        buttons_frame.pack(fill='x', pady=10)
        
        self.save_button.pack(side='left', padx=(10, 10))
        self.reset_button.pack(side='left', padx=(0, 5))
        self.factory_reset_button.pack(side='left', padx=(0, 10))
        self.export_button.pack(side='right', padx=(10, 0))
        self.import_button.pack(side='right', padx=(10, 0))
        
        # –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.status_frame.pack(fill='x', pady=(5, 10))
        self.changes_label.pack()
    
    def _setup_blockchain_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ —Å–µ–∫—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞."""
        self.blockchain_frame.pack(fill='x', pady=(0, 10))
        
        self.blockchain_title.pack(pady=(15, 10))
          # RPC URL
        self.rpc_frame.pack(fill='x', padx=15, pady=5)
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ RPC
        self.preset_rpc_frame.pack(fill='x', pady=(0, 5))
        self.preset_rpc_label.pack(side='left', anchor='w')
        self.rpc_preset_menu.pack(side='left', padx=(10, 0))
        
        # RPC URL –ø–æ–ª–µ –≤–≤–æ–¥–∞
        rpc_row = self.theme.create_styled_frame(self.rpc_frame, 'primary')
        rpc_row.pack(fill='x', pady=5)
        
        self.rpc_label.pack(side='left', anchor='w')
        self.test_connection_button.pack(side='right', padx=(5, 0))
        self.rpc_entry.pack(side='right', padx=(10, 5))
        
        # –°–µ—Ç—å
        self.network_frame.pack(fill='x', padx=15, pady=5)
        
        network_row = self.theme.create_styled_frame(self.network_frame, 'primary')
        network_row.pack(fill='x', pady=5)
        
        self.network_label.pack(side='left')
        self.network_menu.pack(side='left', padx=(10, 0))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        self.requests_frame.pack(fill='x', padx=15, pady=(5, 15))
        
        requests_row = self.theme.create_styled_frame(self.requests_frame, 'primary')
        requests_row.pack(fill='x', pady=5)
        
        self.batch_size_label.pack(side='left')
        self.batch_size_entry.pack(side='left', padx=(10, 20))
        
        self.timeout_label.pack(side='left')
        self.timeout_entry.pack(side='left', padx=(10, 20))
        
        self.retries_label.pack(side='left')
        self.retries_entry.pack(side='left', padx=(10, 0))
    
    def _setup_analysis_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ —Å–µ–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        self.analysis_frame.pack(fill='x', pady=(0, 10))
        
        self.analysis_title.pack(pady=(15, 10))
        
        # –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        self.contracts_frame.pack(fill='x', padx=15, pady=5)
        
        plex_row = self.theme.create_styled_frame(self.contracts_frame, 'primary')
        plex_row.pack(fill='x', pady=2)
        
        self.plex_contract_label.pack(side='left', anchor='w')
        self.plex_contract_entry.pack(side='right', padx=(10, 0))
        
        usdt_row = self.theme.create_styled_frame(self.contracts_frame, 'primary')
        usdt_row.pack(fill='x', pady=2)
        
        self.usdt_contract_label.pack(side='left', anchor='w')
        self.usdt_contract_entry.pack(side='right', padx=(10, 0))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        self.params_frame.pack(fill='x', padx=15, pady=5)
        
        params_row = self.theme.create_styled_frame(self.params_frame, 'primary')
        params_row.pack(fill='x', pady=5)
        
        self.min_volume_label.pack(side='left')
        self.min_volume_entry.pack(side='left', padx=(10, 20))
        
        self.max_participants_label.pack(side='left')
        self.max_participants_entry.pack(side='left', padx=(10, 0))
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.cache_frame.pack(fill='x', padx=15, pady=(5, 15))
        
        cache_row1 = self.theme.create_styled_frame(self.cache_frame, 'primary')
        cache_row1.pack(fill='x', pady=2)
        
        self.cache_enabled_switch.pack(side='left')
        
        cache_row2 = self.theme.create_styled_frame(self.cache_frame, 'primary')
        cache_row2.pack(fill='x', pady=2)
        
        self.cache_ttl_label.pack(side='left')
        self.cache_ttl_entry.pack(side='left', padx=(10, 0))
    
    def _setup_logging_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ —Å–µ–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.logging_frame.pack(fill='x', pady=(0, 10))
        
        self.logging_title.pack(pady=(15, 10))
        
        # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.log_level_frame.pack(fill='x', padx=15, pady=5)
        
        log_level_row = self.theme.create_styled_frame(self.log_level_frame, 'primary')
        log_level_row.pack(fill='x', pady=5)
        
        self.log_level_label.pack(side='left')
        self.log_level_menu.pack(side='left', padx=(10, 0))
        
        # –§–∞–π–ª—ã –ª–æ–≥–æ–≤
        self.log_file_frame.pack(fill='x', padx=15, pady=(5, 15))
        
        log_file_row1 = self.theme.create_styled_frame(self.log_file_frame, 'primary')
        log_file_row1.pack(fill='x', pady=2)
        
        self.max_log_size_label.pack(side='left')
        self.max_log_size_entry.pack(side='left', padx=(10, 20))
        
        self.log_retention_label.pack(side='left')
        self.log_retention_entry.pack(side='left', padx=(10, 0))
        
        log_file_row2 = self.theme.create_styled_frame(self.log_file_frame, 'primary')
        log_file_row2.pack(fill='x', pady=2)
        
        self.console_logging_switch.pack(side='left')
    
    def _setup_backup_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ —Å–µ–∫—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.backup_frame.pack(fill='x', pady=(0, 10))
        
        self.backup_title.pack(pady=(15, 10))
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.auto_backup_frame.pack(fill='x', padx=15, pady=5)
        
        auto_backup_row1 = self.theme.create_styled_frame(self.auto_backup_frame, 'primary')
        auto_backup_row1.pack(fill='x', pady=2)
        
        self.auto_backup_switch.pack(side='left')
        
        auto_backup_row2 = self.theme.create_styled_frame(self.auto_backup_frame, 'primary')
        auto_backup_row2.pack(fill='x', pady=2)
        
        self.backup_interval_label.pack(side='left')
        self.backup_interval_entry.pack(side='left', padx=(10, 0))
        
        # –ü—É—Ç—å –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        self.backup_path_frame.pack(fill='x', padx=15, pady=(5, 15))
        
        backup_path_row1 = self.theme.create_styled_frame(self.backup_path_frame, 'primary')
        backup_path_row1.pack(fill='x', pady=2)
        
        self.backup_path_label.pack(side='left', anchor='w')
        self.browse_backup_button.pack(side='right', padx=(5, 0))
        self.backup_path_entry.pack(side='right', padx=(10, 5))
        
        backup_path_row2 = self.theme.create_styled_frame(self.backup_path_frame, 'primary')
        backup_path_row2.pack(fill='x', pady=2)
        
        self.backup_retention_label.pack(side='left')
        self.backup_retention_entry.pack(side='left', padx=(10, 0))
    
    def _setup_interface_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ —Å–µ–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.interface_frame.pack(fill='x', pady=(0, 10))
        
        self.interface_title.pack(pady=(15, 10))
        
        # –¢–µ–º–∞
        self.theme_frame.pack(fill='x', padx=15, pady=5)
        
        theme_row = self.theme.create_styled_frame(self.theme_frame, 'primary')
        theme_row.pack(fill='x', pady=2)
        
        self.ui_theme_label.pack(side='left')
        self.ui_theme_menu.pack(side='left', padx=(10, 20))
        
        self.language_label.pack(side='left')
        self.language_menu.pack(side='left', padx=(10, 0))
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notifications_frame.pack(fill='x', padx=15, pady=(5, 15))
        
        notif_row1 = self.theme.create_styled_frame(self.notifications_frame, 'primary')
        notif_row1.pack(fill='x', pady=2)
        
        self.notifications_switch.pack(side='left')
        
        notif_row2 = self.theme.create_styled_frame(self.notifications_frame, 'primary')
        notif_row2.pack(fill='x', pady=2)
        
        self.sound_notifications_switch.pack(side='left')
        
        notif_row3 = self.theme.create_styled_frame(self.notifications_frame, 'primary')
        notif_row3.pack(fill='x', pady=2)
        
        self.autosave_switch.pack(side='left')
    
    def _load_current_settings(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings_file = os.path.join(os.path.dirname(__file__), '..', '..', 'config', 'app_settings.json')
            
            if os.path.exists(settings_file):
                with open(settings_file, 'r', encoding='utf-8') as f:
                    self.current_settings = json.load(f)
            else:
                self.current_settings = self._get_default_settings()
              # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –≤–∏–¥–∂–µ—Ç–∞–º
            self._apply_settings_to_widgets()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.current_settings = self._get_default_settings()
            self._apply_settings_to_widgets()
    
    def _get_default_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞."""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
        env_vars = self._load_env_variables()
        
        return {
            'blockchain': {
                'rpc_url': env_vars.get('QUICKNODE_HTTP', ''),
                'wss_url': env_vars.get('QUICKNODE_WSS', ''),
                'api_key': env_vars.get('QUICKNODE_API_KEY', ''),
                'network': 'BSC_MAINNET',
                'batch_size': int(env_vars.get('MAX_BLOCKS_PER_CHUNK', 100)),
                'timeout': 30,
                'retries': 3
            },
            'analysis': {
                'plex_contract': env_vars.get('TOKEN_ADDRESS', '0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1'),
                'usdt_contract': env_vars.get('USDT_BSC', '0x55d398326f99059fF775485246999027B3197955'),
                'min_volume': float(env_vars.get('MIN_BALANCE', 100)),
                'max_participants': 1000,
                'cache_enabled': True,
                'cache_ttl': 60,
                'daily_purchase_min': float(env_vars.get('DAILY_PURCHASE_MIN', 2.8)),
                'daily_purchase_max': float(env_vars.get('DAILY_PURCHASE_MAX', 3.2))
            },
            'logging': {
                'level': env_vars.get('LOG_LEVEL', 'INFO'),
                'max_log_size': 100,
                'log_retention': 30,
                'console_logging': True,
                'log_file': env_vars.get('LOG_FILE', 'logs/plex_staking.log')
            },
            'backup': {
                'auto_backup': True,
                'backup_interval': 24,
                'backup_path': './backups',
                'backup_retention': 7
            },
            'interface': {
                'theme': env_vars.get('THEME', 'dark'),
                'language': 'ru',
                'notifications': True,
                'sound_notifications': False,
                'autosave': True
            }
        }
    
    def _load_env_variables(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞."""
        env_vars = {}
        env_file_path = os.path.join(os.path.dirname(__file__), '..', '..', '.env')
        
        try:
            if os.path.exists(env_file_path):
                with open(env_file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            env_vars[key.strip()] = value.strip()
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file_path}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: {e}")
        
        return env_vars

    def _apply_settings_to_widgets(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –≤–∏–¥–∂–µ—Ç–∞–º."""
        try:
            # –ë–ª–æ–∫—á–µ–π–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            blockchain = self.current_settings.get('blockchain', {})
            self.rpc_entry.delete(0, 'end')
            self.rpc_entry.insert(0, blockchain.get('rpc_url', ''))
            self.network_var.set(blockchain.get('network', 'BSC_MAINNET'))
            
            self.batch_size_entry.delete(0, 'end')
            self.batch_size_entry.insert(0, str(blockchain.get('batch_size', 100)))
            
            self.timeout_entry.delete(0, 'end')
            self.timeout_entry.insert(0, str(blockchain.get('timeout', 30)))
            
            self.retries_entry.delete(0, 'end')
            self.retries_entry.insert(0, str(blockchain.get('retries', 3)))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
            analysis = self.current_settings.get('analysis', {})
            self.plex_contract_entry.delete(0, 'end')
            self.plex_contract_entry.insert(0, analysis.get('plex_contract', ''))
            
            self.usdt_contract_entry.delete(0, 'end')
            self.usdt_contract_entry.insert(0, analysis.get('usdt_contract', ''))
            
            self.min_volume_entry.delete(0, 'end')
            self.min_volume_entry.insert(0, str(analysis.get('min_volume', 100)))
            
            self.max_participants_entry.delete(0, 'end')
            self.max_participants_entry.insert(0, str(analysis.get('max_participants', 1000)))
            
            self.cache_enabled_var.set(analysis.get('cache_enabled', True))
            
            self.cache_ttl_entry.delete(0, 'end')
            self.cache_ttl_entry.insert(0, str(analysis.get('cache_ttl', 60)))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            logging_settings = self.current_settings.get('logging', {})
            self.log_level_var.set(logging_settings.get('level', 'INFO'))
            
            self.max_log_size_entry.delete(0, 'end')
            self.max_log_size_entry.insert(0, str(logging_settings.get('max_log_size', 100)))
            
            self.log_retention_entry.delete(0, 'end')
            self.log_retention_entry.insert(0, str(logging_settings.get('log_retention', 30)))
            
            self.console_logging_var.set(logging_settings.get('console_logging', True))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            backup = self.current_settings.get('backup', {})
            self.auto_backup_var.set(backup.get('auto_backup', True))
            
            self.backup_interval_entry.delete(0, 'end')
            self.backup_interval_entry.insert(0, str(backup.get('backup_interval', 24)))
            
            self.backup_path_entry.delete(0, 'end')
            self.backup_path_entry.insert(0, backup.get('backup_path', './backups'))
            
            self.backup_retention_entry.delete(0, 'end')
            self.backup_retention_entry.insert(0, str(backup.get('backup_retention', 7)))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            interface = self.current_settings.get('interface', {})
            self.ui_theme_var.set(interface.get('theme', 'dark'))
            self.language_var.set(interface.get('language', 'ru'))
            self.notifications_var.set(interface.get('notifications', True))
            self.sound_notifications_var.set(interface.get('sound_notifications', False))
            self.autosave_var.set(interface.get('autosave', True))
            
            # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self.unsaved_changes = False
            self._update_changes_status()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def _on_setting_changed(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        self.unsaved_changes = True
        self._update_changes_status()
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.autosave_var.get():
            self.after_idle(self._save_settings)
    
    def _on_rpc_preset_changed(self, value: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ RPC."""
        if value in self.rpc_presets:
            preset_url = self.rpc_presets[value]
            if preset_url:
                self.rpc_entry.delete(0, 'end')
                self.rpc_entry.insert(0, preset_url)
                self._on_setting_changed()
    
    def _on_network_changed(self, value: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∏."""
        self._on_setting_changed()
    
    def _on_log_level_changed(self, value: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self._on_setting_changed()
    
    def _on_theme_changed(self, value: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã."""
        self._on_setting_changed()
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
    
    def _on_language_changed(self, value: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞."""
        self._on_setting_changed()
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    
    def _update_changes_status(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        if self.unsaved_changes:
            self.changes_label.configure(
                text="‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                text_color=self.theme.get_status_color('warning')
            )
        else:
            self.changes_label.configure(
                text="üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                text_color=self.theme.get_status_color('success')
            )
    
    def _save_settings(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            # –°–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤
            new_settings = {
                'blockchain': {
                    'rpc_url': self.rpc_entry.get(),
                    'network': self.network_var.get(),
                    'batch_size': int(self.batch_size_entry.get() or 100),
                    'timeout': int(self.timeout_entry.get() or 30),
                    'retries': int(self.retries_entry.get() or 3)
                },
                'analysis': {
                    'plex_contract': self.plex_contract_entry.get(),
                    'usdt_contract': self.usdt_contract_entry.get(),
                    'min_volume': float(self.min_volume_entry.get() or 100),
                    'max_participants': int(self.max_participants_entry.get() or 1000),
                    'cache_enabled': self.cache_enabled_var.get(),
                    'cache_ttl': int(self.cache_ttl_entry.get() or 60)
                },
                'logging': {
                    'level': self.log_level_var.get(),
                    'max_log_size': int(self.max_log_size_entry.get() or 100),
                    'log_retention': int(self.log_retention_entry.get() or 30),
                    'console_logging': self.console_logging_var.get()
                },
                'backup': {
                    'auto_backup': self.auto_backup_var.get(),
                    'backup_interval': int(self.backup_interval_entry.get() or 24),
                    'backup_path': self.backup_path_entry.get() or './backups',
                    'backup_retention': int(self.backup_retention_entry.get() or 7)
                },
                'interface': {
                    'theme': self.ui_theme_var.get(),
                    'language': self.language_var.get(),
                    'notifications': self.notifications_var.get(),
                    'sound_notifications': self.sound_notifications_var.get(),
                    'autosave': self.autosave_var.get()
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            settings_dir = os.path.join(os.path.dirname(__file__), '..', '..', 'config')
            os.makedirs(settings_dir, exist_ok=True)
            
            settings_file = os.path.join(settings_dir, 'app_settings.json')
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(new_settings, f, indent=2, ensure_ascii=False)
            
            self.current_settings = new_settings
            self.unsaved_changes = False
            self._update_changes_status()
            
            logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            if not self.autosave_var.get():
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\\n{e}")
    
    def _reset_settings(self) -> None:
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        try:
            result = messagebox.askquestion(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?\\n\\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
            )
            
            if result == 'yes':
                self.current_settings = self._get_default_settings()
                self._apply_settings_to_widgets()
                self._save_settings()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\\n{e}")
    
    def _factory_reset(self) -> None:
        """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫ –∑–∞–≤–æ–¥—Å–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º."""
        try:
            result = messagebox.askquestion(
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–≤–æ–¥—Å–∫–æ–π —Å–±—Ä–æ—Å",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ü–û–õ–ù–´–ô —Å–±—Ä–æ—Å –∫ –∑–∞–≤–æ–¥—Å–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º?\\n\\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\\n"
                "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\\n"
                "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞\\n"
                "‚Ä¢ –û—á–∏—Å—Ç–∏—Ç –∫—ç—à –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\\n\\n"
                "‚ö†Ô∏è –≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨!",
                icon='warning'
            )
            
            if result == 'yes':
                # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
                settings_file = os.path.join(os.path.dirname(__file__), '..', '..', 'config', 'app_settings.json')
                if os.path.exists(settings_file):
                    os.remove(settings_file)
                
                # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≤–æ–¥—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.current_settings = self._get_default_settings()
                self._apply_settings_to_widgets()
                self._save_settings()
                
                # –û–±–Ω–æ–≤–∏—Ç—å RPC preset
                if self.current_settings.get('blockchain', {}).get('rpc_url'):
                    self.rpc_preset_var.set("QuickNode (–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)")
                
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö", 
                    "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–∞–≤–æ–¥—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º!\\n\\n"
                    "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞."
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–≤–æ–¥—Å–∫–æ–π —Å–±—Ä–æ—Å:\\n{e}")

    def _export_settings(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª."""
        try:
            file_path = filedialog.asksaveasfilename(
                title="–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                defaultextension=".json",
                filetypes=[
                    ("JSON files", "*.json"),
                    ("All files", "*.*")
                ]
            )
            
            if not file_path:
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            export_data = {
                'settings': self.current_settings,
                'export_date': datetime.now().isoformat(),
                'version': '1.0.0'
            }
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\\n{file_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\\n{e}")
    
    def _import_settings(self) -> None:
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            file_path = filedialog.askopenfilename(
                title="–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                filetypes=[
                    ("JSON files", "*.json"),
                    ("All files", "*.*")
                ]
            )
            
            if not file_path:
                return
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                import_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            if 'settings' not in import_data:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
            result = messagebox.askquestion(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞?\\n\\n"
                "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!"
            )
            
            if result == 'yes':
                self.current_settings = import_data['settings']
                self._apply_settings_to_widgets()
                self._save_settings()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\\n{e}")
    
    def _test_blockchain_connection(self) -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É."""
        try:
            rpc_url = self.rpc_entry.get()
            if not rpc_url:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ RPC URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            self.test_connection_button.configure(state='disabled', text="...")
            
            def test_thread():
                import time
                time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
                # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                success = True  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                
                self.after_idle(lambda: self._test_connection_completed(success))
            
            threading.Thread(target=test_thread, daemon=True).start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self._test_connection_completed(False, str(e))
    
    def _test_connection_completed(self, success: bool, error: str = "") -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        self.test_connection_button.configure(state='normal', text="üîå –¢–µ—Å—Ç")
        
        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É —É—Å–ø–µ—à–Ω–æ!")
        else:
            error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É:\\n{error}" if error else "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
    
    def _browse_backup_path(self) -> None:
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π."""
        try:
            directory = filedialog.askdirectory(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π",
                initialdir=self.backup_path_entry.get() or "."
            )
            
            if directory:
                self.backup_path_entry.delete(0, 'end')
                self.backup_path_entry.insert(0, directory)
                self._on_setting_changed()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏: {e}")
    
    def get_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        return self.current_settings.copy()
    
    def set_settings_manager(self, settings_manager) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        self.settings_manager = settings_manager
        logger.debug("‚úÖ SettingsManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è SettingsTab")


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['SettingsTab']


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏
    def demo_settings_tab():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è SettingsTab."""
        try:
            print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è SettingsTab...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            root = ctk.CTk()
            root.title("PLEX Settings Tab Demo")
            root.geometry("1000x800")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
            from ui.themes.dark_theme import apply_window_style
            apply_window_style(root)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings_tab = SettingsTab(root)
            settings_tab.pack(fill='both', expand=True)
            
            print("‚úÖ SettingsTab –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            root.mainloop()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    # demo_settings_tab()
    print("üí° –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ SettingsTab —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
