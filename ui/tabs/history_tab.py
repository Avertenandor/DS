"""
PLEX Dynamic Staking Manager - History Tab
–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–π.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any, Tuple
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import customtkinter as ctk

from ui.themes.dark_theme import get_theme
from ui.components.progress_bar import ProgressBar, ProgressState
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class HistoryTab(ctk.CTkFrame):
    """
    –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
    - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç –Ω–∞–≥—Ä–∞–¥
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º –∏ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
    - –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
    - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    
    def __init__(self, parent, history_manager=None, widget_factory=None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HistoryTab.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            history_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä HistoryManager
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self.theme = get_theme()
        self.widget_factory = widget_factory or SafeWidgetFactory(self.theme)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ñ—Ä–µ–π–º–∞
        frame_style = self.theme.get_frame_style('primary')
        frame_style.update(kwargs)
        super().__init__(parent, **frame_style)
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        self.history_manager = history_manager
        
        # –î–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
        self.current_history = []
        self.filtered_history = []
        self.loading_history = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._load_initial_history()
        
        logger.debug("üìö HistoryTab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_widgets(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = self.theme.create_styled_label(
            self,
            "üìö –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
            'title'
        )
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.filters_frame = self.theme.create_styled_frame(self, 'card')
        
        self.filters_title = self.theme.create_styled_label(
            self.filters_frame,
            "üîç –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏",
            'subtitle'
        )
        
        # –ü–µ—Ä–∏–æ–¥
        self.period_frame = self.theme.create_styled_frame(self.filters_frame, 'primary')
        
        self.period_label = self.theme.create_styled_label(
            self.period_frame,
            "üìÖ –ü–µ—Ä–∏–æ–¥:",
            'primary'
        )
        
        self.period_var = ctk.StringVar(value="30d")
        self.period_options = ["24h", "7d", "30d", "90d", "all", "custom"]
        self.period_menu = ctk.CTkOptionMenu(
            self.period_frame,
            values=["24 —á–∞—Å–∞", "7 –¥–Ω–µ–π", "30 –¥–Ω–µ–π", "90 –¥–Ω–µ–π", "–í—Å—ë –≤—Ä–µ–º—è", "–ö–∞—Å—Ç–æ–º"],
            variable=self.period_var,
            command=self._on_period_changed,
            **self.theme.get_button_style('secondary')
        )
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        self.custom_period_frame = self.theme.create_styled_frame(self.period_frame, 'primary')
        
        self.start_date_label = self.theme.create_styled_label(
            self.custom_period_frame,
            "–û—Ç:",
            'secondary'
        )
        
        self.start_date_entry = self.theme.create_styled_entry(
            self.custom_period_frame,
            placeholder="YYYY-MM-DD",
            width=120
        )
        
        self.end_date_label = self.theme.create_styled_label(
            self.custom_period_frame,
            "–î–æ:",
            'secondary'
        )
        
        self.end_date_entry = self.theme.create_styled_entry(
            self.custom_period_frame,
            placeholder="YYYY-MM-DD",
            width=120
        )
        
        # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.operation_frame = self.theme.create_styled_frame(self.filters_frame, 'primary')
        
        self.operation_label = self.theme.create_styled_label(
            self.operation_frame,
            "üîß –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
            'primary'
        )
        
        self.operation_var = ctk.StringVar(value="all")
        self.operation_options = ["all", "analysis", "rewards", "export", "backup"]
        self.operation_menu = ctk.CTkOptionMenu(
            self.operation_frame,
            values=["–í—Å–µ", "–ê–Ω–∞–ª–∏–∑—ã", "–ù–∞–≥—Ä–∞–¥—ã", "–≠–∫—Å–ø–æ—Ä—Ç", "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"],
            variable=self.operation_var,
            command=self._on_filter_changed,
            **self.theme.get_button_style('secondary')
        )
        
        # –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.status_label = self.theme.create_styled_label(
            self.operation_frame,
            "üìä –°—Ç–∞—Ç—É—Å:",
            'primary'
        )
        
        self.status_var = ctk.StringVar(value="all")
        self.status_menu = ctk.CTkOptionMenu(
            self.operation_frame,
            values=["–í—Å–µ", "–£—Å–ø–µ—à–Ω–æ", "–û—à–∏–±–∫–∞", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"],
            variable=self.status_var,
            command=self._on_filter_changed,
            **self.theme.get_button_style('secondary')
        )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = self.theme.create_styled_frame(self.filters_frame, 'primary')
        
        self.refresh_button = self.theme.create_styled_button(
            self.control_frame,
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            'info',
            command=self._refresh_history,
            width=100
        )
        
        self.export_history_button = self.theme.create_styled_button(
            self.control_frame,
            "üíæ –≠–∫—Å–ø–æ—Ä—Ç",
            'secondary',
            command=self._export_history,
            width=100
        )
        
        self.clear_history_button = self.theme.create_styled_button(
            self.control_frame,
            "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            'danger',
            command=self._clear_history,
            width=100
        )
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.progress_bar = ProgressBar(
            self,
            **self.theme.get_progress_style()
        )
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_frame = self.theme.create_styled_frame(self, 'card')
        
        self.stats_title = self.theme.create_styled_label(
            self.stats_frame,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π",
            'subtitle'
        )
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_cards_frame = self.theme.create_styled_frame(self.stats_frame, 'primary')
        
        self.total_operations_card = self._create_stat_card(
            self.stats_cards_frame,
            "üìã –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π",
            "0",
            'info'
        )
        
        self.successful_operations_card = self._create_stat_card(
            self.stats_cards_frame,
            "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö",
            "0",
            'success'
        )
        
        self.failed_operations_card = self._create_stat_card(
            self.stats_cards_frame,
            "‚ùå –° –æ—à–∏–±–∫–∞–º–∏",
            "0",
            'error'
        )
        
        self.recent_activity_card = self._create_stat_card(
            self.stats_cards_frame,
            "üïí –ó–∞ 24—á",
            "0",
            'warning'
        )
        
        # –ü–∞–Ω–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏
        self.history_frame = self.theme.create_styled_frame(self, 'card')
        
        self.history_title = self.theme.create_styled_label(
            self.history_frame,
            "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
            'subtitle'
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        self.table_header = self.theme.create_styled_frame(self.history_frame, 'secondary')
        
        self.header_date = self.theme.create_styled_label(
            self.table_header,
            "–î–∞—Ç–∞",
            'primary'
        )
        
        self.header_type = self.theme.create_styled_label(
            self.table_header,
            "–¢–∏–ø",
            'primary'
        )
        
        self.header_description = self.theme.create_styled_label(
            self.table_header,
            "–û–ø–∏—Å–∞–Ω–∏–µ",
            'primary'
        )
        
        self.header_status = self.theme.create_styled_label(
            self.table_header,
            "–°—Ç–∞—Ç—É—Å",
            'primary'
        )
        
        self.header_duration = self.theme.create_styled_label(
            self.table_header,
            "–í—Ä–µ–º—è",
            'primary'
        )
        
        self.header_actions = self.theme.create_styled_label(
            self.table_header,
            "–î–µ–π—Å—Ç–≤–∏—è",
            'primary'
        )
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.table_scrollable = ctk.CTkScrollableFrame(
            self.history_frame,
            **self.theme.get_frame_style('primary')
        )
        
        # –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.details_frame = self.theme.create_styled_frame(self, 'card')
        
        self.details_title = self.theme.create_styled_label(
            self.details_frame,
            "üîç –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            'subtitle'
        )
        
        self.details_text = ctk.CTkTextbox(
            self.details_frame,
            height=200,
            **self.theme.get_text_style()
        )
        
        # –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.details_frame.pack_forget()
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.custom_period_frame.pack_forget()
    
    def _create_stat_card(self, parent, title: str, value: str, color_type: str) -> Dict[str, ctk.CTkLabel]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
            color_type: –¢–∏–ø —Ü–≤–µ—Ç–∞
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        """
        card_frame = self.theme.create_styled_frame(parent, 'card')
        
        title_label = self.theme.create_styled_label(
            card_frame,
            title,
            'secondary'
        )
        
        value_label = self.theme.create_styled_label(
            card_frame,
            value,
            'title'
        )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
        color = self.theme.get_status_color(color_type)
        value_label.configure(text_color=color)
        
        title_label.pack(pady=(10, 2))
        value_label.pack(pady=(2, 10))
        
        return {
            'frame': card_frame,
            'title': title_label,
            'value': value_label
        }
    
    def _setup_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label.pack(pady=(20, 10))
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.filters_frame.pack(fill='x', padx=20, pady=10)
        
        self.filters_title.pack(pady=(15, 10))
        
        # –ü–µ—Ä–∏–æ–¥
        self.period_frame.pack(fill='x', padx=15, pady=5)
        
        period_row = self.theme.create_styled_frame(self.period_frame, 'primary')
        period_row.pack(fill='x', pady=5)
        
        self.period_label.pack(side='left')
        self.period_menu.pack(side='left', padx=(10, 0))
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        self.custom_period_frame.pack(fill='x', pady=(5, 0))
        
        self.start_date_label.pack(side='left', padx=(0, 5))
        self.start_date_entry.pack(side='left', padx=(0, 20))
        self.end_date_label.pack(side='left', padx=(0, 5))
        self.end_date_entry.pack(side='left')
        
        # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.operation_frame.pack(fill='x', padx=15, pady=5)
        
        operation_row = self.theme.create_styled_frame(self.operation_frame, 'primary')
        operation_row.pack(fill='x', pady=5)
        
        self.operation_label.pack(side='left')
        self.operation_menu.pack(side='left', padx=(10, 20))
        
        self.status_label.pack(side='left')
        self.status_menu.pack(side='left', padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame.pack(fill='x', padx=15, pady=(10, 15))
        
        self.refresh_button.pack(side='left', padx=(0, 10))
        self.export_history_button.pack(side='left', padx=(0, 10))
        self.clear_history_button.pack(side='right')
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar.pack(fill='x', padx=20, pady=10)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_frame.pack(fill='x', padx=20, pady=10)
        
        self.stats_title.pack(pady=(15, 10))
        
        self.stats_cards_frame.pack(fill='x', padx=15, pady=5)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä—è–¥
        self.total_operations_card['frame'].pack(side='left', fill='x', expand=True, padx=(0, 5))
        self.successful_operations_card['frame'].pack(side='left', fill='x', expand=True, padx=5)
        self.failed_operations_card['frame'].pack(side='left', fill='x', expand=True, padx=5)
        self.recent_activity_card['frame'].pack(side='left', fill='x', expand=True, padx=(5, 0))
        
        # –ò—Å—Ç–æ—Ä–∏—è
        self.history_frame.pack(fill='both', expand=True, padx=20, pady=(0, 20))
        
        self.history_title.pack(pady=(15, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã        self.table_header.pack(fill='x', padx=15, pady=(0, 5))
        
        self.header_date.configure(width=140)
        self.header_date.pack(side='left')
        self.header_type.configure(width=100)
        self.header_type.pack(side='left')
        self.header_description.pack(side='left', fill='x', expand=True)
        self.header_status.configure(width=80)
        self.header_status.pack(side='left')
        self.header_duration.configure(width=80)
        self.header_duration.pack(side='left')
        self.header_actions.configure(width=100)
        self.header_actions.pack(side='left')
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞
        self.table_scrollable.pack(fill='both', expand=True, padx=15, pady=(5, 15))
        
        # –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.details_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        self.details_title.pack(pady=(15, 10))
        self.details_text.pack(fill='x', padx=15, pady=(0, 15))
    
    def _on_period_changed(self, value: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞."""
        if value == "–ö–∞—Å—Ç–æ–º":
            self.custom_period_frame.pack(fill='x', pady=(5, 0))
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            now = datetime.now()
            end_date = now.strftime('%Y-%m-%d')
            start_date = (now - timedelta(days=30)).strftime('%Y-%m-%d')
            
            self.start_date_entry.delete(0, 'end')
            self.start_date_entry.insert(0, start_date)
            self.end_date_entry.delete(0, 'end')
            self.end_date_entry.insert(0, end_date)
        else:
            self.custom_period_frame.pack_forget()
        
        self._apply_filters()
    
    def _on_filter_changed(self, value: str = None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        self._apply_filters()
    
    def _apply_filters(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∏—Å—Ç–æ—Ä–∏–∏."""
        if not self.current_history:
            return
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            period_type = self.period_var.get()
            operation_type = self.operation_var.get()
            status_filter = self.status_var.get()
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            start_date, end_date = self._get_date_range(period_type)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            filtered = []
            for item in self.current_history:
                item_date = item.get('timestamp')
                if not isinstance(item_date, datetime):
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
                if start_date and item_date < start_date:
                    continue
                if end_date and item_date > end_date:
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
                if operation_type != "all":
                    operation_mapping = {
                        "analysis": "analysis",
                        "rewards": "rewards",
                        "export": "export",
                        "backup": "backup"
                    }
                    if item.get('operation_type') != operation_mapping.get(operation_type):
                        continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
                if status_filter != "all":
                    status_mapping = {
                        "–£—Å–ø–µ—à–Ω–æ": "success",
                        "–û—à–∏–±–∫–∞": "error",
                        "–í –ø—Ä–æ—Ü–µ—Å—Å–µ": "in_progress"
                    }
                    if item.get('status') != status_mapping.get(status_filter):
                        continue
                
                filtered.append(item)
            
            self.filtered_history = filtered
            self._update_history_table()
            self._update_statistics()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def _get_date_range(self, period_type: str) -> Tuple[Optional[datetime], Optional[datetime]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
        try:
            now = datetime.now()
            
            if period_type == "–ö–∞—Å—Ç–æ–º":
                start_str = self.start_date_entry.get()
                end_str = self.end_date_entry.get()
                
                if start_str and end_str:
                    start_date = datetime.strptime(start_str, '%Y-%m-%d')
                    end_date = datetime.strptime(end_str, '%Y-%m-%d') + timedelta(days=1)
                    return start_date, end_date
                
                return None, None
            
            elif period_type == "24 —á–∞—Å–∞":
                return now - timedelta(hours=24), now
            elif period_type == "7 –¥–Ω–µ–π":
                return now - timedelta(days=7), now
            elif period_type == "30 –¥–Ω–µ–π":
                return now - timedelta(days=30), now
            elif period_type == "90 –¥–Ω–µ–π":
                return now - timedelta(days=90), now
            else:  # "–í—Å—ë –≤—Ä–µ–º—è"
                return None, None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {e}")
            return None, None
    
    def _load_initial_history(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
            self.current_history = self._create_demo_history()
            self.filtered_history = self.current_history
            self._update_history_table()
            self._update_statistics()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def _create_demo_history(self) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""
        import random
        
        history = []
        operations = [
            ("analysis", "–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞"),
            ("rewards", "–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥"),
            ("export", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
            ("backup", "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        ]
        
        statuses = ["success", "error", "in_progress"]
        
        for i in range(20):
            op_type, description = random.choice(operations)
            status = random.choice(statuses)
            
            # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if random.random() < 0.8:
                status = "success"
            
            timestamp = datetime.now() - timedelta(
                days=random.randint(0, 90),
                hours=random.randint(0, 23),
                minutes=random.randint(0, 59)
            )
            
            duration = random.randint(5, 300)  # —Å–µ–∫—É–Ω–¥—ã
            
            history.append({
                'id': f"op_{i+1}",
                'timestamp': timestamp,
                'operation_type': op_type,
                'description': description,
                'status': status,
                'duration': duration,
                'details': {
                    'participants_count': random.randint(10, 100) if op_type in ['analysis', 'rewards'] else None,
                    'total_amount': random.randint(1000, 50000) if op_type == 'rewards' else None,
                    'file_size': f"{random.randint(1, 10)}MB" if op_type in ['export', 'backup'] else None,
                    'error_message': "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É" if status == "error" else None
                }
            })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        history.sort(key=lambda x: x['timestamp'], reverse=True)
        
        return history
    
    def _refresh_history(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏."""
        if self.loading_history:
            return
        
        try:
            self.loading_history = True
            self.refresh_button.configure(state='disabled')
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.progress_bar.reset()
            self.progress_bar.set_indeterminate(True)
            self.progress_bar.start()
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def refresh_thread():
                import time
                time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                self.current_history = self._create_demo_history()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.after_idle(self._refresh_completed)
            
            threading.Thread(target=refresh_thread, daemon=True).start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            self._refresh_completed(success=False, error=str(e))
    
    def _refresh_completed(self, success: bool = True, error: str = "") -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏."""
        try:
            self.loading_history = False
            self.refresh_button.configure(state='normal')
            self.progress_bar.complete()
            
            if success:
                self._apply_filters()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é:\\n{error}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def _update_statistics(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
            total = len(self.filtered_history)
            self.total_operations_card['value'].configure(text=str(total))
            
            # –£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            successful = len([h for h in self.filtered_history if h.get('status') == 'success'])
            self.successful_operations_card['value'].configure(text=str(successful))
            
            # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
            failed = len([h for h in self.filtered_history if h.get('status') == 'error'])
            self.failed_operations_card['value'].configure(text=str(failed))
            
            # –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ 24 —á–∞—Å–∞
            recent_threshold = datetime.now() - timedelta(hours=24)
            recent = len([
                h for h in self.filtered_history 
                if h.get('timestamp') and h['timestamp'] > recent_threshold
            ])
            self.recent_activity_card['value'].configure(text=str(recent))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _update_history_table(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏."""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
            for widget in self.table_scrollable.winfo_children():
                widget.destroy()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
            for i, item in enumerate(self.filtered_history[:50]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self._create_history_row(item, i)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def _create_history_row(self, item: Dict[str, Any], index: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        try:
            # –§—Ä–µ–π–º —Å—Ç—Ä–æ–∫–∏
            row_style = 'secondary' if index % 2 == 0 else 'primary'
            row_frame = self.theme.create_styled_frame(self.table_scrollable, row_style)
            row_frame.pack(fill='x', pady=1)
            
            # –î–∞—Ç–∞
            timestamp = item.get('timestamp')
            if isinstance(timestamp, datetime):
                date_str = timestamp.strftime('%Y-%m-%d %H:%M')
            else:
                date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            date_label = self.theme.create_styled_label(
                row_frame,
                date_str,
                'primary'
            )
            
            # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π
            op_type = item.get('operation_type', 'unknown')
            type_icons = {
                'analysis': 'üìä',
                'rewards': 'üéÅ',
                'export': 'üíæ',
                'backup': 'üîÑ'
            }
            type_icon = type_icons.get(op_type, '‚ùì')
            
            type_label = self.theme.create_styled_label(
                row_frame,
                type_icon,
                'primary'
            )
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            description = item.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            description_label = self.theme.create_styled_label(
                row_frame,
                description[:50] + "..." if len(description) > 50 else description,
                'primary'
            )
            
            # –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–º
            status = item.get('status', 'unknown')
            status_colors = {
                'success': 'success',
                'error': 'error',
                'in_progress': 'warning'
            }
            status_color = status_colors.get(status, 'primary')
            
            status_icons = {
                'success': '‚úÖ',
                'error': '‚ùå',
                'in_progress': '‚è≥'
            }
            status_icon = status_icons.get(status, '‚ùì')
            
            status_label = self.theme.create_styled_label(
                row_frame,
                status_icon,
                'primary'
            )
            status_label.configure(text_color=self.theme.get_status_color(status_color))
            
            # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration = item.get('duration', 0)
            if duration < 60:
                duration_text = f"{duration}—Å"
            elif duration < 3600:
                duration_text = f"{duration//60}–º"
            else:
                duration_text = f"{duration//3600}—á"
            
            duration_label = self.theme.create_styled_label(
                row_frame,
                duration_text,
                'secondary'
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π
            details_button = self.theme.create_styled_button(
                row_frame,
                "üëÅÔ∏è",
                'info',
                command=lambda i=item: self._show_operation_details(i),
                width=30,
                height=25
            )
              # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            date_label.configure(width=140)
            date_label.pack(side='left', padx=(10, 5))
            type_label.configure(width=100)
            type_label.pack(side='left', padx=5)
            description_label.pack(side='left', fill='x', expand=True, padx=5, anchor='w')
            status_label.configure(width=80)
            status_label.pack(side='left', padx=5)
            duration_label.configure(width=80)
            duration_label.pack(side='left', padx=5)
            details_button.configure(width=100)
            details_button.pack(side='left', padx=(5, 10))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def _show_operation_details(self, item: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π
            self.details_frame.pack(fill='x', padx=20, pady=(0, 20))
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–µ—Ç–∞–ª–µ–π
            details_text = []
            details_text.append(f"üÜî ID –æ–ø–µ—Ä–∞—Ü–∏–∏: {item.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            details_text.append(f"üìÖ –í—Ä–µ–º—è: {item.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            details_text.append(f"üîß –¢–∏–ø: {item.get('operation_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            details_text.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            details_text.append(f"üìä –°—Ç–∞—Ç—É—Å: {item.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            details_text.append(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item.get('duration', 0)} —Å–µ–∫—É–Ω–¥")
            details_text.append("")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            details = item.get('details', {})
            if details:
                details_text.append("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                
                if details.get('participants_count'):
                    details_text.append(f"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {details['participants_count']}")
                
                if details.get('total_amount'):
                    details_text.append(f"  üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {details['total_amount']} PLEX")
                
                if details.get('file_size'):
                    details_text.append(f"  üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {details['file_size']}")
                
                if details.get('error_message'):
                    details_text.append(f"  ‚ùå –û—à–∏–±–∫–∞: {details['error_message']}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            self.details_text.delete("1.0", "end")
            self.details_text.insert("1.0", "\\n".join(details_text))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
    
    def _export_history(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π."""
        if not self.filtered_history:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        try:
            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = filedialog.asksaveasfilename(
                title="–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π",
                defaultextension=".csv",
                filetypes=[
                    ("CSV files", "*.csv"),
                    ("Excel files", "*.xlsx"),
                    ("JSON files", "*.json"),
                    ("All files", "*.*")
                ]
            )
            
            if not file_path:
                return
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if file_path.endswith('.csv'):
                self._export_history_to_csv(file_path)
            elif file_path.endswith('.xlsx'):
                self._export_history_to_excel(file_path)
            elif file_path.endswith('.json'):
                self._export_history_to_json(file_path)
            else:
                self._export_history_to_csv(file_path)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤:\\n{file_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\\n{e}")
    
    def _export_history_to_csv(self, file_path: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV —Ñ–æ—Ä–º–∞—Ç."""
        import csv
        
        with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'id', 'timestamp', 'operation_type', 'description', 
                'status', 'duration', 'participants_count', 'total_amount'
            ]
            
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for item in self.filtered_history:
                details = item.get('details', {})
                
                writer.writerow({
                    'id': item.get('id', ''),
                    'timestamp': item.get('timestamp', '').isoformat() if item.get('timestamp') else '',
                    'operation_type': item.get('operation_type', ''),
                    'description': item.get('description', ''),
                    'status': item.get('status', ''),
                    'duration': item.get('duration', 0),
                    'participants_count': details.get('participants_count', ''),
                    'total_amount': details.get('total_amount', '')
                })
    
    def _export_history_to_excel(self, file_path: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ Excel —Ñ–æ—Ä–º–∞—Ç."""
        try:
            import pandas as pd
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = []
            for item in self.filtered_history:
                details = item.get('details', {})
                
                data.append({
                    'ID': item.get('id', ''),
                    '–î–∞—Ç–∞': item.get('timestamp', ''),
                    '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏': item.get('operation_type', ''),
                    '–û–ø–∏—Å–∞–Ω–∏–µ': item.get('description', ''),
                    '–°—Ç–∞—Ç—É—Å': item.get('status', ''),
                    '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)': item.get('duration', 0),
                    '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤': details.get('participants_count', ''),
                    '–°—É–º–º–∞': details.get('total_amount', '')
                })
            
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            df = pd.DataFrame(data)
            df.to_excel(file_path, index=False, engine='openpyxl')
            
        except ImportError:
            # Fallback –Ω–∞ CSV –µ—Å–ª–∏ pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            self._export_history_to_csv(file_path.replace('.xlsx', '.csv'))
    
    def _export_history_to_json(self, file_path: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç."""
        import json
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ datetime
        def default_serializer(obj):
            if isinstance(obj, datetime):
                return obj.isoformat()
            raise TypeError(f"Object of type {type(obj)} is not JSON serializable")
        
        with open(file_path, 'w', encoding='utf-8') as jsonfile:
            json.dump(
                {
                    'history': self.filtered_history,
                    'export_time': datetime.now().isoformat(),
                    'total_operations': len(self.filtered_history)
                },
                jsonfile,
                indent=2,
                default=default_serializer,
                ensure_ascii=False
            )
    
    def _clear_history(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π."""
        try:
            result = messagebox.askquestion(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π?\\n\\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
            )
            
            if result == 'yes':
                self.current_history = []
                self.filtered_history = []
                self._update_history_table()
                self._update_statistics()
                
                # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π
                self.details_frame.pack_forget()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é:\\n{e}")
    
    def set_history_manager(self, history_manager) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏."""
        self.history_manager = history_manager
        logger.debug("‚úÖ HistoryManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è HistoryTab")


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['HistoryTab']


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏
    def demo_history_tab():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HistoryTab."""
        try:
            print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HistoryTab...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            root = ctk.CTk()
            root.title("PLEX History Tab Demo")
            root.geometry("1400x900")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
            from ui.themes.dark_theme import apply_window_style
            apply_window_style(root)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            history_tab = HistoryTab(root)
            history_tab.pack(fill='both', expand=True)
            
            print("‚úÖ HistoryTab –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            root.mainloop()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    # demo_history_tab()
    print("üí° –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ HistoryTab —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
