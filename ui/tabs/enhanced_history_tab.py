"""
PLEX Dynamic Staking Manager - Enhanced History Tab
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∫–Ω–æ–ø–æ–∫.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.1.0
"""

import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any, Tuple
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import customtkinter as ctk

from ui.themes.dark_theme import get_theme
from ui.components.progress_bar import ProgressBar, ProgressState
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class EnhancedHistoryTab(ctk.CTkFrame):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º –∏ —Ç–∏–ø–∞–º
    - –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
    - –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
    - –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
    - –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    
    def __init__(self, parent, history_manager=None, widget_factory=None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EnhancedHistoryTab.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            history_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä HistoryManager
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        super().__init__(parent, **kwargs)
        
        self.theme = get_theme()
        self.widget_factory = widget_factory or SafeWidgetFactory(self.theme)
        self.history_manager = history_manager
        
        # –î–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
        self.current_history = []
        self.filtered_history = []
        self.loading_history = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        
        logger.info("‚úÖ Enhanced HistoryTab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self.title_label = ctk.CTkLabel(
                self,
                text="üìö –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
                font=("Arial", 24, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ï–ô
            self.control_panel = self._create_control_panel()
            
            # –ü–ê–ù–ï–õ–¨ –§–ò–õ–¨–¢–†–û–í
            self.filter_panel = self._create_filter_panel()
            
            # –ü–†–û–ì–†–ï–°–°-–ë–ê–†
            self.progress_bar = ProgressBar(self)
            
            # –ü–ê–ù–ï–õ–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
            self.results_panel = self._create_results_panel()
            
            logger.debug("‚úÖ –í—Å–µ –≤–∏–¥–∂–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤: {e}")
            raise
    
    def _create_control_panel(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π."""
        panel = ctk.CTkFrame(self)
        panel.configure(fg_color=self.theme.colors['bg_secondary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        title = ctk.CTkLabel(
            panel,
            text="üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title.pack(pady=(15, 10))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(panel)
        buttons_frame.configure(fg_color="transparent")
        buttons_frame.pack(fill='x', padx=15, pady=10)
        
        # –†—è–¥ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        row1 = ctk.CTkFrame(buttons_frame)
        row1.configure(fg_color="transparent")
        row1.pack(fill='x', pady=5)
        
        self.load_history_btn = ctk.CTkButton(
            row1,
            text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            command=self._load_history,
            fg_color=self.theme.colors['btn_primary'],
            hover_color=self.theme.colors['btn_primary_hover'],
            font=("Arial", 12, "bold"),
            height=40,
            width=160
        )
        self.load_history_btn.pack(side='left', padx=(0, 10))
        
        self.refresh_btn = ctk.CTkButton(
            row1,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self._refresh_history,
            fg_color=self.theme.colors['info'],
            font=("Arial", 12, "bold"),
            height=40,
            width=120
        )
        self.refresh_btn.pack(side='left', padx=(0, 10))
        
        self.analyze_btn = ctk.CTkButton(
            row1,
            text="üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
            command=self._analyze_history,
            fg_color=self.theme.colors['plex_primary'],
            font=("Arial", 12, "bold"),
            height=40,
            width=140
        )
        self.analyze_btn.pack(side='left', padx=(0, 10))
        
        self.clear_btn = ctk.CTkButton(
            row1,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            command=self._clear_history,
            fg_color=self.theme.colors['btn_danger'],
            font=("Arial", 12, "bold"),
            height=40,
            width=120
        )
        self.clear_btn.pack(side='right')
        
        # –†—è–¥ 2: –≠–∫—Å–ø–æ—Ä—Ç –∏ —É—Ç–∏–ª–∏—Ç—ã
        row2 = ctk.CTkFrame(buttons_frame)
        row2.configure(fg_color="transparent")
        row2.pack(fill='x', pady=5)
        
        self.export_csv_btn = ctk.CTkButton(
            row2,
            text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV",
            command=self._export_csv,
            fg_color=self.theme.colors['success'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.export_csv_btn.pack(side='left', padx=(0, 10))
        
        self.export_excel_btn = ctk.CTkButton(
            row2,
            text="üìä –≠–∫—Å–ø–æ—Ä—Ç Excel",
            command=self._export_excel,
            fg_color=self.theme.colors['success'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.export_excel_btn.pack(side='left', padx=(0, 10))
        
        self.export_pdf_btn = ctk.CTkButton(
            row2,
            text="üìã –û—Ç—á–µ—Ç PDF",
            command=self._export_pdf_report,
            fg_color=self.theme.colors['success'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.export_pdf_btn.pack(side='left', padx=(0, 10))
        
        self.backup_btn = ctk.CTkButton(
            row2,
            text="üíæ –ë—ç–∫–∞–ø",
            command=self._create_backup,
            fg_color=self.theme.colors['warning'],
            font=("Arial", 12, "bold"),
            height=35,
            width=100
        )
        self.backup_btn.pack(side='right', padx=(10, 0))
        
        self.restore_btn = ctk.CTkButton(
            row2,
            text="üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            command=self._restore_backup,
            fg_color=self.theme.colors['info'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.restore_btn.pack(side='right')
        
        return panel
    
    def _create_filter_panel(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        panel = ctk.CTkFrame(self)
        panel.configure(fg_color=self.theme.colors['bg_secondary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            panel,
            text="üîç –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title.pack(pady=(15, 10))
        
        # –§–∏–ª—å—Ç—Ä—ã –≤ —Å–µ—Ç–∫–µ
        filters_grid = ctk.CTkFrame(panel)
        filters_grid.configure(fg_color="transparent")
        filters_grid.pack(fill='x', padx=15, pady=10)
        
        # –†—è–¥ 1: –ü–æ–∏—Å–∫ –∏ –ø–µ—Ä–∏–æ–¥
        search_frame = ctk.CTkFrame(filters_grid)
        search_frame.configure(fg_color="transparent")
        search_frame.pack(fill='x', pady=5)
        
        # –ü–æ–∏—Å–∫
        ctk.CTkLabel(
            search_frame,
            text="üîç –ü–æ–∏—Å–∫:",
            text_color=self.theme.colors['text_secondary'],
            font=("Arial", 12, "bold")        ).pack(side='left')
        
        self.search_entry = self.widget_factory.create_entry(
            search_frame,
            width=300
        )
        self.widget_factory.setup_placeholder(self.search_entry, "–ê–¥—Ä–µ—Å, —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ç–∏–ø...")
        self.search_entry.pack(side='left', padx=(10, 20))
        
        self.search_btn = ctk.CTkButton(
            search_frame,
            text="üîç",
            command=self._apply_search,
            fg_color=self.theme.colors['btn_primary'],
            width=40,
            height=30
        )
        self.search_btn.pack(side='left', padx=(0, 20))
        
        # –ü–µ—Ä–∏–æ–¥
        ctk.CTkLabel(
            search_frame,
            text="üìÖ –ü–µ—Ä–∏–æ–¥:",
            text_color=self.theme.colors['text_secondary'],
            font=("Arial", 12, "bold")
        ).pack(side='left')
        
        self.period_var = ctk.StringVar(value="7d")
        self.period_menu = ctk.CTkOptionMenu(
            search_frame,
            values=["1h", "6h", "24h", "7d", "30d", "90d", "all"],
            variable=self.period_var,
            command=self._on_period_change,
            fg_color=self.theme.colors['input_bg'],
            button_color=self.theme.colors['btn_primary'],
            width=100
        )
        self.period_menu.pack(side='left', padx=10)
        
        # –†—è–¥ 2: –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        types_frame = ctk.CTkFrame(filters_grid)
        types_frame.configure(fg_color="transparent")
        types_frame.pack(fill='x', pady=5)
        
        ctk.CTkLabel(
            types_frame,
            text="üìù –¢–∏–ø—ã:",
            text_color=self.theme.colors['text_secondary'],
            font=("Arial", 12, "bold")
        ).pack(side='left')
        
        # –ß–µ–∫–±–æ–∫—Å—ã —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.operation_types = {}
        types = [
            ("stake", "–°—Ç–µ–π–∫–∏–Ω–≥"),
            ("unstake", "–ê–Ω—Å—Ç–µ–π–∫–∏–Ω–≥"),
            ("reward", "–ù–∞–≥—Ä–∞–¥—ã"),
            ("transfer", "–ü–µ—Ä–µ–≤–æ–¥—ã"),
            ("swap", "–û–±–º–µ–Ω—ã")
        ]
        
        types_checkboxes = ctk.CTkFrame(types_frame)
        types_checkboxes.configure(fg_color="transparent")
        types_checkboxes.pack(side='left', padx=(10, 20))
        
        for type_key, type_name in types:
            var = ctk.BooleanVar(value=True)
            self.operation_types[type_key] = var
            
            checkbox = ctk.CTkCheckBox(
                types_checkboxes,
                text=type_name,
                variable=var,
                command=self._apply_filters,
                text_color=self.theme.colors['text_secondary']
            )
            checkbox.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filter_controls = ctk.CTkFrame(types_frame)
        filter_controls.configure(fg_color="transparent")
        filter_controls.pack(side='right')
        
        self.select_all_btn = ctk.CTkButton(
            filter_controls,
            text="‚úÖ –í—Å–µ",
            command=self._select_all_types,
            fg_color=self.theme.colors['btn_secondary'],
            width=60,
            height=25
        )
        self.select_all_btn.pack(side='left', padx=2)
        
        self.select_none_btn = ctk.CTkButton(
            filter_controls,
            text="‚ùå –ù–∏—á–µ–≥–æ",
            command=self._select_no_types,
            fg_color=self.theme.colors['btn_secondary'],
            width=70,
            height=25
        )
        self.select_none_btn.pack(side='left', padx=2)
        
        self.reset_filters_btn = ctk.CTkButton(
            filter_controls,
            text="üîÑ –°–±—Ä–æ—Å",
            command=self._reset_filters,
            fg_color=self.theme.colors['warning'],
            width=60,
            height=25
        )
        self.reset_filters_btn.pack(side='left', padx=2)
        
        return panel
    
    def _create_results_panel(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        panel = ctk.CTkFrame(self)
        panel.configure(fg_color=self.theme.colors['bg_secondary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        header = ctk.CTkFrame(panel)
        header.configure(fg_color="transparent")
        header.pack(fill='x', padx=15, pady=(15, 10))
        
        title = ctk.CTkLabel(
            header,
            text="üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title.pack(side='left')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
        self.count_label = ctk.CTkLabel(
            header,
            text="–ó–∞–ø–∏—Å–µ–π: 0",
            font=("Arial", 12),
            text_color=self.theme.colors['text_secondary']
        )
        self.count_label.pack(side='left', padx=(20, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        display_controls = ctk.CTkFrame(header)
        display_controls.configure(fg_color="transparent")
        display_controls.pack(side='right')
        
        self.sort_by_var = ctk.StringVar(value="date_desc")
        self.sort_menu = ctk.CTkOptionMenu(
            display_controls,
            values=["–î–∞—Ç–∞ ‚Üì", "–î–∞—Ç–∞ ‚Üë", "–°—É–º–º–∞ ‚Üì", "–°—É–º–º–∞ ‚Üë", "–¢–∏–ø"],
            variable=self.sort_by_var,
            command=self._apply_sorting,
            fg_color=self.theme.colors['btn_secondary'],
            width=120
        )
        self.sort_menu.pack(side='left', padx=(0, 10))
        
        self.view_mode_btn = ctk.CTkButton(
            display_controls,
            text="üìã –†–µ–∂–∏–º",
            command=self._toggle_view_mode,
            fg_color=self.theme.colors['btn_secondary'],
            width=80,
            height=30
        )
        self.view_mode_btn.pack(side='left')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.stats_frame = ctk.CTkFrame(panel)
        self.stats_frame.configure(fg_color=self.theme.colors['bg_tertiary'])
        self.stats_frame.pack(fill='x', padx=15, pady=10)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._create_history_stats_cards()
        
        # –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.history_list_frame = ctk.CTkFrame(panel)
        self.history_list_frame.configure(fg_color=self.theme.colors['bg_tertiary'])
        self.history_list_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
        self.history_placeholder = ctk.CTkLabel(
            self.history_list_frame,
            text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
            font=("Arial", 14),
            text_color=self.theme.colors['text_muted']
        )
        self.history_placeholder.pack(expand=True, pady=50)
        
        return panel
    
    def _create_history_stats_cards(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏."""
        stats_data = [
            ("üìú", "–û–ø–µ—Ä–∞—Ü–∏–π", "0", "info"),
            ("üí∞", "–û–±—â–∏–π –æ–±—ä–µ–º", "0.0 PLEX", "success"),
            ("üéÅ", "–ù–∞–≥—Ä–∞–¥", "0.0 PLEX", "plex_primary"),
            ("‚è±Ô∏è", "–ü–æ—Å–ª–µ–¥–Ω—è—è", "–ù–∏–∫–æ–≥–¥–∞", "warning")
        ]
        
        for icon, title, value, color in stats_data:
            card = ctk.CTkFrame(self.stats_frame)
            card.configure(fg_color=self.theme.colors['bg_primary'])
            card.pack(side='left', fill='x', expand=True, padx=5, pady=10)
            
            ctk.CTkLabel(
                card,
                text=icon,
                font=("Arial", 20)
            ).pack(pady=(10, 0))
            
            ctk.CTkLabel(
                card,
                text=title,
                font=("Arial", 11),
                text_color=self.theme.colors['text_secondary']
            ).pack()
            
            ctk.CTkLabel(
                card,
                text=value,
                font=("Arial", 14, "bold"),
                text_color=self.theme.colors[color] if color in self.theme.colors else self.theme.colors['text_primary']
            ).pack(pady=(0, 10))
    
    def _setup_layout(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid weights
            self.grid_rowconfigure(4, weight=1)  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—Ç—Å—è
            self.grid_columnconfigure(0, weight=1)
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.title_label.grid(row=0, column=0, pady=(20, 10), sticky="ew")
            self.control_panel.grid(row=1, column=0, padx=20, pady=10, sticky="ew")
            self.filter_panel.grid(row=2, column=0, padx=20, pady=10, sticky="ew")
            self.progress_bar.grid(row=3, column=0, padx=20, pady=10, sticky="ew")
            self.results_panel.grid(row=4, column=0, padx=20, pady=(0, 20), sticky="nsew")
            
            logger.debug("‚úÖ Layout –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ layout: {e}")
    
    # –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    def _load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏."""
        logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...")
        
        self.load_history_btn.configure(state="disabled")
        self._simulate_loading()
    
    def _simulate_loading(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏."""
        def run_loading():
            try:
                self.loading_history = True
                
                for i in range(101):
                    if not self.loading_history:
                        break
                    
                    progress = i / 100
                    message = f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏... {i}%"
                    
                    self.after(0, lambda p=progress, m=message: self.progress_bar.set_progress(p, m))
                    threading.Event().wait(0.02)
                
                if self.loading_history:
                    self.after(0, self._loading_completed)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                self.after(0, self._reset_loading)
        
        thread = threading.Thread(target=run_loading, daemon=True)
        thread.start()
    
    def _loading_completed(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏."""
        logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        self.loading_history = False
        self.load_history_btn.configure(state="normal")
        
        self.progress_bar.set_progress(1.0, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        self.count_label.configure(text="–ó–∞–ø–∏—Å–µ–π: 1,234")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏
        self.history_placeholder.configure(
            text="‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ 1,234 –æ–ø–µ—Ä–∞—Ü–∏–π\\nüìä –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
        )
    
    def _refresh_history(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏."""
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...")
        messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–æ", "–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
    def _analyze_history(self):
        """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏."""
        logger.info("üìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏...")
        messagebox.showinfo("–ê–Ω–∞–ª–∏–∑", "–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\\n\\n–ù–∞–π–¥–µ–Ω–æ:\\n- 45 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤\\n- 156 –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ç–µ–π–∫–∏–Ω–≥–∞\\n- 89 –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–≤–æ–¥–∞")
    
    def _clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏."""
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é?")
        if result:
            logger.info("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
            self.count_label.configure(text="–ó–∞–ø–∏—Å–µ–π: 0")
            self.history_placeholder.configure(
                text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"
            )
    
    def _export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV."""
        logger.info("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...")
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ CSV!")
    
    def _export_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel."""
        logger.info("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel...")
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ Excel!")
    
    def _export_pdf_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ PDF."""
        logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞...")
        messagebox.showinfo("–û—Ç—á–µ—Ç", "PDF –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!")
    
    def _create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞."""
        logger.info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
        messagebox.showinfo("–ë—ç–∫–∞–ø", "–ë—ç–∫–∞–ø –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω!")
    
    def _restore_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞."""
        logger.info("üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞...")
        messagebox.showinfo("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞!")
    
    def _apply_search(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞."""
        search_text = self.search_entry.get()
        logger.info(f"üîç –ü–æ–∏—Å–∫: {search_text}")
        messagebox.showinfo("–ü–æ–∏—Å–∫", f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_text}'")
    
    def _on_period_change(self, value):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞."""
        logger.debug(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {value}")
        self._apply_filters()
    
    def _apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        logger.debug("üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
    
    def _select_all_types(self):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π."""
        for var in self.operation_types.values():
            var.set(True)
        self._apply_filters()
    
    def _select_no_types(self):
        """–°–Ω—è—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤."""
        for var in self.operation_types.values():
            var.set(False)
        self._apply_filters()
    
    def _reset_filters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        logger.info("üîÑ –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        self.search_entry.delete(0, "end")
        self.period_var.set("7d")
        self._select_all_types()
    
    def _apply_sorting(self, value):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
        logger.debug(f"üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {value}")
    
    def _toggle_view_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        logger.info("üìã –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        messagebox.showinfo("–†–µ–∂–∏–º", "–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω!")
    
    def _reset_loading(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏."""
        self.loading_history = False
        self.load_history_btn.configure(state="normal")
    
    def set_history_manager(self, history_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏."""
        self.history_manager = history_manager
        logger.info("‚úÖ HistoryManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Enhanced HistoryTab")
