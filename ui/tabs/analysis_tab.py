"""
PLEX Dynamic Staking Manager - Analysis Tab
–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any, Tuple
import tkinter as tk
from tkinter import messagebox, filedialog
import customtkinter as ctk

from ui.themes.dark_theme import get_theme
from ui.components.progress_bar import ProgressBar, ProgressState
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory
from core.full_optimized_analyzer import FullOptimizedAnalyzer

logger = get_logger(__name__)


class AnalysisTab(ctk.CTkFrame):
    """
    –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    - –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    
    def __init__(self, parent, staking_manager=None, widget_factory=None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AnalysisTab.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            staking_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä StakingManager
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        super().__init__(parent, **kwargs)
        
        self.theme = get_theme()
        self.widget_factory = widget_factory or SafeWidgetFactory(self.theme)
        self.staking_manager = staking_manager
          # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.analysis_running = False
        self.current_analysis_result = None
        self.full_analyzer = None
        self.filtered_participants = []
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            self.full_analyzer = None
            logger.debug("FullOptimizedAnalyzer –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ FullOptimizedAnalyzer: {e}")
        
        self._create_widgets()
        self._setup_layout()
        
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        try:            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self.title_label = ctk.CTkLabel(
                self,
                text="–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞",
                font=("Arial", 24, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –§—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.settings_frame = ctk.CTkFrame(self)
            self.settings_frame.configure(fg_color=self.theme.colors['bg_secondary'])
            
            self.settings_title = ctk.CTkLabel(
                self.settings_frame,
                text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞",
                font=("Arial", 16, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            self.period_frame = ctk.CTkFrame(self.settings_frame)
            
            self.period_label = ctk.CTkLabel(
                self.period_frame,
                text="–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
                text_color=self.theme.colors['text_secondary']
            )
            
            self.period_var = ctk.StringVar(value="24h")
            self.period_options = ["1h", "6h", "24h", "7d", "30d", "custom"]
            self.period_menu = ctk.CTkOptionMenu(
                self.period_frame,
                values=["1 —á–∞—Å", "6 —á–∞—Å–æ–≤", "24 —á–∞—Å–∞", "7 –¥–Ω–µ–π", "30 –¥–Ω–µ–π", "–°–≤–æ–π –ø–µ—Ä–∏–æ–¥"],
                variable=self.period_var,
                command=self._on_period_changed            )
            
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç—ã (—Å–∫—Ä—ã—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            self.custom_frame = ctk.CTkFrame(self.period_frame)
            
            self.start_date_label = ctk.CTkLabel(
                self.custom_frame,
                text="–û—Ç:",
                text_color=self.theme.colors['text_secondary']
            )
            
            self.start_date_entry = self.widget_factory.create_entry(
                self.custom_frame,
                width=150
            )
            self.widget_factory.setup_placeholder(self.start_date_entry, "YYYY-MM-DD HH:MM")
            
            self.end_date_label = ctk.CTkLabel(
                self.custom_frame,
                text="–î–æ:",
                text_color=self.theme.colors['text_secondary']
            )
            
            self.end_date_entry = self.widget_factory.create_entry(
                self.custom_frame,
                width=150
            )
            self.widget_factory.setup_placeholder(self.end_date_entry, "YYYY-MM-DD HH:MM")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
            self.params_frame = ctk.CTkFrame(self.settings_frame)
            
            self.min_volume_label = ctk.CTkLabel(
                self.params_frame,
                text="–ú–∏–Ω. –æ–±—ä–µ–º (USD):",
                text_color=self.theme.colors['text_secondary']            )
            
            self.min_volume_entry = self.widget_factory.create_entry(
                self.params_frame,
                width=100
            )
            self.widget_factory.setup_placeholder(self.min_volume_entry, "1000")
            
            self.force_refresh_var = ctk.BooleanVar(value=False)
            self.force_refresh_switch = ctk.CTkCheckBox(
                self.params_frame,
                text="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                variable=self.force_refresh_var,
                text_color=self.theme.colors['text_secondary']
            )
              # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.control_frame = ctk.CTkFrame(self.settings_frame)
            
            self.start_analysis_button = ctk.CTkButton(
                self.control_frame,
                text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
                command=self._start_analysis,
                fg_color=self.theme.colors['btn_primary'],                font=("Arial", 12, "bold"),
                height=35
            )
            
            self.stop_analysis_button = ctk.CTkButton(
                self.control_frame,
                text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                command=self._stop_analysis,
                fg_color=self.theme.colors['btn_danger'],                state="disabled",
                height=35
            )
            
            self.export_button = ctk.CTkButton(
                self.control_frame,
                text="üìä –≠–∫—Å–ø–æ—Ä—Ç",
                command=self._export_results,
                fg_color=self.theme.colors['success'],
                state="disabled",
                height=35
            )
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress_bar = ProgressBar(self)
              # –§—Ä–µ–π–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_frame = ctk.CTkFrame(self)
            self.results_frame.configure(fg_color=self.theme.colors['bg_secondary'])
            
            self.results_title = ctk.CTkLabel(
                self.results_frame,
                text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞",
                font=("Arial", 16, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.stats_frame = ctk.CTkFrame(self.results_frame)
            
            # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.total_participants_card = self._create_stat_card(
                self.stats_frame, "–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "0", "info"
            )
            
            self.perfect_participants_card = self._create_stat_card(
                self.stats_frame, "–ò–¥–µ–∞–ª—å–Ω—ã–µ", "0", "success"
            )
            
            self.total_volume_card = self._create_stat_card(
                self.stats_frame, "–û–±—â–∏–π –æ–±—ä–µ–º", "$0", "accent"
            )
            
            self.total_rewards_card = self._create_stat_card(
                self.stats_frame, "–û–±—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã", "0 PLEX", "warning"
            )
            
            # –§–∏–ª—å—Ç—Ä—ã
            self.filter_frame = ctk.CTkFrame(self.results_frame)
            
            self.filter_label = ctk.CTkLabel(
                self.filter_frame,
                text="–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã:",
                text_color=self.theme.colors['text_secondary']            )
            
            self.search_entry = self.widget_factory.create_entry(
                self.filter_frame,
                width=200
            )
            self.widget_factory.setup_placeholder(self.search_entry, "–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É...")
            self.search_entry.bind('<KeyRelease>', self._on_search_changed)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.category_var = ctk.StringVar(value="all")
            self.category_menu = ctk.CTkOptionMenu(
                self.filter_frame,
                values=["–í—Å–µ", "–ò–¥–µ–∞–ª—å–Ω—ã–µ", "–ü—Ä–æ–ø—É—Å–∫–∏", "–ü—Ä–æ–¥–∞–ª–∏", "–ü–µ—Ä–µ–≤–æ–¥—ã"],
                variable=self.category_var,
                command=self._on_filter_changed
            )
            
            # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            self.participants_frame = ctk.CTkFrame(self.results_frame)
              # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            self.table_header = ctk.CTkFrame(self.participants_frame)
            self.table_header.configure(fg_color=self.theme.colors['bg_primary'])
            
            self.header_address = ctk.CTkLabel(
                self.table_header,
                text="–ê–¥—Ä–µ—Å",
                font=("Arial", 12, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            self.header_category = ctk.CTkLabel(
                self.table_header,
                text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                font=("Arial", 12, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            self.header_volume = ctk.CTkLabel(
                self.table_header,
                text="–û–±—ä–µ–º (USD)",
                font=("Arial", 12, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            self.header_balance = ctk.CTkLabel(
                self.table_header,
                text="–ë–∞–ª–∞–Ω—Å PLEX",
                font=("Arial", 12, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            self.header_reward = ctk.CTkLabel(
                self.table_header,
                text="–ù–∞–≥—Ä–∞–¥–∞",
                font=("Arial", 12, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            self.table_scrollable = ctk.CTkScrollableFrame(
                self.participants_frame,
                fg_color=self.theme.colors['bg_primary']
            )
            
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
            self.custom_frame.pack_forget()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {e}")
    
    def _create_stat_card(self, parent, title: str, value: str, color_type: str) -> Dict[str, ctk.CTkLabel]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
            color_type: –¢–∏–ø —Ü–≤–µ—Ç–∞
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏        """
        card_frame = ctk.CTkFrame(parent)
        card_frame.configure(fg_color=self.theme.colors['bg_primary'])
        
        title_label = ctk.CTkLabel(
            card_frame,
            text=title,
            font=("Arial", 10),
            text_color=self.theme.colors['text_secondary']
        )
        
        value_label = ctk.CTkLabel(
            card_frame,
            text=value,
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_accent']
        )
        
        title_label.pack(pady=(10, 2))
        value_label.pack(pady=(2, 10))
        
        return {
            'frame': card_frame,
            'title': title_label,
            'value': value_label
        }
    
    def _setup_layout(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid weights
            self.grid_rowconfigure(4, weight=1)
            self.grid_columnconfigure(0, weight=1)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self.title_label.grid(row=0, column=0, pady=(20, 10), sticky="ew")
            
            # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.settings_frame.grid(row=1, column=0, padx=20, pady=10, sticky="ew")
            
            self.settings_title.pack(pady=(15, 10))
            
            # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            self.period_frame.pack(fill='x', padx=15, pady=5)
            
            period_row = ctk.CTkFrame(self.period_frame)
            period_row.pack(fill='x', pady=5)
            
            self.period_label.pack(side='left')
            self.period_menu.pack(side='left', padx=(10, 0))
            
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç—ã
            self.custom_frame.pack(fill='x', pady=(5, 0))
            
            self.start_date_label.pack(side='left', padx=(0, 5))
            self.start_date_entry.pack(side='left', padx=(0, 20))
            self.end_date_label.pack(side='left', padx=(0, 5))
            self.end_date_entry.pack(side='left')
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
            self.params_frame.pack(fill='x', padx=15, pady=5)
            
            params_row1 = ctk.CTkFrame(self.params_frame)
            params_row1.pack(fill='x', pady=5)
            
            self.min_volume_label.pack(side='left')
            self.min_volume_entry.pack(side='left', padx=(10, 0))
            
            params_row2 = ctk.CTkFrame(self.params_frame)
            params_row2.pack(fill='x', pady=5)
            
            self.force_refresh_switch.pack(side='left')
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.control_frame.pack(fill='x', padx=15, pady=(10, 15))
            
            self.start_analysis_button.pack(side='left', padx=(0, 10))
            self.stop_analysis_button.pack(side='left', padx=(0, 10))
            self.export_button.pack(side='right')
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress_bar.grid(row=2, column=0, padx=20, pady=10, sticky="ew")
            
            # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_frame.grid(row=3, column=0, padx=20, pady=(0, 20), sticky="nsew")
            
            self.results_title.pack(pady=(15, 10))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.stats_frame.pack(fill='x', padx=15, pady=5)
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä—è–¥
            self.total_participants_card['frame'].pack(side='left', fill='x', expand=True, padx=(0, 5))
            self.perfect_participants_card['frame'].pack(side='left', fill='x', expand=True, padx=5)
            self.total_volume_card['frame'].pack(side='left', fill='x', expand=True, padx=5)
            self.total_rewards_card['frame'].pack(side='left', fill='x', expand=True, padx=(5, 0))
            
            # –§–∏–ª—å—Ç—Ä—ã
            self.filter_frame.pack(fill='x', padx=15, pady=10)
            
            self.filter_label.pack(side='left', padx=(0, 10))
            self.search_entry.pack(side='left', padx=(0, 10))
            self.category_menu.pack(side='left')
            
            # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            self.participants_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
              # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            self.table_header.pack(fill='x', pady=(0, 5))
            
            self.header_address.pack(side='left', fill='x', expand=True, padx=(10, 5))
            self.header_category.configure(width=100)
            self.header_category.pack(side='left', padx=5)
            self.header_volume.configure(width=120)
            self.header_volume.pack(side='left', padx=5)
            self.header_balance.configure(width=120)
            self.header_balance.pack(side='left', padx=5)
            self.header_reward.configure(width=100)
            self.header_reward.pack(side='left', padx=(5, 10))
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞
            self.table_scrollable.pack(fill='both', expand=True, pady=(5, 0))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ layout: {e}")
    
    def _on_period_changed(self, value: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        if value == "–°–≤–æ–π –ø–µ—Ä–∏–æ–¥":
            self.custom_frame.pack(fill='x', pady=(5, 0))
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            now = datetime.now()
            end_time = now.strftime('%Y-%m-%d %H:%M')
            start_time = (now - timedelta(hours=24)).strftime('%Y-%m-%d %H:%M')
            
            self.start_date_entry.delete(0, 'end')
            self.start_date_entry.insert(0, start_time)
            self.end_date_entry.delete(0, 'end')
            self.end_date_entry.insert(0, end_time)
        else:
            self.custom_frame.pack_forget()
    
    def _on_search_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        self._apply_filters()
    
    def _on_filter_changed(self, value: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        self._apply_filters()
    
    def _apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º."""
        if not self.current_analysis_result:
            return
        
        try:
            search_text = self.search_entry.get().lower()
            category_filter = self.category_var.get()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            all_participants = self.current_analysis_result.get('participants', [])
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filtered = []
            for participant in all_participants:
                # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
                if search_text and search_text not in participant.get('address', '').lower():
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if category_filter != "–í—Å–µ":
                    participant_category = participant.get('category', '')
                    
                    filter_mapping = {
                        "–ò–¥–µ–∞–ª—å–Ω—ã–µ": "perfect",
                        "–ü—Ä–æ–ø—É—Å–∫–∏": "missed_purchase",
                        "–ü—Ä–æ–¥–∞–ª–∏": "sold_token",
                        "–ü–µ—Ä–µ–≤–æ–¥—ã": "transferred"
                    }
                    
                    if participant_category != filter_mapping.get(category_filter):
                        continue
                
                filtered.append(participant)
            
            self.filtered_participants = filtered
            self._update_participants_table()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def _start_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        if self.analysis_running:
            return
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            period_start, period_end = self._get_analysis_period()
            if not period_start or not period_end:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            min_volume = self._get_min_volume()
            if min_volume is None:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ UI
            self.analysis_running = True
            self.start_analysis_button.configure(state='disabled')
            self.stop_analysis_button.configure(state='normal')
            self.export_button.configure(state='disabled')
            
            # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            self.progress_bar.reset()
            self.progress_bar.set_state(ProgressState.RUNNING)
            
            # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            analysis_thread = threading.Thread(
                target=self._run_analysis_thread,
                args=(period_start, period_end, min_volume),
                daemon=True
            )
            analysis_thread.start()
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥ {period_start} - {period_end}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑:\n{e}")
            self._analysis_completed(success=False)
    
    def _stop_analysis(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        if not self.analysis_running:
            return
        
        try:
            self.analysis_running = False
            self.progress_bar.set_state(ProgressState.CANCELLED)
            self._analysis_completed(success=False, cancelled=True)
            logger.info("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _run_analysis_thread(self, period_start: datetime, period_end: datetime, min_volume: float):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def update_progress(value, message=""):
                if self.analysis_running:
                    self.after_idle(lambda: self.progress_bar.set_progress(value, message))
            
            # –≠—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞
            update_progress(10, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            
            if not self.analysis_running:
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–∞–ø–∞—Ö
            update_progress(30, "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö...")
            
            if self.full_analyzer:
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ FullOptimizedAnalyzer
                result = self.full_analyzer.run_optimized_full_analysis(
                    min_stake_amount=min_volume,
                    period_days=30,  # TODO: –í—ã—á–∏—Å–ª–∏—Ç—å –∏–∑ period_start –∏ period_end
                    use_optimizations=True,
                    progress_callback=update_progress
                )
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result = self._create_demo_result()
                
                import time
                for i in range(30, 100, 10):
                    if not self.analysis_running:
                        return
                    
                    time.sleep(0.5)
                    update_progress(i, f"–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... {i}%")
            
            update_progress(100, "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.after_idle(lambda: self._analysis_completed(success=True, result=result))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.after_idle(lambda: self._analysis_completed(success=False, error=str(e)))
    
    def _create_demo_result(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        import random
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = []
        categories = ['perfect', 'missed_purchase', 'sold_token', 'transferred']
        
        for i in range(50):
            participant = {
                'address': f"0x{''.join(random.choices('0123456789abcdef', k=40))}",
                'category': random.choice(categories),
                'total_volume_usd': Decimal(str(random.uniform(100, 50000))),
                'current_balance': {
                    'plex': Decimal(str(random.uniform(1000, 100000))),
                    'usdt': Decimal(str(random.uniform(10, 1000))),
                    'bnb': Decimal(str(random.uniform(0.1, 10)))
                },
                'reward_amount': Decimal(str(random.uniform(10, 1000))),
                'transaction_count': random.randint(5, 100),
                'first_transaction': datetime.now() - timedelta(days=random.randint(1, 90))
            }
            participants.append(participant)
        
        return {
            'participants': participants,
            'total_participants': len(participants),
            'perfect_participants': len([p for p in participants if p['category'] == 'perfect']),
            'total_volume_usd': sum(p['total_volume_usd'] for p in participants),
            'total_rewards': sum(p['reward_amount'] for p in participants),
            'analysis_time': datetime.now(),
            'period_start': datetime.now() - timedelta(days=1),
            'period_end': datetime.now()
        }
    
    def _analysis_completed(self, success: bool, result: Dict = None, error: str = "", cancelled: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            self.analysis_running = False
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            self.start_analysis_button.configure(state='normal')
            self.stop_analysis_button.configure(state='disabled')
            
            if success and result:
                # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                self.progress_bar.set_state(ProgressState.COMPLETED)
                self.current_analysis_result = result
                self.export_button.configure(state='normal')
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._update_statistics(result)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                self.filtered_participants = result.get('participants', [])
                self._update_participants_table()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
            elif cancelled:
                # –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                self.progress_bar.set_state(ProgressState.CANCELLED)
                
            else:
                # –û—à–∏–±–∫–∞
                self.progress_bar.set_state(ProgressState.ERROR)
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞:\n{error}" if error else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _update_statistics(self, result: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            total = result.get('total_participants', 0)
            self.total_participants_card['value'].configure(text=str(total))
            
            # –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            perfect = result.get('perfect_participants', 0)
            self.perfect_participants_card['value'].configure(text=str(perfect))
            
            # –û–±—â–∏–π –æ–±—ä–µ–º
            volume = result.get('total_volume_usd', Decimal('0'))
            volume_text = f"${volume:,.0f}"
            self.total_volume_card['value'].configure(text=volume_text)
            
            # –û–±—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
            rewards = result.get('total_rewards', Decimal('0'))
            rewards_text = f"{rewards:,.0f} PLEX"
            self.total_rewards_card['value'].configure(text=rewards_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _update_participants_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
            for widget in self.table_scrollable.winfo_children():
                widget.destroy()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for i, participant in enumerate(self.filtered_participants[:100]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self._create_participant_row(participant, i)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
    
    def _create_participant_row(self, participant: Dict[str, Any], index: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        try:            # –§—Ä–µ–π–º —Å—Ç—Ä–æ–∫–∏
            row_frame = ctk.CTkFrame(self.table_scrollable)
            if index % 2 == 0:
                row_frame.configure(fg_color=self.theme.colors['bg_secondary'])
            else:
                row_frame.configure(fg_color=self.theme.colors['bg_primary'])
            row_frame.pack(fill='x', pady=1)
            
            # –ê–¥—Ä–µ—Å (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
            address = participant.get('address', '')
            short_address = f"{address[:10]}...{address[-8:]}" if len(address) > 18 else address
            
            address_label = ctk.CTkLabel(
                row_frame,
                text=short_address,
                text_color=self.theme.colors['text_primary']
            )
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ü–≤–µ—Ç–æ–º
            category = participant.get('category', 'unknown')
            category_colors = {
                'perfect': '#4CAF50',
                'missed_purchase': '#FF9800',
                'sold_token': '#F44336',
                'transferred': '#2196F3'
            }
            
            category_text = {
                'perfect': '‚≠ê –ò–¥–µ–∞–ª—å–Ω—ã–π',
                'missed_purchase': '‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∏',
                'sold_token': '‚ùå –ü—Ä–æ–¥–∞–∂–∞',
                'transferred': 'üîÑ –ü–µ—Ä–µ–≤–æ–¥—ã'            }.get(category, category)
            
            category_label = ctk.CTkLabel(
                row_frame,
                text=category_text,
                text_color=category_colors.get(category, self.theme.colors['text_primary'])
            )
            
            # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            volume = participant.get('total_volume_usd', Decimal('0'))
            volume_label = ctk.CTkLabel(
                row_frame,
                text=f"${volume:,.0f}",
                text_color=self.theme.colors['text_primary']
            )
            
            # –ë–∞–ª–∞–Ω—Å PLEX
            balance = participant.get('current_balance', {}).get('plex', Decimal('0'))
            balance_label = ctk.CTkLabel(
                row_frame,
                text=f"{balance:,.0f}",
                text_color=self.theme.colors['text_primary']
            )
            
            # –ù–∞–≥—Ä–∞–¥–∞
            reward = participant.get('reward_amount', Decimal('0'))
            reward_label = ctk.CTkLabel(
                row_frame,
                text=f"{reward:,.0f}",
                text_color=self.theme.colors['text_accent']            )
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            address_label.pack(side='left', fill='x', expand=True, padx=(10, 5))
            category_label.configure(width=100)
            category_label.pack(side='left', padx=5)
            volume_label.configure(width=120)
            volume_label.pack(side='left', padx=5)
            balance_label.configure(width=120)
            balance_label.pack(side='left', padx=5)
            reward_label.configure(width=100)
            reward_label.pack(side='left', padx=(5, 10))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
    
    def _get_analysis_period(self) -> Tuple[Optional[datetime], Optional[datetime]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            period = self.period_var.get()
            
            if period == "custom":
                # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                start_str = self.start_date_entry.get()
                end_str = self.end_date_entry.get()
                
                if not start_str or not end_str:
                    return None, None
                
                try:
                    start_date = datetime.strptime(start_str, '%Y-%m-%d %H:%M')
                    end_date = datetime.strptime(end_str, '%Y-%m-%d %H:%M')
                    return start_date, end_date
                except ValueError:
                    return None, None
            
            else:
                # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                end_date = datetime.now()
                
                period_mapping = {
                    "1h": timedelta(hours=1),
                    "6h": timedelta(hours=6),
                    "24h": timedelta(hours=24),
                    "7d": timedelta(days=7),
                    "30d": timedelta(days=30)
                }
                
                delta = period_mapping.get(period, timedelta(hours=24))
                start_date = end_date - delta
                
                return start_date, end_date
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None, None
    
    def _get_min_volume(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞."""
        try:
            value_str = self.min_volume_entry.get()
            if not value_str:
                return 0.0
            
            return float(value_str)
            
        except ValueError:
            return None
    
    def _export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞."""
        if not self.current_analysis_result:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        try:
            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞",
                defaultextension=".csv",
                filetypes=[
                    ("CSV files", "*.csv"),
                    ("Excel files", "*.xlsx"),
                    ("JSON files", "*.json"),
                    ("All files", "*.*")
                ]
            )
            
            if not file_path:
                return
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if file_path.endswith('.csv'):
                self._export_to_csv(file_path)
            elif file_path.endswith('.xlsx'):
                self._export_to_excel(file_path)
            elif file_path.endswith('.json'):
                self._export_to_json(file_path)
            else:
                self._export_to_csv(file_path)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{file_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{e}")
    
    def _export_to_csv(self, file_path: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç."""
        import csv
        
        with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'address', 'category', 'total_volume_usd', 'plex_balance',
                'usdt_balance', 'bnb_balance', 'reward_amount', 'transaction_count'
            ]
            
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for participant in self.filtered_participants:
                balance = participant.get('current_balance', {})
                
                writer.writerow({
                    'address': participant.get('address', ''),
                    'category': participant.get('category', ''),
                    'total_volume_usd': float(participant.get('total_volume_usd', 0)),
                    'plex_balance': float(balance.get('plex', 0)),
                    'usdt_balance': float(balance.get('usdt', 0)),
                    'bnb_balance': float(balance.get('bnb', 0)),
                    'reward_amount': float(participant.get('reward_amount', 0)),
                    'transaction_count': participant.get('transaction_count', 0)
                })
    
    def _export_to_excel(self, file_path: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Ñ–æ—Ä–º–∞—Ç."""
        try:
            import pandas as pd
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = []
            for participant in self.filtered_participants:
                balance = participant.get('current_balance', {})
                
                data.append({
                    '–ê–¥—Ä–µ—Å': participant.get('address', ''),
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': participant.get('category', ''),
                    '–û–±—ä–µ–º USD': float(participant.get('total_volume_usd', 0)),
                    '–ë–∞–ª–∞–Ω—Å PLEX': float(balance.get('plex', 0)),
                    '–ë–∞–ª–∞–Ω—Å USDT': float(balance.get('usdt', 0)),
                    '–ë–∞–ª–∞–Ω—Å BNB': float(balance.get('bnb', 0)),
                    '–ù–∞–≥—Ä–∞–¥–∞': float(participant.get('reward_amount', 0)),
                    '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π': participant.get('transaction_count', 0)
                })
            
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            df = pd.DataFrame(data)
            df.to_excel(file_path, index=False, engine='openpyxl')
            
        except ImportError:
            # Fallback –Ω–∞ CSV –µ—Å–ª–∏ pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            self._export_to_csv(file_path.replace('.xlsx', '.csv'))
    
    def _export_to_json(self, file_path: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç."""
        import json
        from decimal import Decimal
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Decimal
        def decimal_serializer(obj):
            if isinstance(obj, Decimal):
                return float(obj)
            elif isinstance(obj, datetime):
                return obj.isoformat()
            raise TypeError(f"Object of type {type(obj)} is not JSON serializable")
        
        with open(file_path, 'w', encoding='utf-8') as jsonfile:
            json.dump(
                {
                    'analysis_result': self.current_analysis_result,
                    'filtered_participants': self.filtered_participants
                },
                jsonfile,
                indent=2,
                default=decimal_serializer,
                ensure_ascii=False
            )
    
    def set_staking_manager(self, staking_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞."""
        self.staking_manager = staking_manager
        logger.debug("StakingManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è AnalysisTab")
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∏."""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_tab_name(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏."""
        return "–ê–Ω–∞–ª–∏–∑"


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['AnalysisTab']


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏
    def demo_analysis_tab():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AnalysisTab."""
        try:
            print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AnalysisTab...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            root = ctk.CTk()
            root.title("PLEX Analysis Tab Demo")
            root.geometry("1200x800")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
            from ui.themes.dark_theme import apply_window_style
            apply_window_style(root)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
            analysis_tab = AnalysisTab(root)
            analysis_tab.pack(fill='both', expand=True)
            
            print("‚úÖ AnalysisTab –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            root.mainloop()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    # demo_analysis_tab()
    print("üí° –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ AnalysisTab —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
