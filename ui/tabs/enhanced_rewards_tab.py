"""
PLEX Dynamic Staking Manager - Enhanced Rewards Tab
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any, Tuple
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import customtkinter as ctk

from ui.themes.dark_theme import get_theme
from ui.components.progress_bar import ProgressBar, ProgressState
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class EnhancedRewardsTab(ctk.CTkFrame):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–≥—Ä–∞–¥
    - –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–≤–æ–π–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
    - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç
    - –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞–≥—Ä–∞–¥
    """
    
    def __init__(self, parent, reward_manager=None, widget_factory=None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EnhancedRewardsTab.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            reward_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä RewardManager
            widget_factory: –§–∞–±—Ä–∏–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self.theme = get_theme()
        self.widget_factory = widget_factory or SafeWidgetFactory(self.theme)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ñ—Ä–µ–π–º–∞
        frame_style = self.theme.get_frame_style('primary')
        frame_style.update(kwargs)
        super().__init__(parent, **frame_style)
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≥—Ä–∞–¥
        self.reward_manager = reward_manager
        
        # –î–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥
        self.current_rewards = []
        self.filtered_rewards = []
        self.calculation_running = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        
        logger.debug("üéÅ EnhancedRewardsTab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def set_reward_manager(self, reward_manager):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≥—Ä–∞–¥.
        
        Args:
            reward_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä RewardManager
        """
        self.reward_manager = reward_manager
        logger.info("‚úÖ RewardManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Enhanced RewardsTab")
    
    def set_reward_manager(self, reward_manager):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≥—Ä–∞–¥.
        
        Args:
            reward_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä RewardManager
        """
        self.reward_manager = reward_manager
        logger.info("‚úÖ RewardManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Enhanced RewardsTab")
    
    def _create_widgets(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self.title_label = ctk.CTkLabel(
                self,
                text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
                font=("Arial", 24, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –§—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥
            self.settings_frame = ctk.CTkFrame(self)
            self.settings_frame.configure(fg_color=self.theme.colors['bg_secondary'])
            
            self.settings_title = ctk.CTkLabel(
                self.settings_frame,
                text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥",
                font=("Arial", 16, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≥—Ä–∞–¥
            self.base_reward_label = ctk.CTkLabel(
                self.settings_frame,
                text="–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (PLEX):",
                text_color=self.theme.colors['text_secondary']
            )
            
            self.base_reward_entry = self.widget_factory.create_entry(
                self.settings_frame,
                width=120
            )
            self.widget_factory.setup_placeholder(self.base_reward_entry, "100")
            
            # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –Ω–∞–≥—Ä–∞–¥ –ø–æ —Ç–∏—Ä–∞–º
            self.tier_multipliers_frame = ctk.CTkFrame(self.settings_frame)
            
            self.tier_multipliers_label = ctk.CTkLabel(
                self.tier_multipliers_frame,
                text="–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ —Ç–∏—Ä–∞–º:",
                font=("Arial", 14, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –§—Ä–µ–π–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_frame = ctk.CTkFrame(self)
            self.results_frame.configure(fg_color=self.theme.colors['bg_secondary'])
            
            self.results_title = ctk.CTkLabel(
                self.results_frame,
                text="–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã",
                font=("Arial", 16, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä–∞–¥
            self.stats_frame = ctk.CTkFrame(self.results_frame)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.total_rewards_card = self._create_stat_card(
                self.stats_frame, "–û–±—â–∞—è —Å—É–º–º–∞", "0 PLEX", "accent"
            )
            
            self.total_recipients_card = self._create_stat_card(
                self.stats_frame, "–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "0", "info"
            )
            
            self.avg_reward_card = self._create_stat_card(
                self.stats_frame, "–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞", "0 PLEX", "success"
            )
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥
            self.rewards_tree = ttk.Treeview(
                self.results_frame,
                columns=("address", "category", "tier", "reward", "status"),
                show="headings",
                height=15
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
            self.rewards_tree.heading("address", text="–ê–¥—Ä–µ—Å")
            self.rewards_tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
            self.rewards_tree.heading("tier", text="–¢–∏—Ä")
            self.rewards_tree.heading("reward", text="–ù–∞–≥—Ä–∞–¥–∞ (PLEX)")
            self.rewards_tree.heading("status", text="–°—Ç–∞—Ç—É—Å")
            
            self.rewards_tree.column("address", width=300)
            self.rewards_tree.column("category", width=120)
            self.rewards_tree.column("tier", width=80)
            self.rewards_tree.column("reward", width=150)
            self.rewards_tree.column("status", width=100)
            
            # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            self.tree_scrollbar = ttk.Scrollbar(
                self.results_frame,
                orient="vertical",
                command=self.rewards_tree.yview
            )
            self.rewards_tree.configure(yscrollcommand=self.tree_scrollbar.set)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.control_frame = ctk.CTkFrame(self)
            
            self.calculate_button = ctk.CTkButton(
                self.control_frame,
                text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã",
                command=self._calculate_rewards,
                fg_color=self.theme.colors['btn_primary'],
                font=("Arial", 12, "bold"),
                height=35
            )
            
            self.export_button = ctk.CTkButton(
                self.control_frame,
                text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞",
                command=self._export_rewards,
                fg_color=self.theme.colors['accent'],
                state="disabled",
                height=35
            )
            
            self.distribute_button = ctk.CTkButton(
                self.control_frame,
                text="üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã",
                command=self._distribute_rewards,
                fg_color=self.theme.colors['success'],
                state="disabled",
                height=35
            )
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress_bar = ProgressBar(self)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ EnhancedRewardsTab: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {e}")
    
    def _create_stat_card(self, parent, title: str, value: str, color_type: str) -> Dict[str, ctk.CTkLabel]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        card_frame = ctk.CTkFrame(parent)
        card_frame.configure(fg_color=self.theme.colors['bg_primary'])
        
        title_label = ctk.CTkLabel(
            card_frame,
            text=title,
            font=("Arial", 12),
            text_color=self.theme.colors['text_secondary']
        )
        
        value_label = ctk.CTkLabel(
            card_frame,
            text=value,
            font=("Arial", 20, "bold"),
            text_color=self.theme.get_status_color(color_type)
        )
        
        title_label.pack(pady=(10, 0))
        value_label.pack(pady=(0, 10))
        
        return {
            'frame': card_frame,
            'title': title_label,
            'value': value_label
        }
    
    def _setup_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self.title_label.pack(pady=20)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥
            self.settings_frame.pack(fill="x", padx=20, pady=(0, 10))
            self.settings_title.pack(pady=10)
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            base_params_frame = ctk.CTkFrame(self.settings_frame)
            base_params_frame.pack(fill="x", padx=10, pady=5)
            
            self.base_reward_label.pack(side="left", padx=10)
            self.base_reward_entry.pack(side="left", padx=10)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.results_frame.pack(fill="both", expand=True, padx=20, pady=10)
            self.results_title.pack(pady=10)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.stats_frame.pack(fill="x", padx=10, pady=5)
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            for i, card in enumerate([
                self.total_rewards_card,
                self.total_recipients_card, 
                self.avg_reward_card
            ]):
                card['frame'].grid(row=0, column=i, padx=10, pady=5, sticky="ew")
            
            self.stats_frame.grid_columnconfigure(0, weight=1)
            self.stats_frame.grid_columnconfigure(1, weight=1)
            self.stats_frame.grid_columnconfigure(2, weight=1)
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥
            tree_frame = ctk.CTkFrame(self.results_frame)
            tree_frame.pack(fill="both", expand=True, padx=10, pady=10)
            
            self.rewards_tree.pack(side="left", fill="both", expand=True)
            self.tree_scrollbar.pack(side="right", fill="y")
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.control_frame.pack(fill="x", padx=20, pady=10)
            
            self.calculate_button.pack(side="left", padx=10)
            self.export_button.pack(side="left", padx=10)
            self.distribute_button.pack(side="left", padx=10)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress_bar.pack(fill="x", padx=20, pady=(0, 20))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ layout EnhancedRewardsTab: {e}")
    
    def _calculate_rewards(self) -> None:
        """–†–∞—Å—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        try:
            if not self.reward_manager:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "RewardManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥
            self.progress_bar.set_state(ProgressState.LOADING)
            self.progress_bar.set_text("–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥...")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥
            logger.info("üßÆ –ù–∞—á–∞—Ç —Ä–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞
            self.after(2000, self._on_calculation_complete)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥: {e}")
            self.progress_bar.set_state(ProgressState.ERROR)
    
    def _on_calculation_complete(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥."""
        try:
            self.progress_bar.set_state(ProgressState.SUCCESS)
            self.progress_bar.set_text("–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            self.export_button.configure(state="normal")
            self.distribute_button.configure(state="normal")
            
            logger.info("‚úÖ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
    
    def _export_rewards(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥."""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("CSV files", "*.csv")]
            )
            
            if filename:
                logger.info(f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ –≤ —Ñ–∞–π–ª: {filename}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
    
    def _distribute_rewards(self) -> None:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."""
        try:
            result = messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥?\n"
                "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
            
            if result:
                logger.info("üí∞ –ù–∞—á–∞—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥")
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –Ω–∞—á–∞—Ç–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥: {e}")
    
    def refresh_data(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∏."""
        try:
            logger.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö EnhancedRewardsTab")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö EnhancedRewardsTab: {e}")
