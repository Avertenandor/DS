"""
PLEX Dynamic Staking Manager - Enhanced Analysis Tab with Detailed Logging
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.2.0
–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
- –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
- –£–ª—É—á—à–µ–Ω–æ —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
- –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ
"""

import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any, Tuple
import tkinter as tk
from tkinter import messagebox, filedialog, Menu
import customtkinter as ctk
import csv
import json

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞
try:
    import pyperclip
    CLIPBOARD_AVAILABLE = True
except ImportError:
    CLIPBOARD_AVAILABLE = False

from ui.themes.dark_theme import get_theme
from ui.components.progress_bar import ProgressBar, ProgressState
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class EnhancedAnalysisTab(ctk.CTkFrame):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    
    –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    - –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    
    def __init__(self, parent, staking_manager=None, widget_factory=None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EnhancedAnalysisTab.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            staking_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä StakingManager
            widget_factory: SafeWidgetFactory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        super().__init__(parent, **kwargs)
        
        self.theme = get_theme()
        self.widget_factory = widget_factory or SafeWidgetFactory(self.theme)
        self.staking_manager = staking_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.analysis_running = False
        self.current_analysis_result = None
        self.full_analyzer = None
        self.filtered_participants = []
        self.selected_rows = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        self.search_query = ""   # –î–ª—è –ø–æ–∏—Å–∫–∞
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        
        logger.info("‚úÖ Enhanced AnalysisTab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self.title_label = ctk.CTkLabel(
                self,
                text="üìä –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞",
                font=("Arial", 24, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
            self.control_panel = self._create_control_panel()
            
            # –ü–ê–ù–ï–õ–¨ –ù–ê–°–¢–†–û–ï–ö
            self.settings_panel = self._create_settings_panel()
            
            # –ü–†–û–ì–†–ï–°–°-–ë–ê–†
            self.progress_bar = ProgressBar(self)
            
            # –ü–ê–ù–ï–õ–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
            self.results_panel = self._create_results_panel()
            
            logger.debug("‚úÖ –í—Å–µ –≤–∏–¥–∂–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤: {e}")
            raise
    
    def _create_control_panel(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
        panel = ctk.CTkFrame(self)
        panel.configure(fg_color=self.theme.colors['bg_secondary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        title = ctk.CTkLabel(
            panel,
            text="üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title.pack(pady=(15, 10))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(panel)
        buttons_frame.configure(fg_color="transparent")
        buttons_frame.pack(fill='x', padx=15, pady=10)
        
        # –†—è–¥ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        row1 = ctk.CTkFrame(buttons_frame)
        row1.configure(fg_color="transparent")
        row1.pack(fill='x', pady=5)
        
        self.start_analysis_btn = ctk.CTkButton(
            row1,
            text="üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑",
            command=self._start_analysis,
            fg_color=self.theme.colors['btn_primary'],
            hover_color=self.theme.colors['btn_primary_hover'],
            font=("Arial", 12, "bold"),
            height=40,
            width=150
        )
        self.start_analysis_btn.pack(side='left', padx=(0, 10))
        
        self.stop_analysis_btn = ctk.CTkButton(
            row1,
            text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            command=self._stop_analysis,
            fg_color=self.theme.colors['btn_danger'],
            hover_color=self.theme.colors['btn_danger_hover'],
            font=("Arial", 12, "bold"),
            height=40,
            width=150,
            state="disabled"
        )
        self.stop_analysis_btn.pack(side='left', padx=(0, 10))
        
        self.refresh_btn = ctk.CTkButton(
            row1,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            command=self._refresh_data,
            fg_color=self.theme.colors['info'],
            font=("Arial", 12, "bold"),
            height=40,
            width=150
        )
        self.refresh_btn.pack(side='left', padx=(0, 10))
        
        self.clear_btn = ctk.CTkButton(
            row1,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            command=self._clear_results,
            fg_color=self.theme.colors['warning'],
            font=("Arial", 12, "bold"),
            height=40,
            width=150
        )
        self.clear_btn.pack(side='right')
        
        # –†—è–¥ 2: –≠–∫—Å–ø–æ—Ä—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        row2 = ctk.CTkFrame(buttons_frame)
        row2.configure(fg_color="transparent")
        row2.pack(fill='x', pady=5)
        
        self.export_csv_btn = ctk.CTkButton(
            row2,
            text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV",
            command=self._export_csv,
            fg_color=self.theme.colors['success'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.export_csv_btn.pack(side='left', padx=(0, 10))
        
        self.export_excel_btn = ctk.CTkButton(
            row2,
            text="üìä –≠–∫—Å–ø–æ—Ä—Ç Excel",
            command=self._export_excel,
            fg_color=self.theme.colors['success'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.export_excel_btn.pack(side='left', padx=(0, 10))
        
        self.copy_table_btn = ctk.CTkButton(
            row2,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            command=self._copy_all_table,
            fg_color=self.theme.colors['plex_primary'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.copy_table_btn.pack(side='left', padx=(0, 10))
        
        self.filter_btn = ctk.CTkButton(
            row2,
            text="üîç –§–∏–ª—å—Ç—Ä—ã",
            command=self._show_filters,
            fg_color=self.theme.colors['plex_primary'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.filter_btn.pack(side='right')
        
        return panel
    
    def _create_settings_panel(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        panel = ctk.CTkFrame(self)
        panel.configure(fg_color=self.theme.colors['bg_secondary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            panel,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title.pack(pady=(15, 10))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–µ—Ç–∫–µ
        settings_grid = ctk.CTkFrame(panel)
        settings_grid.configure(fg_color="transparent")
        settings_grid.pack(fill='x', padx=15, pady=10)
        
        # –†—è–¥ 1: –ü–µ—Ä–∏–æ–¥
        period_frame = ctk.CTkFrame(settings_grid)
        period_frame.configure(fg_color="transparent")
        period_frame.pack(fill='x', pady=5)
        
        ctk.CTkLabel(
            period_frame,
            text="üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
            text_color=self.theme.colors['text_secondary'],
            font=("Arial", 12, "bold")
        ).pack(side='left')
        
        self.period_var = ctk.StringVar(value="24h")
        self.period_menu = ctk.CTkOptionMenu(
            period_frame,
            values=["1h", "6h", "24h", "7d", "30d", "custom"],
            variable=self.period_var,
            command=self._on_period_change,
            fg_color=self.theme.colors['input_bg'],
            button_color=self.theme.colors['btn_primary'],
            width=120
        )
        self.period_menu.pack(side='left', padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        quick_buttons = ctk.CTkFrame(period_frame)
        quick_buttons.configure(fg_color="transparent")
        quick_buttons.pack(side='right')
        
        for period, text in [("1h", "1—á"), ("24h", "24—á"), ("7d", "7–¥"), ("30d", "30–¥")]:
            btn = ctk.CTkButton(
                quick_buttons,
                text=text,
                command=lambda p=period: self._set_quick_period(p),
                fg_color=self.theme.colors['btn_secondary'],
                width=40,
                height=25
            )
            btn.pack(side='left', padx=2)
        
        # –†—è–¥ 2: –î–∞—Ç—ã (–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞)
        self.custom_frame = ctk.CTkFrame(settings_grid)
        self.custom_frame.configure(fg_color="transparent")
        
        ctk.CTkLabel(
            self.custom_frame,
            text="üìÖ –û—Ç:",
            text_color=self.theme.colors['text_secondary']
        ).pack(side='left')
        
        self.start_date_entry = self.widget_factory.create_entry(
            self.custom_frame,
            width=150
        )
        self.widget_factory.setup_placeholder(self.start_date_entry, "YYYY-MM-DD HH:MM")
        self.start_date_entry.pack(side='left', padx=(5, 20))
        
        ctk.CTkLabel(
            self.custom_frame,
            text="üìÖ –î–æ:",
            text_color=self.theme.colors['text_secondary']
        ).pack(side='left')
        
        self.end_date_entry = self.widget_factory.create_entry(
            self.custom_frame,
            width=150
        )
        self.widget_factory.setup_placeholder(self.end_date_entry, "YYYY-MM-DD HH:MM")
        self.end_date_entry.pack(side='left', padx=5)
        
        # –†—è–¥ 3: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
        params_frame = ctk.CTkFrame(settings_grid)
        params_frame.configure(fg_color="transparent")
        params_frame.pack(fill='x', pady=5)
        
        ctk.CTkLabel(
            params_frame,
            text="üí∞ –ú–∏–Ω. –æ–±—ä–µ–º:",
            text_color=self.theme.colors['text_secondary'],
            font=("Arial", 12, "bold")
        ).pack(side='left')
        
        self.min_volume_entry = self.widget_factory.create_entry(
            params_frame,
            width=100
        )
        self.widget_factory.setup_placeholder(self.min_volume_entry, "0.0")
        self.min_volume_entry.pack(side='left', padx=(10, 20))
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        ctk.CTkLabel(
            params_frame,
            text="üîç –ü–æ–∏—Å–∫:",
            text_color=self.theme.colors['text_secondary'],
            font=("Arial", 12, "bold")
        ).pack(side='left')
        
        self.search_entry = self.widget_factory.create_entry(
            params_frame,
            width=150
        )
        self.widget_factory.setup_placeholder(self.search_entry, "–ê–¥—Ä–µ—Å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è...")
        self.search_entry.bind('<KeyRelease>', self._on_search_change)
        self.search_entry.pack(side='left', padx=(10, 20))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        self.force_refresh_var = ctk.BooleanVar()
        self.force_refresh_switch = ctk.CTkSwitch(
            params_frame,
            text="üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
            variable=self.force_refresh_var,
            text_color=self.theme.colors['text_secondary']
        )
        self.force_refresh_switch.pack(side='right', padx=(0, 10))
        
        self.detailed_analysis_var = ctk.BooleanVar(value=True)
        self.detailed_analysis_switch = ctk.CTkSwitch(
            params_frame,
            text="üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            variable=self.detailed_analysis_var,
            text_color=self.theme.colors['text_secondary']
        )
        self.detailed_analysis_switch.pack(side='right')
        
        return panel
    
    def _create_results_panel(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        panel = ctk.CTkFrame(self)
        panel.configure(fg_color=self.theme.colors['bg_secondary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkFrame(panel)
        header.configure(fg_color="transparent")
        header.pack(fill='x', padx=15, pady=(15, 10))
        
        title = ctk.CTkLabel(
            header,
            text="üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title.pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_controls = ctk.CTkFrame(header)
        results_controls.configure(fg_color="transparent")
        results_controls.pack(side='right')
        
        self.sort_btn = ctk.CTkButton(
            results_controls,
            text="üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
            command=self._show_sort_options,
            fg_color=self.theme.colors['btn_secondary'],
            width=100,
            height=30
        )
        self.sort_btn.pack(side='left', padx=(0, 5))
        
        self.view_btn = ctk.CTkButton(
            results_controls,
            text="üëÅÔ∏è –í–∏–¥",
            command=self._toggle_view,
            fg_color=self.theme.colors['btn_secondary'],
            width=80,
            height=30
        )
        self.view_btn.pack(side='left')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_frame = ctk.CTkFrame(panel)
        self.stats_frame.configure(fg_color=self.theme.colors['bg_tertiary'])
        self.stats_frame.pack(fill='x', padx=15, pady=10)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._create_stats_cards()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.table_frame = ctk.CTkFrame(panel)
        self.table_frame.configure(fg_color=self.theme.colors['bg_tertiary'])
        self.table_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        try:
            self._create_real_participants_table()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            # Fallback –∑–∞–≥–ª—É—à–∫–∞
            self.table_placeholder = ctk.CTkLabel(
                self.table_frame,
                text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                font=("Arial", 14),
                text_color=self.theme.colors['text_muted']
            )
            self.table_placeholder.pack(expand=True, pady=50)
        
        return panel
    
    def _create_stats_cards(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats_data = [
            ("üë•", "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "0", "info"),
            ("‚≠ê", "–ò–¥–µ–∞–ª—å–Ω—ã—Ö", "0", "success"),
            ("üí∞", "–û–±—â–∏–π –æ–±—ä–µ–º", "0.0 PLEX", "warning"),
            ("üéÅ", "–ù–∞–≥—Ä–∞–¥—ã", "0.0 PLEX", "plex_primary")
        ]
        
        self.stat_labels = {}  # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        
        for icon, title, value, color in stats_data:
            card = ctk.CTkFrame(self.stats_frame)
            card.configure(fg_color=self.theme.colors['bg_primary'])
            card.pack(side='left', fill='x', expand=True, padx=5, pady=10)
            
            ctk.CTkLabel(
                card,
                text=icon,
                font=("Arial", 20)
            ).pack(pady=(10, 0))
            
            ctk.CTkLabel(
                card,
                text=title,
                font=("Arial", 11),
                text_color=self.theme.colors['text_secondary']
            ).pack()
            
            value_label = ctk.CTkLabel(
                card,
                text=value,
                font=("Arial", 14, "bold"),
                text_color=self.theme.colors[color] if color in self.theme.colors else self.theme.colors['text_primary']
            )
            value_label.pack(pady=(0, 10))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.stat_labels[title.lower()] = value_label
    
    def _setup_layout(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid weights
            self.grid_rowconfigure(4, weight=1)  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—Ç—Å—è
            self.grid_columnconfigure(0, weight=1)
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.title_label.grid(row=0, column=0, pady=(20, 10), sticky="ew")
            self.control_panel.grid(row=1, column=0, padx=20, pady=10, sticky="ew")
            self.settings_panel.grid(row=2, column=0, padx=20, pady=10, sticky="ew")
            self.progress_bar.grid(row=3, column=0, padx=20, pady=10, sticky="ew")
            self.results_panel.grid(row=4, column=0, padx=20, pady=(0, 20), sticky="nsew")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç—ã
            self._on_period_change("24h")
            
            logger.debug("‚úÖ Layout –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ layout: {e}")
    
    # ========== –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ==========
    
    def _log_detailed_analysis_results(self, result: Dict[str, Any]) -> None:
        """
        –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            result: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            if not result or not result.get('success', False):
                logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            logger.info("üìä ========== –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ==========")
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            summary = result.get('summary', {})
            period = result.get('analysis_period', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            start_time = result.get('start_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            end_time = result.get('end_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            logger.info(f"‚è∞ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {period}")
            logger.info(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}")
            logger.info(f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_time}")
            logger.info(f"üì¶ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–ª–æ–∫–æ–≤: {result.get('blocks_analyzed', 0):,}")
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π Transfer: {result.get('total_transfers', 0):,}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            total_participants = summary.get('total_participants', 0)
            logger.info(f"üë• –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}")
            
            if total_participants == 0:
                logger.warning("‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = summary.get('categories', {})
            logger.info("üìã –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in categories.items():
                percentage = (count / total_participants * 100) if total_participants > 0 else 0
                logger.info(f"   üìÇ {category}: {count} ({percentage:.1f}%)")
            
            # –°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            statuses = summary.get('statuses', {})
            if statuses:
                logger.info("üîç –°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
                for status, count in statuses.items():
                    percentage = (count / total_participants * 100) if total_participants > 0 else 0
                    logger.info(f"   ‚úÖ {status}: {count} ({percentage:.1f}%)")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å–∞–º
            participants = result.get('participants', [])
            if participants:
                balances = [float(p.get('balance_plex', 0)) for p in participants]
                total_balance = sum(balances)
                avg_balance = total_balance / len(balances) if balances else 0
                max_balance = max(balances) if balances else 0
                min_balance = min(balances) if balances else 0
                
                logger.info("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤:")
                logger.info(f"   üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_balance:,.2f} PLEX")
                logger.info(f"   üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {avg_balance:,.2f} PLEX")
                logger.info(f"   üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {max_balance:,.2f} PLEX")
                logger.info(f"   üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {min_balance:,.2f} PLEX")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if participants:
                # –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
                participants_with_purchases = [p for p in participants if p.get('purchase_count', 0) > 0]
                avg_purchases = sum(p.get('purchase_count', 0) for p in participants_with_purchases) / len(participants_with_purchases) if participants_with_purchases else 0
                
                # –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏
                participants_with_sales = [p for p in participants if p.get('sales_count', 0) > 0]
                
                # –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
                participants_with_transfers = [p for p in participants if p.get('transfers_count', 0) > 0]
                
                logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
                logger.info(f"   üõí –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–æ–∫—É–ø–∫–∞–º–∏: {len(participants_with_purchases)}")
                logger.info(f"   üìä –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫: {avg_purchases:.1f}")
                logger.info(f"   üí∏ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏: {len(participants_with_sales)}")
                logger.info(f"   üîÑ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: {len(participants_with_transfers)}")
            
            # –°–ø–∏—Å–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–ø–µ—Ä–≤—ã–µ 5 –≤ –∫–∞–∂–¥–æ–π)
            logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            category_examples = {}
            for participant in participants[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                category = participant.get('category', 'UNKNOWN')
                if category not in category_examples:
                    category_examples[category] = []
                if len(category_examples[category]) < 5:
                    category_examples[category].append(participant.get('address', 'N/A'))
            
            for category, addresses in category_examples.items():
                logger.info(f"   üìÇ {category}:")
                for addr in addresses:
                    logger.info(f"      üîó {addr}")
                if len(addresses) == 5:
                    logger.info(f"      ... –∏ –µ—â–µ {categories.get(category, 0) - 5} –∞–¥—Ä–µ—Å–æ–≤")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
            total_rewards = result.get('total_rewards_calculated', 0)
            eligible_for_rewards = len([p for p in participants if p.get('eligible_for_rewards', False)])
            
            if total_rewards > 0:
                logger.info("üéÅ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥:")
                logger.info(f"   üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: {total_rewards:,.2f} PLEX")
                logger.info(f"   üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã: {eligible_for_rewards}")
                logger.info(f"   üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {(total_rewards / eligible_for_rewards):,.2f} PLEX" if eligible_for_rewards > 0 else "   üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: 0 PLEX")
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
            logger.info("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:")
            logger.info(f"   ‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('execution_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"   üîó QuickNode API –∑–∞–ø—Ä–æ—Å–æ–≤: {result.get('api_requests_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"   üíæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {result.get('data_size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            logger.info("üìä ============== –ö–û–ù–ï–¶ –î–ï–¢–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê ==============")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # ========== –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ==========
    
    def _setup_table_context_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
            self.context_menu = Menu(self, tearoff=0, bg=self.theme.colors['bg_secondary'], fg=self.theme.colors['text_primary'])
            
            self.context_menu.add_command(
                label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É",
                command=self._copy_selected_row,
                accelerator="Ctrl+C"
            )
            
            self.context_menu.add_command(
                label="üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É",
                command=self._copy_all_table,
                accelerator="Ctrl+Shift+C"
            )
            
            self.context_menu.add_separator()
            
            self.context_menu.add_command(
                label="üîó –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞",
                command=self._copy_addresses_only
            )
            
            self.context_menu.add_command(
                label="üìä –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å—ã",
                command=self._copy_balances_only
            )
            
            self.context_menu.add_separator()
            
            self.context_menu.add_command(
                label="üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                command=self._export_to_csv
            )
            
            self.context_menu.add_command(
                label="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏",
                command=self._show_selected_details
            )
            
            logger.debug("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    def _show_context_menu(self, event):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é."""
        try:
            if hasattr(self, 'context_menu'):
                self.context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    def _copy_selected_row(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        try:
            if not self.selected_rows:
                messagebox.showwarning("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            if not CLIPBOARD_AVAILABLE:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å pyperclip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyperclip")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            selected_data = []
            for row_index in self.selected_rows:
                if row_index < len(self.participants_data):
                    participant = self.participants_data[row_index]
                    row_text = self._format_participant_for_copy(participant)
                    selected_data.append(row_text)
            
            if selected_data:
                clipboard_text = "\n".join(selected_data)
                pyperclip.copy(clipboard_text)
                
                logger.info(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(selected_data)} —Å—Ç—Ä–æ–∫ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
                messagebox.showinfo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(selected_data)} —Å—Ç—Ä–æ–∫ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{e}")
    
    def _copy_all_table(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        try:
            if not self.participants_data:
                messagebox.showwarning("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            if not CLIPBOARD_AVAILABLE:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å pyperclip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyperclip")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
            table_text = self._format_table_data_for_copy(include_headers=True)
            
            pyperclip.copy(table_text)
            
            logger.info(f"üìã –í—Å—è —Ç–∞–±–ª–∏—Ü–∞ ({len(self.participants_data)} —Å—Ç—Ä–æ–∫) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            messagebox.showinfo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ ({len(self.participants_data)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É:\n{e}")
    
    def _copy_addresses_only(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        try:
            if not self.participants_data:
                messagebox.showwarning("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            if not CLIPBOARD_AVAILABLE:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å pyperclip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyperclip")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞
            addresses = [participant.get('address', 'N/A') for participant in self.participants_data]
            addresses_text = "\n".join(addresses)
            
            pyperclip.copy(addresses_text)
            
            logger.info(f"üìã {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            messagebox.showinfo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", f"‚úÖ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞:\n{e}")
    
    def _copy_balances_only(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        try:
            if not self.participants_data:
                messagebox.showwarning("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            if not CLIPBOARD_AVAILABLE:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å pyperclip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyperclip")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏
            balances_data = []
            for participant in self.participants_data:
                address = participant.get('address', 'N/A')
                balance = participant.get('balance_plex', 0)
                balances_data.append(f"{address}: {balance:.2f} PLEX")
            
            balances_text = "\n".join(balances_data)
            
            pyperclip.copy(balances_text)
            
            logger.info(f"üìã –ë–∞–ª–∞–Ω—Å—ã {len(balances_data)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            messagebox.showinfo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", f"‚úÖ –ë–∞–ª–∞–Ω—Å—ã {len(balances_data)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã:\n{e}")
    
    def _format_participant_for_copy(self, participant: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            address = participant.get('address', 'N/A')
            balance = participant.get('balance_plex', 0)
            category = participant.get('category', 'UNKNOWN')
            status = "–ü–æ–¥—Ö–æ–¥–∏—Ç" if participant.get('eligible_for_rewards', False) else "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"
            
            return f"{address}\t{balance:.2f} PLEX\t{category}\t{status}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    def _format_table_data_for_copy(self, include_headers: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            lines = []
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            if include_headers:
                headers = ["‚Ññ", "–ê–¥—Ä–µ—Å", "–ë–∞–ª–∞–Ω—Å (PLEX)", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—Ç–∞—Ç—É—Å"]
                lines.append("\t".join(headers))
                lines.append("-" * 80)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            
            # –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for i, participant in enumerate(self.participants_data, 1):
                address = participant.get('address', 'N/A')
                balance = participant.get('balance_plex', 0)
                category = participant.get('category', 'UNKNOWN')
                status = "–ü–æ–¥—Ö–æ–¥–∏—Ç" if participant.get('eligible_for_rewards', False) else "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"
                
                row = [
                    str(i),
                    address,
                    f"{balance:.2f}",
                    category,
                    status
                ]
                lines.append("\t".join(row))
            
            return "\n".join(lines)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"
    
    def _export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ CSV —Ñ–∞–π–ª."""
        try:
            if not self.participants_data:
                messagebox.showwarning("–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                initialname=f"plex_participants_{timestamp}.csv"
            )
            
            if filename:
                with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                    fieldnames = ['index', 'address', 'balance_plex', 'category', 'eligible_for_rewards', 
                                'purchase_count', 'sales_count', 'transfers_count', 'last_activity']
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    writer.writeheader()
                    
                    # –î–∞–Ω–Ω—ã–µ
                    for i, participant in enumerate(self.participants_data, 1):
                        row = {
                            'index': i,
                            'address': participant.get('address', 'N/A'),
                            'balance_plex': participant.get('balance_plex', 0),
                            'category': participant.get('category', 'UNKNOWN'),
                            'eligible_for_rewards': participant.get('eligible_for_rewards', False),
                            'purchase_count': participant.get('purchase_count', 0),
                            'sales_count': participant.get('sales_count', 0),
                            'transfers_count': participant.get('transfers_count', 0),
                            'last_activity': participant.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        }
                        writer.writerow(row)
                
                logger.info(f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV: {filename} ({len(self.participants_data)} –∑–∞–ø–∏—Å–µ–π)")
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{filename}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV:\n{e}")
    
    def _show_selected_details(self):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        try:
            if not self.selected_rows:
                messagebox.showwarning("–î–µ—Ç–∞–ª–∏", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if self.selected_rows[0] < len(self.participants_data):
                participant = self.participants_data[self.selected_rows[0]]
                self._show_participant_details(participant)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")
    
    # ========== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ==========
    
    def _on_search_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        try:
            search_query = self.search_entry.get().lower().strip()
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if not search_query:
                self._update_participants_table(self.participants_data)
                return
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
            filtered_participants = []
            for participant in self.participants_data:
                address = participant.get('address', '').lower()
                category = participant.get('category', '').lower()
                
                if (search_query in address or 
                    search_query in category or
                    search_query in str(participant.get('balance_plex', 0))):
                    filtered_participants.append(participant)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            self._update_participants_table(filtered_participants)
            
            logger.debug(f"üîç –ü–æ–∏—Å–∫ '{search_query}': –Ω–∞–π–¥–µ–Ω–æ {len(filtered_participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    # ========== –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–ë–ê–ó–û–í–´–ï) ==========
    
    def _start_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            self.start_analysis_btn.configure(state="disabled")
            self.stop_analysis_btn.configure(state="normal")
            
            # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_bar.set_progress(0, "–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
            
            # –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            self._run_real_analysis()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑:\n{e}")
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.start_analysis_btn.configure(state="normal")
            self.stop_analysis_btn.configure(state="disabled")
    
    def _stop_analysis(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞...")
            
            self.analysis_running = False
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            from core.simple_analyzer import simple_analyzer
            simple_analyzer.stop_analysis()
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            self.start_analysis_btn.configure(state="normal")
            self.stop_analysis_btn.configure(state="disabled")
            self.progress_bar.set_progress(0, "–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _run_real_analysis(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ SimpleAnalyzer."""
        def run_analysis():
            try:
                self.analysis_running = True
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                from core.simple_analyzer import simple_analyzer
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                self.after(0, lambda: self.progress_bar.set_progress(0.1, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞..."))
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ UI
                period_value = self.period_var.get() if hasattr(self, 'period_var') else "24h"
                hours = self._parse_period_hours(period_value)
                
                # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def progress_update(message, progress):
                    if self.analysis_running:
                        self.after(0, lambda m=message, p=progress: self.progress_bar.set_progress(p, m))
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
                progress_update("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC...", 0.05)
                if not simple_analyzer.initialize():
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ BSC")
                
                # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
                progress_update(f"–ê–Ω–∞–ª–∏–∑ –∑–∞ {period_value}...", 0.1)
                result = simple_analyzer.analyze_period(hours, progress_update)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.current_analysis_result = result
                
                if self.analysis_running and result.get('success', False):
                    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
                    self._log_detailed_analysis_results(result)
                    
                    self.after(0, lambda: self.progress_bar.set_progress(1.0, "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!"))
                    self.after(0, self._analysis_completed)
                elif not result.get('success', False):
                    error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    self.after(0, lambda: self.progress_bar.set_progress(0.0, f"–û—à–∏–±–∫–∞: {error_msg}"))
                    self.after(0, lambda: self._show_error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", error_msg))
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
                error_msg = str(e)
                self.after(0, lambda msg=error_msg: self.progress_bar.set_progress(0.0, f"–û—à–∏–±–∫–∞: {msg}"))
                self.after(0, lambda msg=error_msg: self._show_error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", msg))
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                self.after(0, lambda: self.start_analysis_btn.configure(state="normal"))
                self.after(0, lambda: self.stop_analysis_btn.configure(state="disabled"))
                self.analysis_running = False
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        analysis_thread = threading.Thread(target=run_analysis, daemon=True)
        analysis_thread.start()
    
    def _parse_period_hours(self, period_str: str) -> int:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –≤ —á–∞—Å—ã."""
        if period_str == "1h":
            return 1
        elif period_str == "6h":
            return 6
        elif period_str == "24h":
            return 24
        elif period_str == "7d":
            return 168  # 7 –¥–Ω–µ–π * 24 —á–∞—Å–∞
        elif period_str == "30d":
            return 720  # 30 –¥–Ω–µ–π * 24 —á–∞—Å–∞
        else:
            return 24  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
    
    def _analysis_completed(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.analysis_running = False
            self.start_analysis_btn.configure(state="normal")
            self.stop_analysis_btn.configure(state="disabled")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if not hasattr(self, 'current_analysis_result') or not self.current_analysis_result:
                if hasattr(self, 'table_placeholder'):
                    self.table_placeholder.configure(text="‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            result = self.current_analysis_result
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_bar.set_progress(1.0, "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if result.get('success', False):
                summary = result.get('summary', {})
                participants_data = result.get('participants', [])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π
                self.participants_data = participants_data
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                self._update_stats_cards(summary)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                self._update_participants_table(participants_data)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                total_participants = summary.get('total_participants', 0)
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {total_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, {result.get('total_transfers', 0)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                
            else:
                error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                if hasattr(self, 'table_placeholder'):
                    self.table_placeholder.configure(text=f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:\n{error_msg}")
                logger.error(f"‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {error_msg}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            if hasattr(self, 'table_placeholder'):
                self.table_placeholder.configure(text=f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n{str(e)}")
    
    def _update_stats_cards(self, summary: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫."""
        try:
            total_participants = summary.get('total_participants', 0)
            categories = summary.get('categories', {})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            if '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' in self.stat_labels:
                self.stat_labels['—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'].configure(text=str(total_participants))
            
            if '–∏–¥–µ–∞–ª—å–Ω—ã—Ö' in self.stat_labels:
                perfect_count = categories.get('PERFECT', 0)
                self.stat_labels['–∏–¥–µ–∞–ª—å–Ω—ã—Ö'].configure(text=str(perfect_count))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º –±–∞–ª–∞–Ω—Å–æ–≤
            if hasattr(self, 'participants_data') and self.participants_data:
                total_volume = sum(float(p.get('balance_plex', 0)) for p in self.participants_data)
                if '–æ–±—â–∏–π –æ–±—ä–µ–º' in self.stat_labels:
                    self.stat_labels['–æ–±—â–∏–π –æ–±—ä–µ–º'].configure(text=f"{total_volume:,.1f} PLEX")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
            eligible_count = len([p for p in self.participants_data if p.get('eligible_for_rewards', False)]) if hasattr(self, 'participants_data') else 0
            estimated_rewards = eligible_count * 100  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ 100 PLEX –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if '–Ω–∞–≥—Ä–∞–¥—ã' in self.stat_labels:
                self.stat_labels['–Ω–∞–≥—Ä–∞–¥—ã'].configure(text=f"{estimated_rewards:,.0f} PLEX")
            
            logger.debug("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _create_real_participants_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.table_container = ctk.CTkFrame(self.table_frame)
        self.table_container.pack(fill='both', expand=True, padx=5, pady=5)
        self.table_container.configure(fg_color=self.theme.colors['bg_primary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        self.table_headers = ctk.CTkFrame(self.table_container)
        self.table_headers.pack(fill='x', padx=5, pady=(5, 0))
        self.table_headers.configure(fg_color=self.theme.colors['bg_secondary'])
        
        headers = ["‚Ññ", "–ê–¥—Ä–µ—Å", "–ë–∞–ª–∞–Ω—Å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—Ç–∞—Ç—É—Å", "–î–µ–π—Å—Ç–≤–∏—è"]
        self.header_labels = []
        
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(
                self.table_headers,
                text=header,
                font=("Arial", 12, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            label.grid(row=0, column=i, padx=5, pady=5, sticky="ew")
            self.header_labels.append(label)
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        for i in range(len(headers)):
            self.table_headers.grid_columnconfigure(i, weight=1)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.table_scroll_frame = ctk.CTkScrollableFrame(
            self.table_container,
            orientation="vertical"
        )
        self.table_scroll_frame.pack(fill='both', expand=True, padx=5, pady=5)
        self.table_scroll_frame.configure(fg_color=self.theme.colors['bg_primary'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        self._setup_table_context_menu()
        
        # Bind –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –∫ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
        self.table_scroll_frame.bind("<Button-3>", self._show_context_menu)
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
        self.table_placeholder = ctk.CTkLabel(
            self.table_scroll_frame,
            text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            font=("Arial", 14),
            text_color=self.theme.colors['text_muted']
        )
        self.table_placeholder.pack(expand=True, pady=50)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.table_rows = []
        self.participants_data = []
    
    def _update_participants_table(self, participants: List[Dict[str, Any]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self._clear_table_data()
            
            if not participants:
                # –ü–æ–∫–∞–∑–∞—Ç—å placeholder –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                self.table_placeholder = ctk.CTkLabel(
                    self.table_scroll_frame,
                    text="üì≠ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞",
                    font=("Arial", 14),
                    text_color=self.theme.colors['text_warning']
                )
                self.table_placeholder.pack(expand=True, pady=50)
                return
            
            # –°–∫—Ä—ã—Ç—å placeholder –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if hasattr(self, 'table_placeholder') and self.table_placeholder:
                self.table_placeholder.pack_forget()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É
            for i, participant in enumerate(participants):
                self._add_participant_row(i + 1, participant)
            
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def _clear_table_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã."""
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        for row in self.table_rows:
            if row.winfo_exists():
                row.destroy()
        
        self.table_rows.clear()
        
        # –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        self.selected_rows.clear()
        
        # –°–∫—Ä—ã—Ç—å placeholder –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(self, 'table_placeholder') and self.table_placeholder:
            self.table_placeholder.pack_forget()
    
    def _add_participant_row(self, index: int, participant: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏
            row_frame = ctk.CTkFrame(self.table_scroll_frame)
            row_frame.pack(fill='x', padx=2, pady=1)
            
            # –¶–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = participant.get('category', 'UNKNOWN')
            if category == 'PERFECT':
                row_color = self.theme.colors.get('success_bg', self.theme.colors['bg_secondary'])
            elif category == 'MISSED_PURCHASE':
                row_color = self.theme.colors.get('warning_bg', self.theme.colors['bg_secondary'])
            elif category == 'SOLD_TOKEN':
                row_color = self.theme.colors.get('error_bg', self.theme.colors['bg_secondary'])
            else:
                row_color = self.theme.colors['bg_secondary']
            
            row_frame.configure(fg_color=row_color)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
            row_index = index - 1
            row_frame.bind("<Button-1>", lambda e, idx=row_index: self._select_row(idx))
            row_frame.bind("<Button-3>", self._show_context_menu)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
            for i in range(6):
                row_frame.grid_columnconfigure(i, weight=1)
            
            # –°—Ç–æ–ª–±—Ü—ã –¥–∞–Ω–Ω—ã—Ö
            address = participant.get('address', 'Unknown')
            balance = participant.get('balance_plex', 0)
            
            # –ò–Ω–¥–µ–∫—Å
            index_label = ctk.CTkLabel(
                row_frame,
                text=str(index),
                font=("Arial", 10),
                text_color=self.theme.colors['text_primary']
            )
            index_label.grid(row=0, column=0, padx=5, pady=2)
            index_label.bind("<Button-1>", lambda e, idx=row_index: self._select_row(idx))
            index_label.bind("<Button-3>", self._show_context_menu)
            
            # –ê–¥—Ä–µ—Å (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
            short_address = f"{address[:6]}...{address[-4:]}" if len(address) > 10 else address
            address_label = ctk.CTkLabel(
                row_frame,
                text=short_address,
                font=("Arial", 10),
                text_color=self.theme.colors['text_primary']
            )
            address_label.grid(row=0, column=1, padx=5, pady=2)
            address_label.bind("<Button-1>", lambda e, idx=row_index: self._select_row(idx))
            address_label.bind("<Button-3>", self._show_context_menu)
            
            # –ë–∞–ª–∞–Ω—Å
            balance_text = f"{balance:.2f}" if isinstance(balance, (int, float, Decimal)) else str(balance)
            balance_label = ctk.CTkLabel(
                row_frame,
                text=f"{balance_text} PLEX",
                font=("Arial", 10),
                text_color=self.theme.colors['text_primary']
            )
            balance_label.grid(row=0, column=2, padx=5, pady=2)
            balance_label.bind("<Button-1>", lambda e, idx=row_index: self._select_row(idx))
            balance_label.bind("<Button-3>", self._show_context_menu)
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            category_icons = {
                'PERFECT': '‚≠ê',
                'MISSED_PURCHASE': '‚ö†Ô∏è',
                'SOLD_TOKEN': '‚ùå',
                'TRANSFERRED': 'üîÑ'
            }
            category_text = f"{category_icons.get(category, '‚ùì')} {category}"
            category_label = ctk.CTkLabel(
                row_frame,
                text=category_text,
                font=("Arial", 10),
                text_color=self.theme.colors['text_primary']
            )
            category_label.grid(row=0, column=3, padx=5, pady=2)
            category_label.bind("<Button-1>", lambda e, idx=row_index: self._select_row(idx))
            category_label.bind("<Button-3>", self._show_context_menu)
            
            # –°—Ç–∞—Ç—É—Å
            status = participant.get('eligible_for_rewards', False)
            status_text = "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç" if status else "‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"
            status_color = self.theme.colors['success'] if status else self.theme.colors['error']
            status_label = ctk.CTkLabel(
                row_frame,
                text=status_text,
                font=("Arial", 10),
                text_color=status_color
            )
            status_label.grid(row=0, column=4, padx=5, pady=2)
            status_label.bind("<Button-1>", lambda e, idx=row_index: self._select_row(idx))
            status_label.bind("<Button-3>", self._show_context_menu)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            actions_frame = ctk.CTkFrame(row_frame)
            actions_frame.grid(row=0, column=5, padx=5, pady=2)
            actions_frame.configure(fg_color="transparent")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π
            details_btn = ctk.CTkButton(
                actions_frame,
                text="üìã",
                width=30,
                height=25,
                command=lambda p=participant: self._show_participant_details(p),
                fg_color=self.theme.colors['btn_secondary'],
                hover_color=self.theme.colors.get('btn_secondary_hover', self.theme.colors['btn_secondary'])
            )
            details_btn.pack(side='left', padx=1)
            
            # –ö–Ω–æ–ø–∫–∞ –∞–º–Ω–∏—Å—Ç–∏–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            if category == 'MISSED_PURCHASE':
                amnesty_btn = ctk.CTkButton(
                    actions_frame,
                    text="üéÅ",
                    width=30,
                    height=25,
                    command=lambda p=participant: self._request_participant_amnesty(p),
                    fg_color=self.theme.colors['warning'],
                    hover_color=self.theme.colors.get('warning_hover', self.theme.colors['warning'])
                )
                amnesty_btn.pack(side='left', padx=1)
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã (–µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç)
            if status:
                reward_btn = ctk.CTkButton(
                    actions_frame,
                    text="üí∞",
                    width=30,
                    height=25,
                    command=lambda p=participant: self._send_participant_reward(p),
                    fg_color=self.theme.colors['success'],
                    hover_color=self.theme.colors.get('success_hover', self.theme.colors['success'])
                )
                reward_btn.pack(side='left', padx=1)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
            self.table_rows.append(row_frame)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
    
    def _select_row(self, row_index: int):
        """–í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        try:
            # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
            self.selected_rows.clear()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä
            self.selected_rows.append(row_index)
            
            # –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞)
            logger.debug(f"üñ±Ô∏è –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_index + 1}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
    
    # ========== –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========
    
    def _refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    
    def _clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        try:
            logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            
            # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_bar.set_progress(0, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            self._clear_table_data()
            
            # –ü–æ–∫–∞–∑–∞—Ç—å placeholder
            self.table_placeholder = ctk.CTkLabel(
                self.table_scroll_frame,
                text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                font=("Arial", 14),
                text_color=self.theme.colors['text_muted']
            )
            self.table_placeholder.pack(expand=True, pady=50)
            
            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            for label in self.stat_labels.values():
                if hasattr(label, 'configure'):
                    label.configure(text="0")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def _export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV."""
        self._export_to_csv()
    
    def _export_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel."""
        logger.info("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel...")
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "Excel —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    def _show_filters(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        logger.info("üîç –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        messagebox.showinfo("–§–∏–ª—å—Ç—Ä—ã", "–û–∫–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    def _show_sort_options(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
        logger.info("üìä –û–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...")
        messagebox.showinfo("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", "–û–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    def _toggle_view(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        logger.info("üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞...")
        messagebox.showinfo("–í–∏–¥", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    def _on_period_change(self, value):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞."""
        if value == "custom":
            self.custom_frame.pack(fill='x', pady=5)
        else:
            self.custom_frame.pack_forget()
    
    def _set_quick_period(self, period):
        """–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞."""
        self.period_var.set(period)
        self._on_period_change(period)
    
    def set_staking_manager(self, staking_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞."""
        self.staking_manager = staking_manager
        logger.info("‚úÖ StakingManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Enhanced AnalysisTab")
    
    def _show_error(self, title: str, message: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            messagebox.showerror(title, message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    # ========== –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò ==========
    
    def _show_participant_details(self, participant):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
        try:
            if not participant:
                messagebox.showwarning("–î–µ—Ç–∞–ª–∏", "–ù–µ –≤—ã–±—Ä–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
            details_window = ctk.CTkToplevel(self)
            details_window.title(f"üìã –î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            details_window.geometry("600x500")
            details_window.transient(self)
            details_window.grab_set()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = ctk.CTkLabel(
                details_window,
                text=f"üìã –î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                font=("Arial", 18, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            title_label.pack(pady=20)
            
            # –¢–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏
            details_text = ctk.CTkTextbox(
                details_window,
                height=350,
                width=550,
                fg_color=self.theme.colors['bg_secondary']
            )
            details_text.pack(padx=20, pady=10, fill='both', expand=True)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
            address = participant.get('address', 'N/A')
            balance = participant.get('balance_plex', 0)
            category = participant.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            status = participant.get('eligible_for_rewards', False)
            contribution = participant.get('contribution_percent', 0)
            
            info_text = f"""
üìç –ê–î–†–ï–°:
{address}

üí∞ –ë–ê–õ–ê–ù–°:
{balance:.2f} PLEX

üìÇ –ö–ê–¢–ï–ì–û–†–ò–Ø:
{category}

üîÑ –°–¢–ê–¢–£–°:
{'‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–≥—Ä–∞–¥' if status else '‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–≥—Ä–∞–¥'}

üìä –í–ö–õ–ê–î:
{contribution:.2f}%

‚è∞ –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:
{participant.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ö–£–ü–û–ö:
–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {participant.get('purchase_count', 0)}
–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π: {participant.get('missed_days', 0)}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–í–û–î–û–í:
–ò—Å—Ö–æ–¥—è—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {participant.get('transfers_count', 0)}
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–ø: {participant.get('sent_to_corp', 0):.2f} PLEX

üèÜ –°–ò–°–¢–ï–ú–ê –ù–ê–ì–†–ê–î:
–ü—Ä–∞–≤–æ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É: {'–î–∞' if status else '–ù–µ—Ç'}
–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {participant.get('last_reward_date', '–ù–∏–∫–æ–≥–¥–∞')}
            """
            
            details_text.insert("1.0", info_text.strip())
            details_text.configure(state="disabled")
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            buttons_frame = ctk.CTkFrame(details_window)
            buttons_frame.pack(pady=10)
            buttons_frame.configure(fg_color="transparent")
            
            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
            if CLIPBOARD_AVAILABLE:
                copy_btn = ctk.CTkButton(
                    buttons_frame,
                    text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å",
                    command=lambda: pyperclip.copy(address),
                    fg_color=self.theme.colors['btn_primary'],
                    width=150,
                    height=30
                )
                copy_btn.pack(side='left', padx=5)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_btn = ctk.CTkButton(
                buttons_frame,
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                command=details_window.destroy,
                fg_color=self.theme.colors['btn_secondary'],
                width=100,
                height=30
            )
            close_btn.pack(side='left', padx=5)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏:\n{e}")
    
    def _request_participant_amnesty(self, participant):
        """–ó–∞–ø—Ä–æ—Å –∞–º–Ω–∏—Å—Ç–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
        try:
            if not participant:
                messagebox.showwarning("–ê–º–Ω–∏—Å—Ç–∏—è", "–ù–µ –≤—ã–±—Ä–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫")
                return
            
            address = participant.get('address', 'N/A')
            category = participant.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–º–Ω–∏—Å—Ç–∏–∏
            if 'SOLD_TOKEN' in category:
                messagebox.showerror(
                    "–ê–º–Ω–∏—Å—Ç–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞", 
                    f"–£—á–∞—Å—Ç–Ω–∏–∫ {address[:10]}... –ø—Ä–æ–¥–∞–≤–∞–ª —Ç–æ–∫–µ–Ω—ã.\n\n–ê–º–Ω–∏—Å—Ç–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º."
                )
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–∏
            result = messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏–∏",
                f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–º–Ω–∏—Å—Ç–∏—é —É—á–∞—Å—Ç–Ω–∏–∫—É?\n\n"
                f"–ê–¥—Ä–µ—Å: {address}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
            )
            
            if result:
                logger.info(f"‚úÖ –ê–º–Ω–∏—Å—Ç–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è {address}")
                messagebox.showinfo("–ê–º–Ω–∏—Å—Ç–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞", 
                                  f"–ê–º–Ω–∏—Å—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É:\n{address}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–º–Ω–∏—Å—Ç–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–º–Ω–∏—Å—Ç–∏—é:\n{e}")
    
    def _send_participant_reward(self, participant):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã —É—á–∞—Å—Ç–Ω–∏–∫—É."""
        try:
            if not participant:
                messagebox.showwarning("–ù–∞–≥—Ä–∞–¥–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫")
                return
            
            address = participant.get('address', 'N/A')
            balance = participant.get('balance_plex', 0)
            category = participant.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É
            if not participant.get('eligible_for_rewards', False):
                messagebox.showwarning(
                    "–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    f"–£—á–∞—Å—Ç–Ω–∏–∫ {address[:10]}... –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É.\n\n"
                    f"–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
                    f"–¢–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã."
                )
                return
            
            # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            reward_amount = min(balance * 0.1, 1000)  # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞, –º–∞–∫—Å–∏–º—É–º 1000 PLEX
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            result = messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã",
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É —É—á–∞—Å—Ç–Ω–∏–∫—É?\n\n"
                f"–ê–¥—Ä–µ—Å: {address}\n"
                f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} PLEX\n"
                f"–°—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥—ã: {reward_amount:.2f} PLEX\n\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
            )
            
            if result:
                logger.info(f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ {reward_amount:.2f} PLEX –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è {address}")
                messagebox.showinfo("–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞", 
                                  f"–ù–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞!\n\n"
                                  f"–£—á–∞—Å—Ç–Ω–∏–∫: {address}\n"
                                  f"–°—É–º–º–∞: {reward_amount:.2f} PLEX")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É:\n{e}")