"""
PLEX Dynamic Staking Manager - Rewards Tab
–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any, Tuple
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import customtkinter as ctk

from ui.themes.dark_theme import get_theme
from ui.components.progress_bar import ProgressBar, ProgressState
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class RewardsTab(ctk.CTkFrame):
    """
    –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–≥—Ä–∞–¥
    - –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–≤–æ–π–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
    - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç
    """
    
    def __init__(self, parent, reward_manager=None, widget_factory=None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RewardsTab.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            reward_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä RewardManager
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        self.theme = get_theme()
        self.widget_factory = widget_factory or SafeWidgetFactory(self.theme)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ñ—Ä–µ–π–º–∞
        frame_style = self.theme.get_frame_style('primary')
        frame_style.update(kwargs)
        super().__init__(parent, **frame_style)
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≥—Ä–∞–¥
        self.reward_manager = reward_manager
        
        # –î–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥
        self.current_rewards = []
        self.filtered_rewards = []
        self.calculation_running = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        
        logger.debug("üéÅ RewardsTab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_widgets(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = self.theme.create_styled_label(
            self,
            "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
            'title'
        )
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥
        self.settings_frame = self.theme.create_styled_frame(self, 'card')
        
        self.settings_title = self.theme.create_styled_label(
            self.settings_frame,
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥",
            'subtitle'
        )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥
        self.params_frame = self.theme.create_styled_frame(self.settings_frame, 'primary')
        
        # –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã
        self.reward_type_label = self.theme.create_styled_label(
            self.params_frame,
            "üèÜ –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:",
            'primary'
        )
        
        self.reward_type_var = ctk.StringVar(value="volume_based")
        self.reward_type_options = ["volume_based", "tier_based", "equal", "custom"]
        self.reward_type_menu = ctk.CTkOptionMenu(
            self.params_frame,
            values=["–ü–æ –æ–±—ä–µ–º—É", "–ü–æ —É—Ä–æ–≤–Ω—è–º", "–†–∞–≤–Ω—ã–µ", "–ö–∞—Å—Ç–æ–º"],
            variable=self.reward_type_var,
            command=self._on_reward_type_changed,
            **self.theme.get_button_style('secondary')
        )
        
        # –û–±—â–∏–π –ø—É–ª –Ω–∞–≥—Ä–∞–¥
        self.total_pool_label = self.theme.create_styled_label(
            self.params_frame,
            "üí∞ –û–±—â–∏–π –ø—É–ª (PLEX):",
            'primary'
        )
        
        self.total_pool_entry = self.theme.create_styled_entry(
            self.params_frame,
            placeholder="10000",
            width=120
        )
        self.total_pool_entry.insert(0, "10000")
        
        # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.multipliers_frame = self.theme.create_styled_frame(self.params_frame, 'secondary')
        
        self.multipliers_label = self.theme.create_styled_label(
            self.multipliers_frame,
            "üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:",
            'subtitle'
        )
        
        # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏
        self.multiplier_entries = {}
        multiplier_configs = [
            ("perfect", "‚≠ê –ò–¥–µ–∞–ª—å–Ω—ã–µ", "1.0"),
            ("missed_purchase", "‚ö†Ô∏è –° –ø—Ä–æ–ø—É—Å–∫–∞–º–∏", "0.8"),
            ("sold_token", "‚ùå –ü—Ä–æ–¥–∞–≤—à–∏–µ", "0.0"),
            ("transferred", "üîÑ –° –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏", "0.5")
        ]
        
        for key, label, default in multiplier_configs:
            frame = self.theme.create_styled_frame(self.multipliers_frame, 'primary')
            
            label_widget = self.theme.create_styled_label(frame, label, 'primary')
            
            entry = self.theme.create_styled_entry(
                frame,
                placeholder=default,
                width=80
            )
            entry.insert(0, default)
            
            self.multiplier_entries[key] = {
                'frame': frame,
                'label': label_widget,
                'entry': entry
            }
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = self.theme.create_styled_frame(self.settings_frame, 'primary')
        
        self.calculate_rewards_button = self.theme.create_styled_button(
            self.control_frame,
            "üíé –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã",
            'plex',
            command=self._calculate_rewards,
            width=150
        )
        
        self.export_rewards_button = self.theme.create_styled_button(
            self.control_frame,
            "üìã –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞",
            'success',
            command=self._export_rewards,
            width=120,
            state='disabled'
        )
        
        self.check_duplicates_button = self.theme.create_styled_button(
            self.control_frame,
            "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π",
            'warning',
            command=self._check_duplicates,
            width=130
        )
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = ProgressBar(
            self,
            **self.theme.get_progress_style()
        )
        
        # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_frame = self.theme.create_styled_frame(self, 'card')
        
        self.results_title = self.theme.create_styled_label(
            self.results_frame,
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥",
            'subtitle'
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä–∞–¥
        self.stats_frame = self.theme.create_styled_frame(self.results_frame, 'primary')
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.total_recipients_card = self._create_stat_card(
            self.stats_frame,
            "üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
            "0",
            'info'
        )
        
        self.allocated_rewards_card = self._create_stat_card(
            self.stats_frame,
            "üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
            "0 PLEX",
            'success'
        )
        
        self.remaining_pool_card = self._create_stat_card(
            self.stats_frame,
            "üíé –û—Å—Ç–∞—Ç–æ–∫ –ø—É–ª–∞",
            "0 PLEX",
            'warning'
        )
        
        self.avg_reward_card = self._create_stat_card(
            self.stats_frame,
            "üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞",
            "0 PLEX",
            'accent'
        )
        
        # –§–∏–ª—å—Ç—Ä—ã –Ω–∞–≥—Ä–∞–¥
        self.filter_frame = self.theme.create_styled_frame(self.results_frame, 'primary')
        
        self.filter_label = self.theme.create_styled_label(
            self.filter_frame,
            "üîç –§–∏–ª—å—Ç—Ä—ã:",
            'primary'
        )
        
        # –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
        self.search_entry = self.theme.create_styled_entry(
            self.filter_frame,
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É...",
            width=200
        )
        self.search_entry.bind('<KeyRelease>', self._on_search_changed)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
        self.min_reward_label = self.theme.create_styled_label(
            self.filter_frame,
            "–ú–∏–Ω. –Ω–∞–≥—Ä–∞–¥–∞:",
            'secondary'
        )
        
        self.min_reward_entry = self.theme.create_styled_entry(
            self.filter_frame,
            placeholder="0",
            width=80
        )
        self.min_reward_entry.bind('<KeyRelease>', self._on_filter_changed)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        self.sort_label = self.theme.create_styled_label(
            self.filter_frame,
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:",
            'secondary'
        )
        
        self.sort_var = ctk.StringVar(value="reward_desc")
        self.sort_menu = ctk.CTkOptionMenu(
            self.filter_frame,
            values=["–ü–æ –Ω–∞–≥—Ä–∞–¥–µ ‚Üì", "–ü–æ –Ω–∞–≥—Ä–∞–¥–µ ‚Üë", "–ü–æ –∞–¥—Ä–µ—Å—É", "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"],
            variable=self.sort_var,
            command=self._on_sort_changed,
            **self.theme.get_button_style('secondary')
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥
        self.rewards_frame = self.theme.create_styled_frame(self.results_frame, 'primary')
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        self.table_header = self.theme.create_styled_frame(self.rewards_frame, 'secondary')
        
        self.header_address = self.theme.create_styled_label(
            self.table_header,
            "–ê–¥—Ä–µ—Å",
            'primary'
        )
        
        self.header_category = self.theme.create_styled_label(
            self.table_header,
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            'primary'
        )
        
        self.header_volume = self.theme.create_styled_label(
            self.table_header,
            "–û–±—ä–µ–º (USD)",
            'primary'
        )
        
        self.header_multiplier = self.theme.create_styled_label(
            self.table_header,
            "–ú–Ω–æ–∂–∏—Ç–µ–ª—å",
            'primary'
        )
        
        self.header_reward = self.theme.create_styled_label(
            self.table_header,
            "–ù–∞–≥—Ä–∞–¥–∞ (PLEX)",
            'primary'
        )
        
        self.header_status = self.theme.create_styled_label(
            self.table_header,
            "–°—Ç–∞—Ç—É—Å",
            'primary'
        )
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.table_scrollable = ctk.CTkScrollableFrame(
            self.rewards_frame,
            **self.theme.get_frame_style('primary')
        )
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç
        self.history_frame = self.theme.create_styled_frame(self, 'card')
        
        self.history_title = self.theme.create_styled_label(
            self.history_frame,
            "üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç",
            'subtitle'
        )
        
        self.history_button = self.theme.create_styled_button(
            self.history_frame,
            "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            'info',
            command=self._show_payment_history,
            width=150
        )
        
        # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_list = ctk.CTkScrollableFrame(
            self.history_frame,
            height=150,
            **self.theme.get_frame_style('secondary')
        )
    
    def _create_stat_card(self, parent, title: str, value: str, color_type: str) -> Dict[str, ctk.CTkLabel]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
            color_type: –¢–∏–ø —Ü–≤–µ—Ç–∞
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        """
        card_frame = self.theme.create_styled_frame(parent, 'card')
        
        title_label = self.theme.create_styled_label(
            card_frame,
            title,
            'secondary'
        )
        
        value_label = self.theme.create_styled_label(
            card_frame,
            value,
            'title'
        )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
        color = self.theme.get_status_color(color_type)
        value_label.configure(text_color=color)
        
        title_label.pack(pady=(10, 2))
        value_label.pack(pady=(2, 10))
        
        return {
            'frame': card_frame,
            'title': title_label,
            'value': value_label
        }
    
    def _setup_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label.pack(pady=(20, 10))
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_frame.pack(fill='x', padx=20, pady=10)
        
        self.settings_title.pack(pady=(15, 10))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.params_frame.pack(fill='x', padx=15, pady=5)
        
        # –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã
        reward_type_row = self.theme.create_styled_frame(self.params_frame, 'primary')
        reward_type_row.pack(fill='x', pady=5)
        
        self.reward_type_label.pack(side='left')
        self.reward_type_menu.pack(side='left', padx=(10, 20))
        
        self.total_pool_label.pack(side='left')
        self.total_pool_entry.pack(side='left', padx=(10, 0))
        
        # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏
        self.multipliers_frame.pack(fill='x', pady=(10, 5))
        self.multipliers_label.pack(pady=(10, 5))
        
        for key, config in self.multiplier_entries.items():
            config['frame'].pack(fill='x', pady=2)
            config['label'].pack(side='left', anchor='w', fill='x', expand=True)
            config['entry'].pack(side='right', padx=(5, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame.pack(fill='x', padx=15, pady=(10, 15))
        
        self.calculate_rewards_button.pack(side='left', padx=(0, 10))
        self.export_rewards_button.pack(side='left', padx=(0, 10))
        self.check_duplicates_button.pack(side='right')
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar.pack(fill='x', padx=20, pady=10)
        
        # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_frame.pack(fill='both', expand=True, padx=20, pady=(0, 20))
        
        self.results_title.pack(pady=(15, 10))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_frame.pack(fill='x', padx=15, pady=5)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä—è–¥
        self.total_recipients_card['frame'].pack(side='left', fill='x', expand=True, padx=(0, 5))
        self.allocated_rewards_card['frame'].pack(side='left', fill='x', expand=True, padx=5)
        self.remaining_pool_card['frame'].pack(side='left', fill='x', expand=True, padx=5)
        self.avg_reward_card['frame'].pack(side='left', fill='x', expand=True, padx=(5, 0))
        
        # –§–∏–ª—å—Ç—Ä—ã
        self.filter_frame.pack(fill='x', padx=15, pady=10)
        
        self.filter_label.pack(side='left', padx=(0, 10))
        self.search_entry.pack(side='left', padx=(0, 15))
        self.min_reward_label.pack(side='left', padx=(0, 5))
        self.min_reward_entry.pack(side='left', padx=(0, 15))
        self.sort_label.pack(side='left', padx=(0, 5))
        self.sort_menu.pack(side='left')
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥
        self.rewards_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
          # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        self.table_header.pack(fill='x', pady=(0, 5))
        self.header_address.pack(side='left', fill='x', expand=True)
        self.header_category.configure(width=100)
        self.header_category.pack(side='left')
        self.header_volume.configure(width=100)
        self.header_volume.pack(side='left')
        self.header_multiplier.configure(width=80)
        self.header_multiplier.pack(side='left')
        self.header_reward.configure(width=120)
        self.header_reward.pack(side='left')
        self.header_status.configure(width=80)
        self.header_status.pack(side='left')
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞
        self.table_scrollable.pack(fill='both', expand=True, pady=(5, 0))
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç
        self.history_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        self.history_title.pack(pady=(15, 5))
        self.history_button.pack(pady=5)
        self.history_list.pack(fill='x', padx=15, pady=(0, 15))
    
    def _on_reward_type_changed(self, value: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã."""
        logger.debug(f"üéØ –ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: {value}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    
    def _on_search_changed(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        self._apply_filters()
    
    def _on_filter_changed(self, event=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        self._apply_filters()
    
    def _on_sort_changed(self, value: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
        self._apply_filters()
    
    def _apply_filters(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –Ω–∞–≥—Ä–∞–¥–∞–º."""
        if not self.current_rewards:
            return
        
        try:
            search_text = self.search_entry.get().lower()
            min_reward_text = self.min_reward_entry.get()
            min_reward = float(min_reward_text) if min_reward_text else 0
            sort_type = self.sort_var.get()
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            filtered = []
            for reward in self.current_rewards:
                # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
                if search_text and search_text not in reward.get('address', '').lower():
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
                if reward.get('reward_amount', 0) < min_reward:
                    continue
                
                filtered.append(reward)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            sort_mapping = {
                "–ü–æ –Ω–∞–≥—Ä–∞–¥–µ ‚Üì": lambda x: -x.get('reward_amount', 0),
                "–ü–æ –Ω–∞–≥—Ä–∞–¥–µ ‚Üë": lambda x: x.get('reward_amount', 0),
                "–ü–æ –∞–¥—Ä–µ—Å—É": lambda x: x.get('address', ''),
                "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏": lambda x: x.get('category', '')
            }
            
            if sort_type in sort_mapping:
                filtered.sort(key=sort_mapping[sort_type])
            
            self.filtered_rewards = filtered
            self._update_rewards_table()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def _calculate_rewards(self) -> None:
        """–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        if self.calculation_running:
            return
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            total_pool = self._get_total_pool()
            if total_pool is None or total_pool <= 0:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –Ω–∞–≥—Ä–∞–¥")
                return
            
            multipliers = self._get_multipliers()
            if not multipliers:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ UI
            self.calculation_running = True
            self.calculate_rewards_button.configure(state='disabled')
            self.export_rewards_button.configure(state='disabled')
            
            # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            self.progress_bar.reset()
            self.progress_bar.set_range(0, 100)
            self.progress_bar.start()
            
            # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            calc_thread = threading.Thread(
                target=self._run_calculation_thread,
                args=(total_pool, multipliers),
                daemon=True
            )
            calc_thread.start()
            
            logger.info(f"üíé –ó–∞–ø—É—â–µ–Ω —Ä–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ —Å –ø—É–ª–æ–º {total_pool} PLEX")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç:\\n{e}")
            self._calculation_completed(success=False)
    
    def _run_calculation_thread(self, total_pool: float, multipliers: Dict[str, float]) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def update_progress(value, message=""):
                if self.calculation_running:
                    self.after_idle(lambda: self.progress_bar.set_progress(value, message))
            
            # –≠—Ç–∞–ø—ã —Ä–∞—Å—á–µ—Ç–∞
            update_progress(10, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            if not self.calculation_running:
                return
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥
            # if self.reward_manager:
            #     result = await self.reward_manager.calculate_rewards(
            #         total_pool=total_pool,
            #         multipliers=multipliers,
            #         reward_type=self.reward_type_var.get()
            #     )
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            import time
            import random
            
            for i in range(10, 100, 15):
                if not self.calculation_running:
                    return
                
                time.sleep(0.3)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
                update_progress(i, f"–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥... {i}%")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            demo_rewards = self._create_demo_rewards(total_pool, multipliers)
            
            update_progress(100, "–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.after_idle(lambda: self._calculation_completed(success=True, rewards=demo_rewards))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            self.after_idle(lambda: self._calculation_completed(success=False, error=str(e)))
    
    def _create_demo_rewards(self, total_pool: float, multipliers: Dict[str, float]) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥."""
        import random
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        rewards = []
        categories = ['perfect', 'missed_purchase', 'sold_token', 'transferred']
        
        for i in range(30):
            category = random.choice(categories)
            volume = random.uniform(100, 50000)
            base_reward = (volume / 1000) * 10  # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞
            final_reward = base_reward * multipliers.get(category, 1.0)
            
            reward = {
                'address': f"0x{''.join(random.choices('0123456789abcdef', k=40))}",
                'category': category,
                'volume_usd': Decimal(str(volume)),
                'multiplier': multipliers.get(category, 1.0),
                'reward_amount': Decimal(str(final_reward)),
                'status': 'pending',
                'calculation_time': datetime.now()
            }
            rewards.append(reward)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –æ–±—â–µ–º—É –ø—É–ª—É
        total_calculated = sum(r['reward_amount'] for r in rewards)
        if total_calculated > 0:
            scaling_factor = Decimal(str(total_pool)) / total_calculated
            for reward in rewards:
                reward['reward_amount'] = reward['reward_amount'] * scaling_factor
        
        return rewards
    
    def _calculation_completed(self, success: bool, rewards: List = None, error: str = "") -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥."""
        try:
            self.calculation_running = False
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            self.calculate_rewards_button.configure(state='normal')
            
            if success and rewards:
                # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                self.progress_bar.complete()
                self.current_rewards = rewards
                self.export_rewards_button.configure(state='normal')
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._update_statistics(rewards)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                self.filtered_rewards = rewards
                self._update_rewards_table()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–∞–≥—Ä–∞–¥—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è {len(rewards)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
                
            else:
                # –û—à–∏–±–∫–∞
                self.progress_bar.error(error)
                error_msg = f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥:\\n{error}" if error else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
    
    def _update_statistics(self, rewards: List[Dict[str, Any]]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≥—Ä–∞–¥."""
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            total_recipients = len(rewards)
            self.total_recipients_card['value'].configure(text=str(total_recipients))
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
            allocated = sum(r.get('reward_amount', 0) for r in rewards)
            self.allocated_rewards_card['value'].configure(text=f"{allocated:,.0f} PLEX")
            
            # –û—Å—Ç–∞—Ç–æ–∫ –ø—É–ª–∞
            total_pool = self._get_total_pool() or 0
            remaining = max(0, total_pool - float(allocated))
            self.remaining_pool_card['value'].configure(text=f"{remaining:,.0f} PLEX")
            
            # –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞
            avg_reward = allocated / total_recipients if total_recipients > 0 else 0
            self.avg_reward_card['value'].configure(text=f"{avg_reward:,.0f} PLEX")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≥—Ä–∞–¥: {e}")
    
    def _update_rewards_table(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥."""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
            for widget in self.table_scrollable.winfo_children():
                widget.destroy()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
            for i, reward in enumerate(self.filtered_rewards[:50]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self._create_reward_row(reward, i)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≥—Ä–∞–¥: {e}")
    
    def _create_reward_row(self, reward: Dict[str, Any], index: int) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        try:
            # –§—Ä–µ–π–º —Å—Ç—Ä–æ–∫–∏
            row_style = 'secondary' if index % 2 == 0 else 'primary'
            row_frame = self.theme.create_styled_frame(self.table_scrollable, row_style)
            row_frame.pack(fill='x', pady=1)
            
            # –ê–¥—Ä–µ—Å (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
            address = reward.get('address', '')
            short_address = f"{address[:10]}...{address[-8:]}" if len(address) > 18 else address
            
            address_label = self.theme.create_styled_label(
                row_frame,
                short_address,
                'primary'
            )
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ü–≤–µ—Ç–æ–º
            category = reward.get('category', 'unknown')
            category_colors = {
                'perfect': 'success',
                'missed_purchase': 'warning',
                'sold_token': 'error',
                'transferred': 'info'
            }
            category_color = category_colors.get(category, 'primary')
            
            category_text = {
                'perfect': '‚≠ê',
                'missed_purchase': '‚ö†Ô∏è',
                'sold_token': '‚ùå',
                'transferred': 'üîÑ'
            }.get(category, category)
            
            category_label = self.theme.create_styled_label(
                row_frame,
                category_text,
                'primary'
            )
            category_label.configure(text_color=self.theme.get_status_color(category_color))
            
            # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            volume = reward.get('volume_usd', Decimal('0'))
            volume_label = self.theme.create_styled_label(
                row_frame,
                f"${volume:,.0f}",
                'primary'
            )
            
            # –ú–Ω–æ–∂–∏—Ç–µ–ª—å
            multiplier = reward.get('multiplier', 1.0)
            multiplier_label = self.theme.create_styled_label(
                row_frame,
                f"{multiplier:.1f}x",
                'secondary'
            )
            
            # –ù–∞–≥—Ä–∞–¥–∞
            reward_amount = reward.get('reward_amount', Decimal('0'))
            reward_label = self.theme.create_styled_label(
                row_frame,
                f"{reward_amount:,.0f}",
                'accent'
            )
            
            # –°—Ç–∞—Ç—É—Å
            status = reward.get('status', 'pending')
            status_colors = {
                'pending': 'warning',
                'paid': 'success',
                'failed': 'error'
            }
            status_color = status_colors.get(status, 'primary')
            
            status_text = {
                'pending': '‚è≥',
                'paid': '‚úÖ',
                'failed': '‚ùå'
            }.get(status, status)
            
            status_label = self.theme.create_styled_label(
                row_frame,
                status_text,
                'primary'
            )
            status_label.configure(text_color=self.theme.get_status_color(status_color))
              # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            address_label.pack(side='left', fill='x', expand=True, padx=(10, 5))
            category_label.configure(width=100)
            category_label.pack(side='left', padx=5)
            volume_label.configure(width=100)
            volume_label.pack(side='left', padx=5)
            multiplier_label.configure(width=80)
            multiplier_label.pack(side='left', padx=5)
            reward_label.configure(width=120)
            reward_label.pack(side='left', padx=5)
            status_label.configure(width=80)
            status_label.pack(side='left', padx=(5, 10))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
    
    def _get_total_pool(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—É–ª–∞ –Ω–∞–≥—Ä–∞–¥."""
        try:
            value_str = self.total_pool_entry.get()
            if not value_str:
                return None
            
            return float(value_str)
            
        except ValueError:
            return None
    
    def _get_multipliers(self) -> Optional[Dict[str, float]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        try:
            multipliers = {}
            
            for key, config in self.multiplier_entries.items():
                value_str = config['entry'].get()
                if not value_str:
                    return None
                
                multipliers[key] = float(value_str)
            
            return multipliers
            
        except ValueError:
            return None
    
    def _export_rewards(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥."""
        if not self.current_rewards:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        try:
            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = filedialog.asksaveasfilename(
                title="–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥",
                defaultextension=".csv",
                filetypes=[
                    ("CSV files", "*.csv"),
                    ("Excel files", "*.xlsx"),
                    ("JSON files", "*.json"),
                    ("All files", "*.*")
                ]
            )
            
            if not file_path:
                return
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if file_path.endswith('.csv'):
                self._export_rewards_to_csv(file_path)
            elif file_path.endswith('.xlsx'):
                self._export_rewards_to_excel(file_path)
            elif file_path.endswith('.json'):
                self._export_rewards_to_json(file_path)
            else:
                self._export_rewards_to_csv(file_path)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤:\\n{file_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\\n{e}")
    
    def _export_rewards_to_csv(self, file_path: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ –≤ CSV —Ñ–æ—Ä–º–∞—Ç."""
        import csv
        
        with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'address', 'category', 'volume_usd', 'multiplier', 
                'reward_amount', 'status', 'calculation_time'
            ]
            
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for reward in self.filtered_rewards:
                writer.writerow({
                    'address': reward.get('address', ''),
                    'category': reward.get('category', ''),
                    'volume_usd': float(reward.get('volume_usd', 0)),
                    'multiplier': reward.get('multiplier', 0),
                    'reward_amount': float(reward.get('reward_amount', 0)),
                    'status': reward.get('status', ''),
                    'calculation_time': reward.get('calculation_time', '').isoformat() if reward.get('calculation_time') else ''
                })
    
    def _export_rewards_to_excel(self, file_path: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ –≤ Excel —Ñ–æ—Ä–º–∞—Ç."""
        try:
            import pandas as pd
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = []
            for reward in self.filtered_rewards:
                data.append({
                    '–ê–¥—Ä–µ—Å': reward.get('address', ''),
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': reward.get('category', ''),
                    '–û–±—ä–µ–º USD': float(reward.get('volume_usd', 0)),
                    '–ú–Ω–æ–∂–∏—Ç–µ–ª—å': reward.get('multiplier', 0),
                    '–ù–∞–≥—Ä–∞–¥–∞ PLEX': float(reward.get('reward_amount', 0)),
                    '–°—Ç–∞—Ç—É—Å': reward.get('status', ''),
                    '–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞': reward.get('calculation_time', '')
                })
            
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            df = pd.DataFrame(data)
            df.to_excel(file_path, index=False, engine='openpyxl')
            
        except ImportError:
            # Fallback –Ω–∞ CSV –µ—Å–ª–∏ pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            self._export_rewards_to_csv(file_path.replace('.xlsx', '.csv'))
    
    def _export_rewards_to_json(self, file_path: str) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç."""
        import json
        from decimal import Decimal
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Decimal –∏ datetime
        def default_serializer(obj):
            if isinstance(obj, Decimal):
                return float(obj)
            elif isinstance(obj, datetime):
                return obj.isoformat()
            raise TypeError(f"Object of type {type(obj)} is not JSON serializable")
        
        with open(file_path, 'w', encoding='utf-8') as jsonfile:
            json.dump(
                {
                    'rewards': self.filtered_rewards,
                    'export_time': datetime.now().isoformat(),
                    'total_rewards': len(self.filtered_rewards)
                },
                jsonfile,
                indent=2,
                default=default_serializer,
                ensure_ascii=False
            )
    
    def _check_duplicates(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã."""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π —á–µ—Ä–µ–∑ DuplicateProtection
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            result = messagebox.askquestion(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π",
                "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã?\\n\\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."
            )
            
            if result == 'yes':
                # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                import time
                import threading
                
                def check_thread():
                    time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    self.after_idle(lambda: messagebox.showinfo(
                        "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
                        "‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.\\n\\n"
                        "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–ø–ª–∞—Ç–µ."
                    ))
                
                threading.Thread(target=check_thread, daemon=True).start()
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                self.progress_bar.set_indeterminate(True)
                self.progress_bar.set_progress(50, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π...")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É:\\n{e}")
    
    def _show_payment_history(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–ª–∞—Ç."""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            for widget in self.history_list.winfo_children():
                widget.destroy()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
            history_items = [
                {
                    'date': datetime.now() - timedelta(days=7),
                    'recipients': 45,
                    'total_amount': 12500,
                    'status': 'completed'
                },
                {
                    'date': datetime.now() - timedelta(days=14),
                    'recipients': 38,
                    'total_amount': 9800,
                    'status': 'completed'
                },
                {
                    'date': datetime.now() - timedelta(days=21),
                    'recipients': 52,
                    'total_amount': 15200,
                    'status': 'completed'
                }
            ]
            
            for i, item in enumerate(history_items):
                # –§—Ä–µ–π–º —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
                item_frame = self.theme.create_styled_frame(self.history_list, 'primary')
                item_frame.pack(fill='x', pady=2, padx=5)
                
                # –î–∞—Ç–∞
                date_str = item['date'].strftime('%Y-%m-%d %H:%M')
                date_label = self.theme.create_styled_label(
                    item_frame,
                    date_str,
                    'primary'
                )
                date_label.pack(side='left', anchor='w')
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–ª–∞—Ç–µ
                info_text = f"üë• {item['recipients']} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π ‚Ä¢ üí∞ {item['total_amount']:,} PLEX"
                info_label = self.theme.create_styled_label(
                    item_frame,
                    info_text,
                    'secondary'
                )
                info_label.pack(side='left', padx=(20, 0), anchor='w')
                
                # –°—Ç–∞—Ç—É—Å
                status_text = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ" if item['status'] == 'completed' else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                status_label = self.theme.create_styled_label(
                    item_frame,
                    status_text,
                    'accent'
                )
                status_label.pack(side='right', anchor='e')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é:\\n{e}")
    
    def set_reward_manager(self, reward_manager) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥."""
        self.reward_manager = reward_manager
        logger.debug("‚úÖ RewardManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è RewardsTab")


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['RewardsTab']


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏
    def demo_rewards_tab():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RewardsTab."""
        try:
            print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RewardsTab...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            root = ctk.CTk()
            root.title("PLEX Rewards Tab Demo")
            root.geometry("1400x900")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
            from ui.themes.dark_theme import apply_window_style
            apply_window_style(root)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞–≥—Ä–∞–¥
            rewards_tab = RewardsTab(root)
            rewards_tab.pack(fill='both', expand=True)
            
            print("‚úÖ RewardsTab –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            root.mainloop()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    # demo_rewards_tab()
    print("üí° –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ RewardsTab —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
