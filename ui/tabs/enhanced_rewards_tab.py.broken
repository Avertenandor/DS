"""
PLEX Dynamic Staking Manager - Enhanced Rewards Tab
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∫–Ω–æ–ø–æ–∫.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.1.0
"""

import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any, Tuple
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import customtkinter as ctk

from ui.themes.dark_theme import get_theme
from ui.components.progress_bar import ProgressBar, ProgressState
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory

logger = get_logger(__name__)


class EnhancedRewardsTab(ctk.CTkFrame):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –†–∞—Å—á–µ—Ç –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–≥—Ä–∞–¥
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏
    - –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–≤–æ–π–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
    - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç
    - –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è    """
    
    def __init__(self, parent, reward_manager=None, widget_factory=None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EnhancedRewardsTab.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            reward_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä RewardManager
            widget_factory: SafeWidgetFactory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        super().__init__(parent, **kwargs)
        
        self.theme = get_theme()
        self.widget_factory = widget_factory or SafeWidgetFactory(self.theme)
        self.reward_manager = reward_manager
        
        # –î–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥
        self.current_rewards = []
        self.filtered_rewards = []
        self.calculation_running = False
        self.payout_running = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        
        logger.info("‚úÖ Enhanced RewardsTab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self.title_label = ctk.CTkLabel(
                self,
                text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
                font=("Arial", 24, "bold"),
                text_color=self.theme.colors['text_primary']
            )
            
            # –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê–ì–†–ê–î–ê–ú–ò
            self.control_panel = self._create_control_panel()
            
            # –ü–ê–ù–ï–õ–¨ –ù–ê–°–¢–†–û–ï–ö –ù–ê–ì–†–ê–î
            self.settings_panel = self._create_settings_panel()
            
            # –ü–†–û–ì–†–ï–°–°-–ë–ê–†
            self.progress_bar = ProgressBar(self)
            
            # –ü–ê–ù–ï–õ–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
            self.results_panel = self._create_results_panel()
            
            logger.debug("‚úÖ –í—Å–µ –≤–∏–¥–∂–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤: {e}")
            raise
    
    def _create_control_panel(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏."""
        panel = ctk.CTkFrame(self)
        panel.configure(fg_color=self.theme.colors['bg_secondary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        title = ctk.CTkLabel(
            panel,
            text="üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title.pack(pady=(15, 10))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(panel)
        buttons_frame.configure(fg_color="transparent")
        buttons_frame.pack(fill='x', padx=15, pady=10)
        
        # –†—è–¥ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        row1 = ctk.CTkFrame(buttons_frame)
        row1.configure(fg_color="transparent")
        row1.pack(fill='x', pady=5)
        
        self.calculate_rewards_btn = ctk.CTkButton(
            row1,
            text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã",
            command=self._calculate_rewards,
            fg_color=self.theme.colors['btn_primary'],
            hover_color=self.theme.colors['btn_primary_hover'],
            font=("Arial", 12, "bold"),
            height=40,
            width=160
        )
        self.calculate_rewards_btn.pack(side='left', padx=(0, 10))
        
        self.preview_rewards_btn = ctk.CTkButton(
            row1,
            text="üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
            command=self._preview_rewards,
            fg_color=self.theme.colors['info'],
            font=("Arial", 12, "bold"),
            height=40,
            width=150
        )
        self.preview_rewards_btn.pack(side='left', padx=(0, 10))
        
        self.approve_rewards_btn = ctk.CTkButton(
            row1,
            text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å",
            command=self._approve_rewards,
            fg_color=self.theme.colors['success'],
            font=("Arial", 12, "bold"),
            height=40,
            width=130,
            state="disabled"
        )
        self.approve_rewards_btn.pack(side='left', padx=(0, 10))
        
        self.reject_rewards_btn = ctk.CTkButton(
            row1,
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            command=self._reject_rewards,
            fg_color=self.theme.colors['btn_danger'],
            font=("Arial", 12, "bold"),
            height=40,
            width=130,
            state="disabled"
        )
        self.reject_rewards_btn.pack(side='right')
        
        # –†—è–¥ 2: –í—ã–ø–ª–∞—Ç—ã
        row2 = ctk.CTkFrame(buttons_frame)
        row2.configure(fg_color="transparent")
        row2.pack(fill='x', pady=5)
        
        self.start_payout_btn = ctk.CTkButton(
            row2,
            text="üí∏ –ù–∞—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã",
            command=self._start_payout,
            fg_color=self.theme.colors['plex_primary'],
            font=("Arial", 12, "bold"),
            height=40,
            width=150,
            state="disabled"
        )
        self.start_payout_btn.pack(side='left', padx=(0, 10))
        
        self.stop_payout_btn = ctk.CTkButton(
            row2,
            text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã",
            command=self._stop_payout,
            fg_color=self.theme.colors['btn_danger'],
            font=("Arial", 12, "bold"),
            height=40,
            width=170,
            state="disabled"
        )
        self.stop_payout_btn.pack(side='left', padx=(0, 10))
        
        self.check_status_btn = ctk.CTkButton(
            row2,
            text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
            command=self._check_payout_status,
            fg_color=self.theme.colors['warning'],
            font=("Arial", 12, "bold"),
            height=40,
            width=150
        )
        self.check_status_btn.pack(side='left', padx=(0, 10))
        
        self.history_btn = ctk.CTkButton(
            row2,
            text="üìö –ò—Å—Ç–æ—Ä–∏—è",
            command=self._show_history,
            fg_color=self.theme.colors['btn_secondary'],
            font=("Arial", 12, "bold"),
            height=40,
            width=120
        )
        self.history_btn.pack(side='right')
        
        # –†—è–¥ 3: –≠–∫—Å–ø–æ—Ä—Ç –∏ —É—Ç–∏–ª–∏—Ç—ã
        row3 = ctk.CTkFrame(buttons_frame)
        row3.configure(fg_color="transparent")
        row3.pack(fill='x', pady=5)
        
        self.export_csv_btn = ctk.CTkButton(
            row3,
            text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV",
            command=self._export_csv,
            fg_color=self.theme.colors['success'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.export_csv_btn.pack(side='left', padx=(0, 10))
        
        self.export_excel_btn = ctk.CTkButton(
            row3,
            text="üìä –≠–∫—Å–ø–æ—Ä—Ç Excel",
            command=self._export_excel,
            fg_color=self.theme.colors['success'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.export_excel_btn.pack(side='left', padx=(0, 10))
        
        self.export_blockchain_btn = ctk.CTkButton(
            row3,
            text="‚õìÔ∏è –î–ª—è –±–ª–æ–∫—á–µ–π–Ω–∞",
            command=self._export_blockchain,
            fg_color=self.theme.colors['plex_secondary'],
            font=("Arial", 12, "bold"),
            height=35,
            width=130
        )
        self.export_blockchain_btn.pack(side='left', padx=(0, 10))
        
        self.validate_btn = ctk.CTkButton(
            row3,
            text="üîç –í–∞–ª–∏–¥–∞—Ü–∏—è",
            command=self._validate_rewards,
            fg_color=self.theme.colors['info'],
            font=("Arial", 12, "bold"),
            height=35,
            width=120
        )
        self.validate_btn.pack(side='right')
        
        return panel
    
    def _create_settings_panel(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥."""
        panel = ctk.CTkFrame(self)
        panel.configure(fg_color=self.theme.colors['bg_secondary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            panel,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title.pack(pady=(15, 10))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–µ—Ç–∫–µ
        settings_grid = ctk.CTkFrame(panel)
        settings_grid.configure(fg_color="transparent")
        settings_grid.pack(fill='x', padx=15, pady=10)
        
        # –†—è–¥ 1: –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã
        reward_type_frame = ctk.CTkFrame(settings_grid)
        reward_type_frame.configure(fg_color="transparent")
        reward_type_frame.pack(fill='x', pady=5)
        
        ctk.CTkLabel(
            reward_type_frame,
            text="üèÜ –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:",
            text_color=self.theme.colors['text_secondary'],
            font=("Arial", 12, "bold")
        ).pack(side='left')
        
        self.reward_type_var = ctk.StringVar(value="volume_based")
        self.reward_type_menu = ctk.CTkOptionMenu(
            reward_type_frame,
            values=["–ü–æ –æ–±—ä–µ–º—É", "–ü–æ —É—Ä–æ–≤–Ω—è–º", "–†–∞–≤–Ω—ã–µ", "–ö–∞—Å—Ç–æ–º"],
            variable=self.reward_type_var,
            command=self._on_reward_type_change,
            fg_color=self.theme.colors['input_bg'],
            button_color=self.theme.colors['btn_primary'],
            width=150
        )
        self.reward_type_menu.pack(side='left', padx=(10, 0))
        
        # –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        quick_settings = ctk.CTkFrame(reward_type_frame)
        quick_settings.configure(fg_color="transparent")
        quick_settings.pack(side='right')
        
        ctk.CTkLabel(
            quick_settings,
            text="‚ö° –ë—ã—Å—Ç—Ä–æ:",
            text_color=self.theme.colors['text_secondary']
        ).pack(side='left', padx=(0, 5))
        
        for preset, text in [("conservative", "–ö–æ–Ω—Å–µ—Ä–≤."), ("balanced", "–°–±–∞–ª–∞–Ω."), ("aggressive", "–ê–≥—Ä–µ—Å.")]:
            btn = ctk.CTkButton(
                quick_settings,
                text=text,
                command=lambda p=preset: self._apply_preset(p),
                fg_color=self.theme.colors['btn_secondary'],
                width=70,
                height=25
            )
            btn.pack(side='left', padx=2)
        
        # –†—è–¥ 2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        params_frame = ctk.CTkFrame(settings_grid)
        params_frame.configure(fg_color="transparent")
        params_frame.pack(fill='x', pady=5)
        
        # –û–±—â–∏–π –ø—É–ª –Ω–∞–≥—Ä–∞–¥
        ctk.CTkLabel(
            params_frame,
            text="üí∞ –û–±—â–∏–π –ø—É–ª:",
            text_color=self.theme.colors['text_secondary'],
            font=("Arial", 12, "bold")
        ).pack(side='left')
          self.total_pool_entry = self.widget_factory.create_entry(
            params_frame,
            width=120
        )
        self.widget_factory.setup_placeholder(self.total_pool_entry, "1000.0")
        self.total_pool_entry.pack(side='left', padx=(10, 20))
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        ctk.CTkLabel(
            params_frame,
            text="üéØ –ú–∏–Ω. –Ω–∞–≥—Ä–∞–¥–∞:",
            text_color=self.theme.colors['text_secondary']
        ).pack(side='left')
        
        self.min_reward_entry = self.widget_factory.create_entry(
    params_frame,
    width=100
)
self.widget_factory.setup_placeholder(min_reward_entry, "0.1")
        self.min_reward_entry.pack(side='left', padx=(10, 20))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        self.auto_approve_var = ctk.BooleanVar()
        self.auto_approve_switch = ctk.CTkSwitch(
            params_frame,
            text="ü§ñ –ê–≤—Ç–æ-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            variable=self.auto_approve_var,
            text_color=self.theme.colors['text_secondary']
        )
        self.auto_approve_switch.pack(side='right', padx=(0, 20))
        
        # –†—è–¥ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        additional_frame = ctk.CTkFrame(settings_grid)
        additional_frame.configure(fg_color="transparent")
        additional_frame.pack(fill='x', pady=5)
        
        # –ö–æ–º–∏—Å—Å–∏—è
        ctk.CTkLabel(
            additional_frame,
            text="üí∏ –ö–æ–º–∏—Å—Å–∏—è (%):",
            text_color=self.theme.colors['text_secondary']
        ).pack(side='left')
        
        self.fee_entry = self.widget_factory.create_entry(
    additional_frame,
    width=80
)
self.widget_factory.setup_placeholder(fee_entry, "0.5")
        self.fee_entry.pack(side='left', padx=(10, 20))
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –≤ —á–∞—Å
        ctk.CTkLabel(
            additional_frame,
            text="‚è±Ô∏è –ú–∞–∫—Å –≤ —á–∞—Å:",
            text_color=self.theme.colors['text_secondary']
        ).pack(side='left')
        
        self.max_per_hour_entry = self.widget_factory.create_entry(
    additional_frame,
    width=80
)
self.widget_factory.setup_placeholder(max_per_hour_entry, "100")
        self.max_per_hour_entry.pack(side='left', padx=(10, 20))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.safe_mode_var = ctk.BooleanVar(value=True)
        self.safe_mode_switch = ctk.CTkSwitch(
            additional_frame,
            text="üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º",
            variable=self.safe_mode_var,
            text_color=self.theme.colors['text_secondary']
        )
        self.safe_mode_switch.pack(side='right')
        
        return panel
    
    def _create_results_panel(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        panel = ctk.CTkFrame(self)
        panel.configure(fg_color=self.theme.colors['bg_secondary'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        header = ctk.CTkFrame(panel)
        header.configure(fg_color="transparent")
        header.pack(fill='x', padx=15, pady=(15, 10))
        
        title = ctk.CTkLabel(
            header,
            text="üéÅ –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥",
            font=("Arial", 16, "bold"),
            text_color=self.theme.colors['text_primary']
        )
        title.pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
        list_controls = ctk.CTkFrame(header)
        list_controls.configure(fg_color="transparent")
        list_controls.pack(side='right')
        
        self.search_entry = self.widget_factory.create_entry(
    list_controls,
    width=200
)
self.widget_factory.setup_placeholder(search_entry, "üîç –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É...")
        self.search_entry.pack(side='left', padx=(0, 10))
        
        self.filter_btn = ctk.CTkButton(
            list_controls,
            text="üîΩ –§–∏–ª—å—Ç—Ä",
            command=self._show_filter_menu,
            fg_color=self.theme.colors['btn_secondary'],
            width=80,
            height=30
        )
        self.filter_btn.pack(side='left', padx=(0, 5))
        
        self.sort_btn = ctk.CTkButton(
            list_controls,
            text="üìä –°–æ—Ä—Ç.",
            command=self._show_sort_menu,
            fg_color=self.theme.colors['btn_secondary'],
            width=80,
            height=30
        )
        self.sort_btn.pack(side='left')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä–∞–¥
        self.stats_frame = ctk.CTkFrame(panel)
        self.stats_frame.configure(fg_color=self.theme.colors['bg_tertiary'])
        self.stats_frame.pack(fill='x', padx=15, pady=10)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≥—Ä–∞–¥
        self._create_reward_stats_cards()
        
        # –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥
        self.rewards_list_frame = ctk.CTkFrame(panel)
        self.rewards_list_frame.configure(fg_color=self.theme.colors['bg_tertiary'])
        self.rewards_list_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
        self.rewards_placeholder = ctk.CTkLabel(
            self.rewards_list_frame,
            text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞",
            font=("Arial", 14),
            text_color=self.theme.colors['text_muted']
        )
        self.rewards_placeholder.pack(expand=True, pady=50)
        
        return panel
    
    def _create_reward_stats_cards(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≥—Ä–∞–¥."""
        stats_data = [
            ("üí∞", "–û–±—â–∏–π –ø—É–ª", "0.0 PLEX", "plex_primary"),
            ("üë•", "–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "0", "info"),
            ("üéÅ", "–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞", "0.0 PLEX", "success"),
            ("üìä", "–°—Ç–∞—Ç—É—Å", "–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ", "warning")
        ]
        
        for icon, title, value, color in stats_data:
            card = ctk.CTkFrame(self.stats_frame)
            card.configure(fg_color=self.theme.colors['bg_primary'])
            card.pack(side='left', fill='x', expand=True, padx=5, pady=10)
            
            ctk.CTkLabel(
                card,
                text=icon,
                font=("Arial", 20)
            ).pack(pady=(10, 0))
            
            ctk.CTkLabel(
                card,
                text=title,
                font=("Arial", 11),
                text_color=self.theme.colors['text_secondary']
            ).pack()
            
            ctk.CTkLabel(
                card,
                text=value,
                font=("Arial", 14, "bold"),
                text_color=self.theme.colors[color] if color in self.theme.colors else self.theme.colors['text_primary']
            ).pack(pady=(0, 10))
    
    def _setup_layout(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid weights
            self.grid_rowconfigure(4, weight=1)  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—Ç—Å—è
            self.grid_columnconfigure(0, weight=1)
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.title_label.grid(row=0, column=0, pady=(20, 10), sticky="ew")
            self.control_panel.grid(row=1, column=0, padx=20, pady=10, sticky="ew")
            self.settings_panel.grid(row=2, column=0, padx=20, pady=10, sticky="ew")
            self.progress_bar.grid(row=3, column=0, padx=20, pady=10, sticky="ew")
            self.results_panel.grid(row=4, column=0, padx=20, pady=(0, 20), sticky="nsew")
            
            logger.debug("‚úÖ Layout –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ layout: {e}")
    
    # –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    def _calculate_rewards(self):
        """–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥."""
        logger.info("üßÆ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥...")
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        self.calculate_rewards_btn.configure(state="disabled")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞
        self._simulate_calculation()
    
    def _simulate_calculation(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥."""
        def run_calculation():
            try:
                self.calculation_running = True
                
                for i in range(101):
                    if not self.calculation_running:
                        break
                    
                    progress = i / 100
                    message = f"–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥... {i}%"
                    
                    self.after(0, lambda p=progress, m=message: self.progress_bar.set_progress(p, m))
                    threading.Event().wait(0.03)
                
                if self.calculation_running:
                    self.after(0, self._calculation_completed)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
                self.after(0, self._reset_buttons)
        
        thread = threading.Thread(target=run_calculation, daemon=True)
        thread.start()
    
    def _calculation_completed(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥."""
        logger.info("‚úÖ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        self.calculation_running = False
        self.calculate_rewards_btn.configure(state="normal")
        self.approve_rewards_btn.configure(state="normal")
        self.reject_rewards_btn.configure(state="normal")
        
        self.progress_bar.set_progress(1.0, "–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏
        self.rewards_placeholder.configure(
            text="‚úÖ –ù–∞–π–¥–µ–Ω–æ 75 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –Ω–∞–≥—Ä–∞–¥\\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: 856.34 PLEX"
        )
    
    def _preview_rewards(self):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–≥—Ä–∞–¥."""
        logger.info("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–≥—Ä–∞–¥...")
        messagebox.showinfo("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", "–û–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    def _approve_rewards(self):
        """–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥."""
        logger.info("‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥...")
        self.start_payout_btn.configure(state="normal")
        messagebox.showinfo("–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "–ù–∞–≥—Ä–∞–¥—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã!")
    
    def _reject_rewards(self):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥."""
        logger.info("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥...")
        self._reset_buttons()
        messagebox.showinfo("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á–µ—Ç.")
    
    def _start_payout(self):
        """–ù–∞—á–∞–ª–æ –≤—ã–ø–ª–∞—Ç."""
        logger.info("üí∏ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã...")
        
        self.payout_running = True
        self.start_payout_btn.configure(state="disabled")
        self.stop_payout_btn.configure(state="normal")
        
        messagebox.showinfo("–í—ã–ø–ª–∞—Ç—ã", "–í—ã–ø–ª–∞—Ç—ã –Ω–∞—á–∞—Ç—ã! (–î–µ–º–æ —Ä–µ–∂–∏–º)")
    
    def _stop_payout(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–ª–∞—Ç."""
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–ª–∞—Ç...")
        
        self.payout_running = False
        self.start_payout_btn.configure(state="normal")
        self.stop_payout_btn.configure(state="disabled")
        
        messagebox.showinfo("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "–í—ã–ø–ª–∞—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def _check_payout_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç."""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç...")
        messagebox.showinfo("–°—Ç–∞—Ç—É—Å", "–°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç: –í –ø—Ä–æ—Ü–µ—Å—Å–µ (–î–µ–º–æ)")
    
    def _show_history(self):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–ª–∞—Ç."""
        logger.info("üìö –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç...")
        messagebox.showinfo("–ò—Å—Ç–æ—Ä–∏—è", "–û–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–ª–∞—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    def _export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV."""
        logger.info("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...")
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    def _export_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel."""
        logger.info("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel...")
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "Excel —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    def _export_blockchain(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω–∞."""
        logger.info("‚õìÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω–∞...")
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–§–∞–π–ª –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω!")
    
    def _validate_rewards(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥."""
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥...")
        messagebox.showinfo("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–í—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
    
    def _show_filter_menu(self):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        logger.info("üîΩ –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        messagebox.showinfo("–§–∏–ª—å—Ç—Ä—ã", "–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    def _show_sort_menu(self):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
        logger.info("üìä –ú–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...")
        messagebox.showinfo("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", "–ú–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    def _on_reward_type_change(self, value):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã."""
        logger.debug(f"–¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {value}")
    
    def _apply_preset(self, preset):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        logger.info(f"‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞: {preset}")
        
        presets = {
            "conservative": {"pool": "500.0", "min": "1.0", "fee": "0.1"},
            "balanced": {"pool": "1000.0", "min": "0.5", "fee": "0.5"},
            "aggressive": {"pool": "2000.0", "min": "0.1", "fee": "1.0"}
        }
        
        if preset in presets:
            p = presets[preset]
            self.total_pool_entry.delete(0, "end")
            self.total_pool_entry.insert(0, p["pool"])
            self.min_reward_entry.delete(0, "end")
            self.min_reward_entry.insert(0, p["min"])
            self.fee_entry.delete(0, "end")
            self.fee_entry.insert(0, p["fee"])
    
    def _reset_buttons(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫."""
        self.calculate_rewards_btn.configure(state="normal")
        self.approve_rewards_btn.configure(state="disabled")
        self.reject_rewards_btn.configure(state="disabled")
        self.start_payout_btn.configure(state="disabled")
    
    def set_reward_manager(self, reward_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥."""
        self.reward_manager = reward_manager
        logger.info("‚úÖ RewardManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Enhanced RewardsTab")
