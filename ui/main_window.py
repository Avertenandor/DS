"""
–ú–æ–¥—É–ª—å: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ UI –¥–ª—è PLEX Dynamic Staking Manager
–û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import customtkinter as ctk
from datetime import datetime, timedelta
import asyncio
import threading
from typing import Dict, List, Optional
import json

from config.constants import UI_COLORS, TOKEN_NAME, TOKEN_SYMBOL
from config.settings import settings
from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory
from core.participant_analyzer_v2 import ParticipantAnalyzer, ParticipantData
from db.models import DatabaseManager

logger = get_logger("PLEX_UI")

class PLEXStakingUI:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("green")
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root = ctk.CTk()
        self.root.title(f"PLEX Dynamic Staking Manager v1.0.0")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 800)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.analyzer = ParticipantAnalyzer()
        self.db_manager = DatabaseManager()
        self.participants: Dict[str, ParticipantData] = {}
        self.analysis_running = False
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è UI
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É")
        self.status_var = tk.StringVar(value="–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        self._setup_ui()
        self._setup_styles()
        
        logger.info("üé® UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.header_frame = ctk.CTkFrame(self.main_frame)
        self.header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        title_label = ctk.CTkLabel(
            self.header_frame,
            text=f"üöÄ PLEX Dynamic Staking Manager",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(side="left", padx=20, pady=15)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        self.connection_label = ctk.CTkLabel(
            self.header_frame,
            text="üîó QuickNode BSC | üìä SQLite DB",
            font=ctk.CTkFont(size=12)
        )
        self.connection_label.pack(side="right", padx=20, pady=15)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã
        self.tab_view = ctk.CTkTabview(self.main_frame)
        self.tab_view.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tab_analysis = self.tab_view.add("üìä –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        self.tab_results = self.tab_view.add("üë• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        self.tab_rewards = self.tab_view.add("üèÜ –ù–∞–≥—Ä–∞–¥—ã")
        self.tab_export = self.tab_view.add("üìÅ –≠–∫—Å–ø–æ—Ä—Ç")
        self.tab_settings = self.tab_view.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        self._setup_analysis_tab()
        self._setup_results_tab()
        self._setup_rewards_tab()
        self._setup_export_tab()
        self._setup_settings_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_frame = ctk.CTkFrame(self.main_frame)
        self.status_frame.pack(fill="x", padx=10, pady=(5, 10))
        
        self.status_label = ctk.CTkLabel(
            self.status_frame,
            textvariable=self.status_var,
            font=ctk.CTkFont(size=11)
        )
        self.status_label.pack(side="left", padx=15, pady=8)
        
        self.progress_label = ctk.CTkLabel(
            self.status_frame,
            textvariable=self.progress_var,
            font=ctk.CTkFont(size=11)
        )
        self.progress_label.pack(side="right", padx=15, pady=8)

    def _setup_analysis_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        params_frame = ctk.CTkFrame(self.tab_analysis)
        params_frame.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(
            params_frame,
            text="üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        period_frame = ctk.CTkFrame(params_frame)
        period_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        ctk.CTkLabel(period_frame, text="üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:").grid(row=0, column=0, padx=10, pady=10, sticky="w")
        
        self.period_var = tk.StringVar(value="last_30_days")
        period_menu = ctk.CTkOptionMenu(
            period_frame,
            variable=self.period_var,
            values=["last_7_days", "last_30_days", "last_90_days", "custom"]
        )
        period_menu.grid(row=0, column=1, padx=10, pady=10, sticky="w")
        
        # –ë–ª–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞        ctk.CTkLabel(period_frame, text="üì¶ –ù–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.start_block_entry = self.widget_factory.create_entry(
            period_frame
        )
        self.widget_factory.setup_placeholder(self.start_block_entry, "–ê–≤—Ç–æ")
        self.start_block_entry.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
        
        ctk.CTkLabel(period_frame, text="üì¶ –ö–æ–Ω–µ—á–Ω—ã–π –±–ª–æ–∫:").grid(row=2, column=0, padx=10, pady=5, sticky="w")
        self.end_block_entry = self.widget_factory.create_entry(
            period_frame
        )
        self.widget_factory.setup_placeholder(self.end_block_entry, "–ü–æ—Å–ª–µ–¥–Ω–∏–π")
        self.end_block_entry.grid(row=2, column=1, padx=10, pady=5, sticky="ew")
        
        period_frame.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_frame = ctk.CTkFrame(self.tab_analysis)
        controls_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        self.start_btn = ctk.CTkButton(
            controls_frame,
            text="üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑",
            command=self._start_analysis,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40
        )
        self.start_btn.pack(side="left", padx=20, pady=15)
        
        self.stop_btn = ctk.CTkButton(
            controls_frame,
            text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            command=self._stop_analysis,
            state="disabled",
            fg_color="red",
            height=40
        )
        self.stop_btn.pack(side="left", padx=10, pady=15)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
        progress_frame = ctk.CTkFrame(self.tab_analysis)
        progress_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        ctk.CTkLabel(
            progress_frame,
            text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        self.progress_bar = ctk.CTkProgressBar(progress_frame)
        self.progress_bar.pack(fill="x", padx=20, pady=10)
        self.progress_bar.set(0)
        
        self.progress_text = ctk.CTkTextbox(progress_frame, height=200)
        self.progress_text.pack(fill="both", expand=True, padx=20, pady=(0, 15))

    def _setup_results_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ctk.CTkFrame(self.tab_results)
        stats_frame.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(
            stats_frame,
            text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cards_frame = ctk.CTkFrame(stats_frame)
        cards_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        self.stats_cards = {}
        stats_data = [
            ("total", "üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "0"),
            ("qualified", "üéØ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", "0"),
            ("volume", "üí∞ –û–±—â–∏–π –æ–±—ä–µ–º", "$0"),
            ("categories", "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π", "0")
        ]
        
        for i, (key, title, value) in enumerate(stats_data):
            card = ctk.CTkFrame(cards_frame)
            card.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
            
            ctk.CTkLabel(card, text=title, font=ctk.CTkFont(size=12)).pack(pady=(10, 5))
            value_label = ctk.CTkLabel(card, text=value, font=ctk.CTkFont(size=18, weight="bold"))
            value_label.pack(pady=(0, 10))
            
            self.stats_cards[key] = value_label
            cards_frame.columnconfigure(i, weight=1)
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        table_frame = ctk.CTkFrame(self.tab_results)
        table_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        ctk.CTkLabel(
            table_frame,
            text="üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.create_participants_table(table_frame)

    def create_participants_table(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        table_container = ctk.CTkFrame(parent)
        table_container.pack(fill="both", expand=True, padx=20, pady=(0, 15))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è Treeview
        style = ttk.Style()
        style.theme_use("clam")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        style.configure("Treeview",
                       background="#2B2B2B",
                       foreground="#FFFFFF",
                       fieldbackground="#2B2B2B",
                       borderwidth=0,
                       font=('Segoe UI', 9))
        
        style.configure("Treeview.Heading",
                       background="#404040",
                       foreground="#FFFFFF",
                       borderwidth=1,
                       font=('Segoe UI', 9, 'bold'))
        
        # –°–æ–∑–¥–∞–µ–º Treeview
        columns = ("address", "category", "swaps", "volume", "score", "tier", "qualified")
        self.participants_tree = ttk.Treeview(table_container, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            "address": "–ê–¥—Ä–µ—Å",
            "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", 
            "swaps": "Swaps",
            "volume": "–û–±—ä–µ–º USD",
            "score": "Score",
            "tier": "Tier",
            "qualified": "–°—Ç–∞—Ç—É—Å"
        }
        
        for col, header in headers.items():
            self.participants_tree.heading(col, text=header)
            
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {
            "address": 200,
            "category": 120,
            "swaps": 80,
            "volume": 120,
            "score": 80,
            "tier": 100,
            "qualified": 80
        }
        
        for col, width in column_widths.items():
            self.participants_tree.column(col, width=width, minwidth=width//2)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(table_container, orient="vertical", command=self.participants_tree.yview)
        self.participants_tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.participants_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def _setup_rewards_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞–≥—Ä–∞–¥"""
        rewards_label = ctk.CTkLabel(
            self.tab_rewards,
            text="üèÜ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            font=ctk.CTkFont(size=18)
        )
        rewards_label.pack(expand=True)

    def _setup_export_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        export_frame = ctk.CTkFrame(self.tab_export)
        export_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(
            export_frame,
            text="üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=20, pady=(15, 20))
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_json_btn = ctk.CTkButton(
            export_frame,
            text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON",
            command=self._export_json,
            height=40
        )
        export_json_btn.pack(padx=20, pady=10, anchor="w")
        
        export_csv_btn = ctk.CTkButton(
            export_frame,
            text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
            command=self._export_csv,
            height=40
        )
        export_csv_btn.pack(padx=20, pady=10, anchor="w")

    def _setup_settings_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_label = ctk.CTkLabel(
            self.tab_settings,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            font=ctk.CTkFont(size=18)
        )
        settings_label.pack(expand=True)

    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        pass  # –°—Ç–∏–ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ customtkinter

    def _start_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if self.analysis_running:
            return
        
        self.analysis_running = True
        self.start_btn.configure(state="disabled")
        self.stop_btn.configure(state="normal")
        self.progress_bar.set(0)
        self.progress_text.delete("0.0", "end")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._run_analysis)
        thread.daemon = True
        thread.start()

    def _run_analysis(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self._update_progress("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            latest_block = self.analyzer.web3_manager.get_latest_block_number()
            
            if self.period_var.get() == "last_7_days":
                start_block = latest_block - (7 * 24 * 60 * 60 // 3)  # ~7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            elif self.period_var.get() == "last_30_days":
                start_block = latest_block - (30 * 24 * 60 * 60 // 3)  # ~30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            elif self.period_var.get() == "last_90_days":
                start_block = latest_block - (90 * 24 * 60 * 60 // 3)  # ~90 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            else:
                start_block = int(self.start_block_entry.get()) if self.start_block_entry.get() else latest_block - 100000
            
            end_block = int(self.end_block_entry.get()) if self.end_block_entry.get() else latest_block
            
            self._update_progress(f"–ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤ {start_block:,} - {end_block:,}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            self.participants = loop.run_until_complete(
                self.analyzer.analyze_participants(
                    start_block, 
                    end_block,
                    self._update_progress
                )
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.root.after(0, self._update_results_ui)
            self._update_progress("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self._update_progress(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.analysis_running = False
            self.root.after(0, self._analysis_finished)

    def _update_progress(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        def update_ui():
            self.progress_text.insert("end", f"{datetime.now().strftime('%H:%M:%S')} | {message}\n")
            self.progress_text.see("end")
            self.progress_var.set(message)
        
        self.root.after(0, update_ui)

    def _analysis_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        self.start_btn.configure(state="normal")
        self.stop_btn.configure(state="disabled")
        self.status_var.set(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(self.participants)}")

    def _stop_analysis(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        self.analysis_running = False
        self._analysis_finished()
        self._update_progress("‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def _update_results_ui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.participants:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        total = len(self.participants)
        qualified = sum(1 for p in self.participants.values() if p.is_qualified)
        total_volume = sum(p.total_volume_usd for p in self.participants.values())
        categories = len(set(p.category for p in self.participants.values()))
        
        self.stats_cards["total"].configure(text=str(total))
        self.stats_cards["qualified"].configure(text=str(qualified))
        self.stats_cards["volume"].configure(text=f"${total_volume:,.0f}")
        self.stats_cards["categories"].configure(text=str(categories))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.participants_tree.get_children():
            self.participants_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ø 100)
        sorted_participants = sorted(
            self.participants.values(),
            key=lambda x: x.eligibility_score,
            reverse=True
        )[:100]
        
        for participant in sorted_participants:
            values = (
                participant.address[:10] + "...",
                participant.category,
                participant.total_swaps,
                f"${participant.total_volume_usd:,.0f}",
                f"{participant.eligibility_score:.3f}",
                participant.reward_tier,
                "‚úÖ" if participant.is_qualified else "‚ùå"
            )
            self.participants_tree.insert("", "end", values=values)

    def _export_json(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"""
        if not self.participants:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                summary = self.analyzer.export_participants_summary()
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(summary, f, indent=2, ensure_ascii=False, default=str)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

    def _export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "CSV —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ UI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            self.root.mainloop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ UI: {e}")
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è UI"""
    try:
        app = PLEXStakingUI()
        app.run()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ UI: {e}")

if __name__ == "__main__":
    main()
