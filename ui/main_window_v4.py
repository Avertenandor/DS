"""
PLEX Dynamic Staking Manager - Main Window V4 (RESIZABLE FIXED)
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏ –∏ –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 4.1.0 (RESIZABLE FIXED)
"""

import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any
import tkinter as tk
from tkinter import messagebox
import customtkinter as ctk
import os
import sys

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # dotenv –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)

from ui.themes.dark_theme import get_theme, apply_window_style
from ui.components.log_viewer import LogViewer
from ui.components.progress_bar import ProgressBar
from ui.components.wallet_connection_dialog_fixed import WalletConnectionDialog, show_wallet_connection_dialog
from ui.tabs.enhanced_analysis_tab import EnhancedAnalysisTab
from ui.tabs.enhanced_rewards_tab import EnhancedRewardsTab
from ui.tabs.enhanced_history_tab import EnhancedHistoryTab
from ui.tabs.settings_tab import SettingsTab
from ui.optimized_analysis_extension import patch_analysis_tab_with_optimization

from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory
from config.constants import *
from config.settings import settings

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from blockchain.node_client import Web3Manager
from core.staking_manager import StakingManager
from core.reward_calculator import RewardCalculator
from core.participant_analyzer_v2 import ParticipantAnalyzer
from core.reward_manager import RewardManager
from db.database import DatabaseManager
from db.history_manager import HistoryManager

logger = get_logger(__name__)


class PLEXStakingMainWindow:
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ PLEX Dynamic Staking Manager.
    
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (resizable).
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        self.theme = get_theme()
        self.widget_factory = SafeWidgetFactory(self.theme)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.staking_manager = None
        self.reward_calculator = None
        self.database_manager = None
        self.history_manager = None
        
        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.root = None
        self.tabview = None
        self.analysis_tab = None
        self.rewards_tab = None
        self.history_tab = None
        self.settings_tab = None
        self.log_viewer = None
        self.status_bar = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_initialized = False
        self.connection_status = "disconnected"
        self.wallet_connected = False
        self.wallet_address = None
        self.logs_visible = True  # –õ–æ–≥–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        logger.debug("üöÄ PLEXStakingMainWindow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (RESIZABLE)")
    
    def create_window(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–∫–Ω–∞
            self.root = ctk.CTk()
            self.root.title("PLEX Dynamic Staking Manager v4.0")
            self.root.geometry("1400x900")
            self.root.minsize(1000, 600)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            
            # RESIZABLE SUPPORT - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            self.root.resizable(True, True)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid weights –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.root.grid_rowconfigure(0, weight=1)
            self.root.grid_columnconfigure(0, weight=1)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
            apply_window_style(self.root)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
            self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self._create_interface()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self._initialize_components()
            
            logger.info("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ (RESIZABLE)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞: {e}")
            if self.root:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ:\\n{e}")
            raise
    
    def _create_interface(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π resizable."""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å grid –¥–ª—è –ª—É—á—à–µ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.main_container = self.theme.create_styled_frame(self.root, 'primary')
        self.main_container.grid(row=0, column=0, sticky="nsew", padx=0, pady=0)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid weights –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.main_container.grid_rowconfigure(0, weight=0)  # Header —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        self.main_container.grid_rowconfigure(1, weight=0)  # Toolbar —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        self.main_container.grid_rowconfigure(2, weight=1)  # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        self.main_container.grid_rowconfigure(3, weight=0)  # Footer –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π (–¥–ª—è –ª–æ–≥–æ–≤)
        self.main_container.grid_columnconfigure(0, weight=1)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º
        self._create_header()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self._create_toolbar()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ (–†–ê–°–¢–Ø–ì–ò–í–ê–ï–¢–°–Ø)
        self._create_main_area()
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ª–æ–≥–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
        self._create_footer()
    
    def _create_header(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º."""
        self.header_frame = self.theme.create_styled_frame(self.main_container, 'secondary')
        self.header_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=(10, 5))
        self.header_frame.grid_columnconfigure(0, weight=1)  # –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        self.header_frame.grid_columnconfigure(1, weight=0)  # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.header_left = self.theme.create_styled_frame(self.header_frame, 'secondary')
        self.header_left.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.title_label = self.theme.create_styled_label(
            self.header_left,
            "üíé PLEX Dynamic Staking Manager v4.0",
            'title'
        )
        self.title_label.pack(anchor='w')
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.status_info_frame = self.theme.create_styled_frame(self.header_left, 'secondary')
        self.status_info_frame.pack(anchor='w', pady=(5, 0))
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.init_status_label = self.theme.create_styled_label(
            self.status_info_frame,
            "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
            'warning'
        )
        self.init_status_label.pack(side='left', padx=(0, 15))
        
        # –°—Ç–∞—Ç—É—Å –Ω–æ–¥—ã
        self.node_status_label = self.theme.create_styled_label(
            self.status_info_frame,
            "üåê –ù–æ–¥–∞: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞",
            'error'
        )
        self.node_status_label.pack(side='left', padx=(0, 15))
        
        # –°—Ç–∞—Ç—É—Å –∫–æ—à–µ–ª—å–∫–∞
        self.wallet_status_header = self.theme.create_styled_label(
            self.status_info_frame,
            "üëõ –ö–æ—à–µ–ª–µ–∫: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            'error'
        )
        self.wallet_status_header.pack(side='left', padx=(0, 15))
        
        # –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db_status_label = self.theme.create_styled_label(
            self.status_info_frame,
            "üóÑÔ∏è –ë–î: –ù–µ –≥–æ—Ç–æ–≤–∞",
            'warning'
        )
        self.db_status_label.pack(side='left', padx=(0, 15))
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (connection_indicator)
        self.connection_indicator = self.theme.create_styled_label(
            self.status_info_frame,
            "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞...",
            'warning'
        )
        self.connection_indicator.pack(side='left')
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        self.header_right = self.theme.create_styled_frame(self.header_frame, 'secondary')
        self.header_right.grid(row=0, column=1, sticky="e", padx=20, pady=10)
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        self.system_status_frame = self.theme.create_styled_frame(self.header_right, 'secondary')
        self.system_status_frame.pack(anchor='e')
        
        self.system_status_label = self.theme.create_styled_label(
            self.system_status_frame,
            "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞",
            'warning'
        )
        self.system_status_label.pack(side='right', padx=(0, 10))
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.last_update_label = self.theme.create_styled_label(
            self.system_status_frame,
            "–û–±–Ω–æ–≤–ª–µ–Ω–æ: –Ω–∏–∫–æ–≥–¥–∞",
            'secondary'
        )
        self.last_update_label.pack(side='right', padx=(0, 20))
    
    def _create_toolbar(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        self.toolbar_frame = self.theme.create_styled_frame(self.main_container, 'card')
        self.toolbar_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=(0, 5))
        self.toolbar_frame.grid_columnconfigure(0, weight=1)  # –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        self.toolbar_frame.grid_columnconfigure(1, weight=0)  # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
        
        # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
        self.toolbar_left = self.theme.create_styled_frame(self.toolbar_frame, 'card')
        self.toolbar_left.grid(row=0, column=0, sticky="w", padx=15, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        self.wallet_button = self.theme.create_styled_button(
            self.toolbar_left,
            "üîê –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫",
            'primary',
            command=self._show_wallet_dialog,
            width=180
        )
        self.wallet_button.pack(side='left', padx=(0, 10))
        
        # –°—Ç–∞—Ç—É—Å –∫–æ—à–µ–ª—å–∫–∞
        self.wallet_status_label = self.theme.create_styled_label(
            self.toolbar_left,
            "‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            'error'
        )
        self.wallet_status_label.pack(side='left', padx=(10, 0))
        
        # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫
        self.toolbar_right = self.theme.create_styled_frame(self.toolbar_frame, 'card')
        self.toolbar_right.grid(row=0, column=1, sticky="e", padx=15, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        self.logs_button = self.theme.create_styled_button(
            self.toolbar_right,
            "üìã –°–∫—Ä—ã—Ç—å –ª–æ–≥–∏",
            'info',
            command=self._toggle_logs_panel,
            width=140
        )
        self.logs_button.pack(side='left', padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        self.refresh_button = self.theme.create_styled_button(
            self.toolbar_right,
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            'secondary',
            command=self._refresh_status,
            width=100
        )
        self.refresh_button.pack(side='left')

    def _create_main_area(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ (–†–ê–°–¢–Ø–ì–ò–í–ê–ï–¢–°–Ø)."""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.tabs_container = self.theme.create_styled_frame(self.main_container, 'primary')
        self.tabs_container.grid(row=2, column=0, sticky="nsew", padx=10, pady=5)
        self.tabs_container.grid_rowconfigure(0, weight=1)  # TabView —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        self.tabs_container.grid_columnconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ TabView
        self.tabview = ctk.CTkTabview(
            self.tabs_container,
            **self.theme.get_tabview_style()
        )
        self.tabview.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self._create_tabs()
    
    def _create_tabs(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫."""
        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.tabview.add("üìä –ê–Ω–∞–ª–∏–∑")
        analysis_frame = self.tabview.tab("üìä –ê–Ω–∞–ª–∏–∑")
        self.analysis_tab = EnhancedAnalysisTab(analysis_frame, widget_factory=self.widget_factory)
        self.analysis_tab.pack(fill='both', expand=True)
        
        # üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê
        success = patch_analysis_tab_with_optimization(self.analysis_tab)
        if success:
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞–≥—Ä–∞–¥
        self.tabview.add("üèÜ –ù–∞–≥—Ä–∞–¥—ã")
        rewards_frame = self.tabview.tab("üèÜ –ù–∞–≥—Ä–∞–¥—ã")
        self.rewards_tab = EnhancedRewardsTab(rewards_frame, widget_factory=self.widget_factory)
        self.rewards_tab.pack(fill='both', expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.tabview.add("üìú –ò—Å—Ç–æ—Ä–∏—è")
        history_frame = self.tabview.tab("üìú –ò—Å—Ç–æ—Ä–∏—è")
        self.history_tab = EnhancedHistoryTab(history_frame, widget_factory=self.widget_factory)
        self.history_tab.pack(fill='both', expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.tabview.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_frame = self.tabview.tab("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.settings_tab = SettingsTab(settings_frame, widget_factory=self.widget_factory)
        self.settings_tab.pack(fill='both', expand=True)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        self.tabview.set("üìä –ê–Ω–∞–ª–∏–∑")
    
    def _create_footer(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —Å –ª–æ–≥–∞–º–∏ (RESIZABLE)."""
        self.footer_frame = self.theme.create_styled_frame(self.main_container, 'secondary')
        self.footer_frame.grid(row=3, column=0, sticky="ew", padx=10, pady=(5, 10))
        self.footer_frame.grid_columnconfigure(0, weight=1)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_container = self.theme.create_styled_frame(self.footer_frame, 'primary')
        self.logs_container.grid(row=0, column=0, sticky="ew", padx=10, pady=10)
        self.logs_container.grid_columnconfigure(0, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–æ–≤
        self.logs_title = self.theme.create_styled_label(
            self.logs_container,
            "üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            'subtitle'
        )
        self.logs_title.grid(row=0, column=0, sticky="w", padx=10, pady=(5, 0))
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ (–§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –í–´–°–û–¢–ê –¥–ª—è –ª–æ–≥–æ–≤)
        self.log_viewer = LogViewer(
            self.logs_container,
            height=180
        )
        self.log_viewer.grid(row=1, column=0, sticky="ew", padx=10, pady=(5, 10))
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = self._create_status_bar()
    
    def _create_status_bar(self) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞."""
        status_frame = self.theme.create_styled_frame(self.footer_frame, 'tertiary')
        status_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=(0, 5))
        status_frame.grid_columnconfigure(1, weight=1)  # –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_label = self.theme.create_styled_label(
            status_frame,
            "üí§ –û–∂–∏–¥–∞–Ω–∏–µ",
            'secondary'
        )
        self.activity_label.grid(row=0, column=0, sticky="w", padx=10, pady=5)
        
        # –°—á–µ—Ç—á–∏–∫–∏ (—Å–ø—Ä–∞–≤–∞)
        self.counters_frame = self.theme.create_styled_frame(status_frame, 'tertiary')
        self.counters_frame.grid(row=0, column=2, sticky="e", padx=10, pady=5)
        
        self.participants_counter = self.theme.create_styled_label(
            self.counters_frame,
            "üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0",
            'info'
        )
        self.participants_counter.pack(side='right', padx=(0, 15))
        
        self.operations_counter = self.theme.create_styled_label(
            self.counters_frame,
            "üîÑ –û–ø–µ—Ä–∞—Ü–∏–π: 0",
            'secondary'
        )
        self.operations_counter.pack(side='right', padx=(0, 15))
        
        return status_frame
    
    def _toggle_logs_panel(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –ª–æ–≥–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û)."""
        try:
            if self.logs_visible:
                # –°–∫—Ä—ã—Ç—å –ª–æ–≥–∏ - —É–±–∏—Ä–∞–µ–º footer –ø–æ–ª–Ω–æ—Å—Ç—å—é
                self.footer_frame.grid_remove()
                self.logs_button.configure(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
                self.logs_visible = False
                logger.info("üìã –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ —Å–∫—Ä—ã—Ç–∞")
            else:
                # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º footer
                self.footer_frame.grid(row=3, column=0, sticky="ew", padx=10, pady=(5, 10))
                self.logs_button.configure(text="üìã –°–∫—Ä—ã—Ç—å –ª–æ–≥–∏")
                self.logs_visible = True
                logger.info("üìã –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ viewer –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if hasattr(self, 'log_viewer') and self.log_viewer:
                    self.log_viewer.add_log_entry("INFO", "–ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞", "main_window")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def _show_wallet_dialog(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
        try:
            result = show_wallet_connection_dialog(self.root)
            if result and result.get('success'):
                self.wallet_connected = True
                self.wallet_address = result.get('address')
                self._update_wallet_status(True, self.wallet_address)
                self._update_system_status()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
    
    def _update_wallet_status(self, connected: bool, address: str = None) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞."""
        try:
            if connected and address:
                short_address = f"{address[:6]}...{address[-4:]}"
                self.wallet_status_label.configure(
                    text=f"‚úÖ {short_address}",
                    text_color=self.theme.colors['success']
                )
                self.wallet_status_header.configure(
                    text=f"üëõ –ö–æ—à–µ–ª–µ–∫: {short_address}",
                    text_color=self.theme.colors['success']
                )
                self.wallet_button.configure(text="üîì –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
            else:
                self.wallet_status_label.configure(
                    text="‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
                    text_color=self.theme.colors['error']
                )
                self.wallet_status_header.configure(
                    text="üëõ –ö–æ—à–µ–ª–µ–∫: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
                    text_color=self.theme.colors['error']
                )
                self.wallet_button.configure(text="üîê –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
    
    def _update_activity(self, message: str) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        try:
            if self.activity_label:
                self.activity_label.configure(text=message)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ viewer
                if hasattr(self, 'log_viewer') and self.log_viewer:
                    self.log_viewer.add_log_entry("INFO", message, "system")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    def _update_header_status(self, component: str, status: str, message: str = "") -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ."""
        try:
            status_colors = {
                'ready': self.theme.colors['success'],
                'connecting': self.theme.colors['warning'],
                'error': self.theme.colors['error'],
                'warning': self.theme.colors['warning']
            }
            
            color = status_colors.get(status, self.theme.colors['text_secondary'])
            
            if component == "init":
                if status == "ready":
                    self.init_status_label.configure(text="‚úÖ –ì–æ—Ç–æ–≤–æ", text_color=color)
                else:
                    self.init_status_label.configure(text=f"üîÑ {message}", text_color=color)
                    
            elif component == "node":
                if status == "ready":
                    self.node_status_label.configure(text="üåê –ù–æ–¥–∞: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞", text_color=color)
                elif status == "error":
                    self.node_status_label.configure(text=f"üåê –ù–æ–¥–∞: {message}", text_color=color)
                else:
                    self.node_status_label.configure(text=f"üåê –ù–æ–¥–∞: {message}", text_color=color)
                    
            elif component == "database":
                if status == "ready":
                    self.db_status_label.configure(text="üóÑÔ∏è –ë–î: –ì–æ—Ç–æ–≤–∞", text_color=color)
                else:
                    self.db_status_label.configure(text=f"üóÑÔ∏è –ë–î: {message}", text_color=color)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
    
    def _update_system_status(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            components_ready = 0
            total_components = 4
            
            if self.is_initialized:
                components_ready += 1
                
            if hasattr(self, 'database_manager') and self.database_manager:
                components_ready += 1
                
            if self.connection_status == "connected":
                components_ready += 1
                
            if self.wallet_connected:
                components_ready += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if components_ready == total_components:
                self.system_status_label.configure(
                    text="‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞",
                    text_color=self.theme.colors['success']
                )
            elif components_ready >= 2:
                self.system_status_label.configure(
                    text=f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞ ({components_ready}/{total_components})",
                    text_color=self.theme.colors['warning']
                )
            else:
                self.system_status_label.configure(
                    text="‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞",
                    text_color=self.theme.colors['error']
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            current_time = datetime.now().strftime("%H:%M:%S")
            self.last_update_label.configure(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def _initialize_components(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
            self._init_all_statuses()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            init_thread = threading.Thread(
                target=self._async_initialization,
                daemon=True
            )
            init_thread.start()            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            self._show_error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", str(e))
    
    def _init_all_statuses(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤."""
        self._update_header_status("init", "connecting", "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")
        self._update_header_status("node", "connecting", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        self._update_header_status("database", "warning", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        self._update_system_status()
    
    def _async_initialization(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self.root.after_idle(lambda: self._update_activity("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."))
            self.root.after_idle(lambda: self._update_header_status("init", "connecting", "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.root.after_idle(lambda: self._update_header_status("database", "connecting", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"))
            try:
                self.database_manager = DatabaseManager()
                self.root.after_idle(lambda: self._update_header_status("database", "ready", "–ì–æ—Ç–æ–≤–∞"))
            except Exception as db_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {db_error}")
                self.root.after_idle(lambda: self._update_header_status("database", "error", "–û—à–∏–±–∫–∞ –ë–î"))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
            try:
                self.history_manager = HistoryManager()
            except Exception as hist_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {hist_error}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥
            try:
                self.reward_calculator = RewardCalculator()
            except Exception as calc_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {calc_error}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
            try:
                self.staking_manager = StakingManager()
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StakingManager –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self._schedule_async_staking_init()
            except Exception as stake_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–µ–π–∫–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {stake_error}")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤–æ –≤–∫–ª–∞–¥–∫–∏
            self.root.after_idle(self._connect_managers_to_tabs)
            
            # –û—Ç–º–µ—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –≥–æ—Ç–æ–≤—É—é –ü–ï–†–ï–î –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É
            self.is_initialized = True
            self.root.after_idle(lambda: self._update_header_status("init", "ready", "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"))
            self.root.after_idle(lambda: self._update_activity("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞"))
            self.root.after_idle(self._update_system_status)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É (–≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É)
            self.root.after_idle(self._try_blockchain_connection)
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.root.after_idle(lambda: self._update_activity(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)[:50]}"))
    
    def _schedule_async_staking_init(self) -> None:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ StakingManager."""
        def init_staking():
            try:
                if self.staking_manager:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    import asyncio
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å async –º–µ—Ç–æ–¥—ã StakingManager
                    logger.info("‚úÖ StakingManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ StakingManager: {e}")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        staking_thread = threading.Thread(target=init_staking, daemon=True)
        staking_thread.start()
    
    def _connect_managers_to_tabs(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫ –≤–∫–ª–∞–¥–∫–∞–º."""
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫ –≤–∫–ª–∞–¥–∫–µ –∞–Ω–∞–ª–∏–∑–∞
            if self.analysis_tab and self.staking_manager:
                # –ü–µ—Ä–µ–¥–∞—á–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑
                if hasattr(self.analysis_tab, 'set_managers'):
                    self.analysis_tab.set_managers(self.staking_manager)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∫–ª–∞–¥–∫–µ –Ω–∞–≥—Ä–∞–¥
            if self.rewards_tab and self.reward_calculator:
                if hasattr(self.rewards_tab, 'set_managers'):
                    self.rewards_tab.set_managers(
                        reward_calculator=self.reward_calculator,
                        staking_manager=self.staking_manager
                    )
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∫–ª–∞–¥–∫–µ –∏—Å—Ç–æ—Ä–∏–∏
            if self.history_tab and self.history_manager:
                if hasattr(self.history_tab, 'set_managers'):
                    self.history_tab.set_managers(self.history_manager)
            
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≤–∫–ª–∞–¥–∫–∞–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
    
    def _try_blockchain_connection(self) -> None:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É."""
        def connect():
            try:
                self.root.after_idle(lambda: self._update_header_status("node", "connecting", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RPC
                import os
                rpc_url = getattr(settings, 'QUICKNODE_RPC_URL', '') or os.getenv('QUICKNODE_HTTP', '')
                
                if not rpc_url:
                    self.connection_status = "error"
                    self.root.after_idle(lambda: self._update_header_status("node", "error", "RPC URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"))
                    self.root.after_idle(self._update_system_status)
                    return
                  # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ StakingManager
                if self.staking_manager and hasattr(self.staking_manager, 'web3_manager'):
                    web3_manager = self.staking_manager.web3_manager
                    if web3_manager and web3_manager.is_connected:
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        try:
                            latest_block = web3_manager.get_latest_block_number()
                            self.connection_status = "connected"
                            self.root.after_idle(lambda: self._update_header_status("node", "ready", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∞"))
                            self.root.after_idle(lambda: self._update_activity(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC (–±–ª–æ–∫ {latest_block})"))
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –±–ª–æ–∫–∞: {e}")
                            self.connection_status = "error"
                            self.root.after_idle(lambda: self._update_header_status("node", "error", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"))
                            self.root.after_idle(lambda: self._update_activity("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC"))
                    else:
                        self.connection_status = "error"
                        self.root.after_idle(lambda: self._update_header_status("node", "error", "Web3Manager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"))
                        self.root.after_idle(lambda: self._update_activity("‚ùå Web3Manager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"))
                else:
                    self.connection_status = "error"
                    self.root.after_idle(lambda: self._update_header_status("node", "error", "StakingManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
                
                self.root.after_idle(self._update_system_status)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É: {e}")
                self.connection_status = "error"
                self.root.after_idle(lambda: self._update_header_status("node", "error", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"))
                self.root.after_idle(self._update_system_status)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        connection_thread = threading.Thread(target=connect, daemon=True)
        connection_thread.start()
    
    def _refresh_status(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
        try:
            self._update_activity("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            refresh_thread = threading.Thread(
                target=self._perform_status_refresh,
                daemon=True
            )
            refresh_thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self._update_activity("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    def _perform_status_refresh(self) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            import os
            rpc_url = getattr(settings, 'QUICKNODE_RPC_URL', '') or os.getenv('QUICKNODE_HTTP', '')
            
            if rpc_url:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É
                self.root.after_idle(lambda: self._try_blockchain_connection())
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - RPC –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                self.root.after_idle(lambda: self._update_header_status("node", "error", "RPC URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"))
                self.root.after_idle(lambda: self._update_system_status())
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if self.database_manager:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
                self.root.after_idle(lambda: self._update_header_status("database", "ready", "–ì–æ—Ç–æ–≤–∞"))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            self.root.after_idle(self._update_system_status)
            self.root.after_idle(lambda: self._update_activity("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω"))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.root.after_idle(lambda: self._update_activity("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
    
    def _update_counters(self, participants: int = None, operations: int = None) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤."""
        try:
            if participants is not None and self.participants_counter:
                self.participants_counter.configure(text=f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants}")
            
            if operations is not None and self.operations_counter:
                self.operations_counter.configure(text=f"üîÑ –û–ø–µ—Ä–∞—Ü–∏–π: {operations}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
    
    def _show_error(self, title: str, message: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏."""
        try:
            messagebox.showerror(title, message)
            
            if hasattr(self, 'log_viewer') and self.log_viewer:
                self.log_viewer.add_log_entry("ERROR", f"{title}: {message}", "main_window")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏: {e}")
    
    def _on_closing(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞."""
        try:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ StakingManager
            if hasattr(self, 'staking_manager') and self.staking_manager:
                import asyncio
                try:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    try:
                        loop = asyncio.get_event_loop()
                        if loop.is_closed():
                            raise RuntimeError("Event loop is closed")
                    except RuntimeError:
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º shutdown
                    loop.run_until_complete(self.staking_manager.shutdown())
                    logger.info("‚úÖ StakingManager –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è StakingManager: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if self.settings_tab:
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                pass
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
            if hasattr(self, 'log_viewer') and self.log_viewer:
                self.log_viewer.stop_monitoring()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if self.database_manager:
                # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ –ë–î
                pass
            
            logger.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è...")
            self.root.quit()
            self.root.destroy()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            try:
                self.root.quit()
                self.root.destroy()
            except:
                pass
    
    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            self.create_window()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ª–æ–≥–∏
            if hasattr(self, 'log_viewer') and self.log_viewer:
                self.log_viewer.add_log_entry("INFO", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ", "main_window")
                self.log_viewer.add_log_entry("INFO", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π (resizable)", "ui")
            
            self.root.mainloop()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            if self.root:
                messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\\n{e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        app = PLEXStakingMainWindow()
        app.run()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
