"""
–ú–æ–¥—É–ª—å: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ PLEX Dynamic Staking Manager (–í–µ—Ä—Å–∏—è 3)
–û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UI —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ –∞–Ω–∞–ª–∏–∑–∞
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import tkinter as tk
from typing import Dict, List, Optional, Callable
import threading
import queue
import json
from datetime import datetime, timedelta
from decimal import Decimal

try:
    import customtkinter as ctk
    UI_AVAILABLE = True
except ImportError:
    UI_AVAILABLE = False

from utils.logger import get_logger
from utils.widget_factory import SafeWidgetFactory
from config.constants import *
from config.settings import settings
from blockchain.node_client import Web3Manager
from core.participant_analyzer_v2 import ParticipantAnalyzer
from core.reward_manager import RewardManager
from core.category_analyzer import CategoryAnalyzer
from core.eligibility import EligibilityEngine
from core.amnesty_manager import AmnestyManager

logger = get_logger("PLEX_UI_V3")

# –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ UI
UI_COLORS = {
    'bg_primary': '#212121',
    'bg_secondary': '#2A2A2A',
    'bg_tertiary': '#333333',
    'accent': '#10A37F',
    'accent_hover': '#0E8F6F',
    'text_primary': '#ECECEC',
    'text_secondary': '#A0A0A0',
    'error': '#EF4444',
    'warning': '#F59E0B',
    'success': '#10B981',
    'border': '#404040'
}

class PLEXStakingUI_V3:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ PLEX Dynamic Staking Manager V3"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI"""
        if not UI_AVAILABLE:
            raise ImportError("CustomTkinter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.logger = logger
        self.log_queue = queue.Queue()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        self.web3_manager = Web3Manager()
        self.participant_analyzer = ParticipantAnalyzer()
        self.reward_manager = RewardManager()
        self.category_analyzer = CategoryAnalyzer()
        self.eligibility_calculator = EligibilityEngine()
        self.amnesty_manager = AmnestyManager()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.current_analysis_results = None
        self.connection_status = False
        self.analysis_running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("green")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = ctk.CTk()
        self.root.title("PLEX Dynamic Staking Manager v3.0.0")
        self.root.geometry("1600x1000")
        self.root.configure(fg_color=UI_COLORS['bg_primary'])
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self._center_window()
        
        self.logger.info("üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI V3...")
        self._create_ui()
        self.logger.info("‚úÖ UI V3 —Å–æ–∑–¥–∞–Ω")

    def _center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (1600 // 2)
        y = (self.root.winfo_screenheight() // 2) - (1000 // 2)
        self.root.geometry(f"1600x1000+{x}+{y}")

    def _create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self._create_main_container()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self._create_status_bar()

    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = ctk.CTkFrame(
            self.root,
            height=80,
            fg_color=UI_COLORS['bg_secondary'],
            corner_radius=0
        )
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            header_frame,
            text="üöÄ PLEX Dynamic Staking Manager",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=UI_COLORS['text_primary']
        )
        title_label.pack(side="left", padx=20, pady=20)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_label = ctk.CTkLabel(
            header_frame,
            text="üî¥ –û—Ç–∫–ª—é—á–µ–Ω",
            font=ctk.CTkFont(size=14),
            text_color=UI_COLORS['error']
        )
        self.connection_label.pack(side="right", padx=20, pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connect_button = ctk.CTkButton(
            header_frame,
            text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
            command=self._connect_to_blockchain,
            width=120,
            height=32,
            fg_color=UI_COLORS['accent'],
            hover_color=UI_COLORS['accent_hover']
        )
        self.connect_button.pack(side="right", padx=(0, 10), pady=20)

    def _create_main_container(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ctk.CTkTabview(
            self.root,
            fg_color=UI_COLORS['bg_secondary'],
            segmented_button_fg_color=UI_COLORS['bg_tertiary'],
            segmented_button_selected_color=UI_COLORS['accent'],
            text_color=UI_COLORS['text_primary']
        )
        self.notebook.pack(fill="both", expand=True, padx=10, pady=(10, 0))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self._create_analysis_tab()
        self._create_participants_tab()
        self._create_rewards_tab()
        self._create_categories_tab()
        self._create_eligibility_tab()
        self._create_amnesty_tab()
        self._create_logs_tab()

    def _create_analysis_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        tab = self.notebook.add("üìä –ê–Ω–∞–ª–∏–∑")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        left_frame = ctk.CTkFrame(tab, width=400, fg_color=UI_COLORS['bg_tertiary'])
        left_frame.pack(side="left", fill="y", padx=(10, 5), pady=10)
        left_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(
            left_frame,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=UI_COLORS['text_primary']
        ).pack(pady=(20, 10))
        
        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        period_frame = ctk.CTkFrame(left_frame, fg_color=UI_COLORS['bg_secondary'])
        period_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(
            period_frame,
            text="–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
            font=ctk.CTkFont(size=14),
            text_color=UI_COLORS['text_primary']
        ).pack(pady=(10, 5))
        
        self.period_var = tk.StringVar(value="1_day")
        periods = [
            ("–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å", "1_hour"),
            ("–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å", "1_day"),
            ("–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è", "1_week"),
            ("–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", "1_month"),
            ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", "custom")
        ]
        
        for text, value in periods:
            ctk.CTkRadioButton(
                period_frame,
                text=text,
                variable=self.period_var,
                value=value,
                text_color=UI_COLORS['text_primary']
            ).pack(anchor="w", padx=10, pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.analyze_button = ctk.CTkButton(
            left_frame,
            text="üîç –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑",
            command=self._start_analysis,
            width=200,
            height=40,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=UI_COLORS['accent'],
            hover_color=UI_COLORS['accent_hover']
        )
        self.analyze_button.pack(pady=20)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = ctk.CTkProgressBar(
            left_frame,
            width=300,
            height=20,
            fg_color=UI_COLORS['bg_secondary'],
            progress_color=UI_COLORS['accent']
        )
        self.progress_bar.pack(pady=10)
        self.progress_bar.set(0)
        
        self.progress_label = ctk.CTkLabel(
            left_frame,
            text="–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É",
            font=ctk.CTkFont(size=12),
            text_color=UI_COLORS['text_secondary']
        )
        self.progress_label.pack(pady=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        right_frame = ctk.CTkFrame(tab, fg_color=UI_COLORS['bg_tertiary'])
        right_frame.pack(side="right", fill="both", expand=True, padx=(5, 10), pady=10)
        
        ctk.CTkLabel(
            right_frame,
            text="üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=UI_COLORS['text_primary']
        ).pack(pady=(20, 10))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_text = ctk.CTkTextbox(
            right_frame,
            width=600,
            height=400,
            font=ctk.CTkFont(family="Consolas", size=12),
            fg_color=UI_COLORS['bg_secondary'],
            text_color=UI_COLORS['text_primary'],
            wrap="word"
        )
        self.results_text.pack(fill="both", expand=True, padx=20, pady=20)

    def _create_participants_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        tab = self.notebook.add("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏")
        
        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(tab, height=100, fg_color=UI_COLORS['bg_tertiary'])
        filter_frame.pack(fill="x", padx=10, pady=10)
        filter_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            filter_frame,
            text="üîç –§–∏–ª—å—Ç—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=UI_COLORS['text_primary']
        ).pack(side="left", padx=20, pady=20)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.category_filter = ctk.CTkOptionMenu(
            filter_frame,
            values=["–í—Å–µ", "Whale", "Active_Trader", "Regular_User", "Holder", "Newcomer"],
            command=self._filter_participants
        )
        self.category_filter.pack(side="left", padx=10, pady=20)
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self.participants_text = ctk.CTkTextbox(
            tab,
            font=ctk.CTkFont(family="Consolas", size=11),
            fg_color=UI_COLORS['bg_secondary'],
            text_color=UI_COLORS['text_primary']
        )
        self.participants_text.pack(fill="both", expand=True, padx=10, pady=10)

    def _create_rewards_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞–≥—Ä–∞–¥"""
        tab = self.notebook.add("üèÜ –ù–∞–≥—Ä–∞–¥—ã")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        control_frame = ctk.CTkFrame(tab, height=120, fg_color=UI_COLORS['bg_tertiary'])
        control_frame.pack(fill="x", padx=10, pady=10)
        control_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            control_frame,
            text="üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=UI_COLORS['text_primary']
        ).pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ctk.CTkFrame(control_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkButton(
            buttons_frame,
            text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã",
            command=self._calculate_rewards,
            width=150,
            fg_color=UI_COLORS['accent'],
            hover_color=UI_COLORS['accent_hover']
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            buttons_frame,
            text="üìä –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥",
            command=self._export_rewards,
            width=150,
            fg_color=UI_COLORS['warning']
        ).pack(side="left", padx=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä–∞–¥
        self.rewards_text = ctk.CTkTextbox(
            tab,
            font=ctk.CTkFont(family="Consolas", size=11),
            fg_color=UI_COLORS['bg_secondary'],
            text_color=UI_COLORS['text_primary']
        )
        self.rewards_text.pack(fill="both", expand=True, padx=10, pady=10)

    def _create_categories_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        tab = self.notebook.add("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        stats_frame = ctk.CTkFrame(tab, height=150, fg_color=UI_COLORS['bg_tertiary'])
        stats_frame.pack(fill="x", padx=10, pady=10)
        stats_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            stats_frame,
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=UI_COLORS['text_primary']
        ).pack(pady=10)
        
        # –î–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.categories_text = ctk.CTkTextbox(
            tab,
            font=ctk.CTkFont(family="Consolas", size=11),
            fg_color=UI_COLORS['bg_secondary'],
            text_color=UI_COLORS['text_primary']
        )
        self.categories_text.pack(fill="both", expand=True, padx=10, pady=10)

    def _create_eligibility_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥"""
        tab = self.notebook.add("‚úÖ Eligibility")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ eligibility
        criteria_frame = ctk.CTkFrame(tab, height=200, fg_color=UI_COLORS['bg_tertiary'])
        criteria_frame.pack(fill="x", padx=10, pady=10)
        criteria_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            criteria_frame,
            text="üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ Eligibility",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=UI_COLORS['text_primary']
        ).pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        self.eligibility_text = ctk.CTkTextbox(
            tab,
            font=ctk.CTkFont(family="Consolas", size=11),
            fg_color=UI_COLORS['bg_secondary'],
            text_color=UI_COLORS['text_primary']
        )
        self.eligibility_text.pack(fill="both", expand=True, padx=10, pady=10)

    def _create_amnesty_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–º–Ω–∏—Å—Ç–∏–π"""
        tab = self.notebook.add("üïäÔ∏è –ê–º–Ω–∏—Å—Ç–∏–∏")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏—è–º–∏
        control_frame = ctk.CTkFrame(tab, height=100, fg_color=UI_COLORS['bg_tertiary'])
        control_frame.pack(fill="x", padx=10, pady=10)
        control_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            control_frame,
            text="üïäÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–º–Ω–∏—Å—Ç–∏—è–º–∏",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=UI_COLORS['text_primary']
        ).pack(pady=20)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–º–Ω–∏—Å—Ç–∏–π
        self.amnesty_text = ctk.CTkTextbox(
            tab,
            font=ctk.CTkFont(family="Consolas", size=11),
            fg_color=UI_COLORS['bg_secondary'],
            text_color=UI_COLORS['text_primary']
        )
        self.amnesty_text.pack(fill="both", expand=True, padx=10, pady=10)

    def _create_logs_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤"""
        tab = self.notebook.add("üìù –õ–æ–≥–∏")
        
        # –ñ–∏–≤—ã–µ –ª–æ–≥–∏
        self.logs_text = ctk.CTkTextbox(
            tab,
            font=ctk.CTkFont(family="Consolas", size=10),
            fg_color=UI_COLORS['bg_secondary'],
            text_color=UI_COLORS['text_primary']
        )
        self.logs_text.pack(fill="both", expand=True, padx=10, pady=10)

    def _create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞"""
        status_frame = ctk.CTkFrame(
            self.root,
            height=30,
            fg_color=UI_COLORS['bg_secondary'],
            corner_radius=0
        )
        status_frame.pack(fill="x", side="bottom")
        status_frame.pack_propagate(False)
        
        self.status_label = ctk.CTkLabel(
            status_frame,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=ctk.CTkFont(size=12),
            text_color=UI_COLORS['text_secondary']
        )
        self.status_label.pack(side="left", padx=10, pady=5)

    def _connect_to_blockchain(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É"""
        def connect():
            try:
                self.update_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ QuickNode BSC...")
                self.web3_manager.connect()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if self.web3_manager.is_connected():
                    self.connection_status = True
                    self.root.after(0, lambda: self._update_connection_status(True))
                    self.root.after(0, lambda: self.update_status("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ BSC"))
                    self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                    
            except Exception as e:
                self.root.after(0, lambda: self._update_connection_status(False))
                self.root.after(0, lambda: self.update_status(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"))
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        threading.Thread(target=connect, daemon=True).start()

    def _update_connection_status(self, connected: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if connected:
            self.connection_label.configure(
                text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω",
                text_color=UI_COLORS['success']
            )
            self.connect_button.configure(text="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è")
        else:
            self.connection_label.configure(
                text="üî¥ –û—Ç–∫–ª—é—á–µ–Ω",
                text_color=UI_COLORS['error']
            )
            self.connect_button.configure(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")

    def _start_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.analysis_running:
            return
            
        if not self.connection_status:
            self.update_status("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É")
            return
        
        def analyze():
            try:
                self.analysis_running = True
                self.root.after(0, lambda: self.analyze_button.configure(state="disabled"))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫–æ–≤
                period = self.period_var.get()
                current_block = self.web3_manager.get_latest_block_number()
                
                if period == "1_hour":
                    blocks_back = 1200  # ~1 —á–∞—Å
                elif period == "1_day":
                    blocks_back = 28800  # ~1 –¥–µ–Ω—å
                elif period == "1_week":
                    blocks_back = 201600  # ~1 –Ω–µ–¥–µ–ª—è
                elif period == "1_month":
                    blocks_back = 864000  # ~1 –º–µ—Å—è—Ü
                else:
                    blocks_back = 28800  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–µ–Ω—å
                
                start_block = current_block - blocks_back
                
                self.root.after(0, lambda: self.update_status(f"–ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤ {start_block:,} - {current_block:,}"))
                
                # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
                def progress_callback(message):
                    self.root.after(0, lambda: self.update_progress(message))
                
                results = self.participant_analyzer.analyze_participants(
                    start_block, current_block, progress_callback
                )
                
                self.current_analysis_results = results
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                self.root.after(0, lambda: self._display_analysis_results(results))
                self.root.after(0, lambda: self.update_status("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"))
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                self.root.after(0, lambda: self.update_status(f"‚ùå –û—à–∏–±–∫–∞: {e}"))
            finally:
                self.analysis_running = False
                self.root.after(0, lambda: self.analyze_button.configure(state="normal"))
                self.root.after(0, lambda: self.progress_bar.set(0))
        
        threading.Thread(target=analyze, daemon=True).start()

    def _display_analysis_results(self, results: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if not results:
            self.results_text.delete("1.0", "end")
            self.results_text.insert("1.0", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –°–≤–æ–¥–∫–∞
        summary = self.participant_analyzer.export_participants_summary()
        
        output = []
        output.append("üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –£–ß–ê–°–¢–ù–ò–ö–û–í")
        output.append("=" * 50)
        output.append(f"üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {summary.get('total_participants', 0)}")
        output.append(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        output.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        output.append("üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò:")
        categories = summary.get('categories', {})
        for category, count in sorted(categories.items()):
            percentage = (count / summary['total_participants'] * 100) if summary['total_participants'] > 0 else 0
            output.append(f"   {category}: {count} ({percentage:.1f}%)")
        
        output.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏—Ä–∞–º –Ω–∞–≥—Ä–∞–¥
        output.append("üèÜ –¢–ò–†–´ –ù–ê–ì–†–ê–î:")
        tiers = summary.get('reward_tiers', {})
        for tier, count in sorted(tiers.items()):
            percentage = (count / summary['total_participants'] * 100) if summary['total_participants'] > 0 else 0
            output.append(f"   {tier}: {count} ({percentage:.1f}%)")
        
        output.append("")
        
        # –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–∏
        output.append("üîù –¢–û–ü –ü–û –û–ë–™–ï–ú–£:")
        for i, p in enumerate(summary.get('top_by_volume', [])[:5]):
            output.append(f"   {i+1}. {p['address'][:10]}... - ${p['volume_usd']} ({p['category']})")
        
        self.results_text.delete("1.0", "end")
        self.results_text.insert("1.0", "\n".join(output))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏
        self._update_participants_tab(results)
        self._update_categories_tab(summary)

    def _update_participants_tab(self, results: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        output = []
        output.append("üë• –°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í")
        output.append("=" * 80)
        output.append(f"{'–ê–¥—Ä–µ—Å':<20} {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} {'–°–≤–∞–ø—ã':<8} {'–û–±—ä–µ–º USD':<12} {'–¢–∏—Ä':<10} {'Score':<8}")
        output.append("-" * 80)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ eligibility score
        sorted_participants = sorted(
            results.values(),
            key=lambda x: x.eligibility_score,
            reverse=True
        )
        
        for p in sorted_participants:
            output.append(
                f"{p.address[:20]:<20} "
                f"{p.category:<15} "
                f"{p.total_swaps:<8} "
                f"{str(p.total_volume_usd)[:12]:<12} "
                f"{p.reward_tier:<10} "
                f"{p.eligibility_score:.3f}"
            )
        
        self.participants_text.delete("1.0", "end")
        self.participants_text.insert("1.0", "\n".join(output))

    def _update_categories_tab(self, summary: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        output = []
        output.append("üìÇ –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô")
        output.append("=" * 50)
        
        categories = summary.get('categories', {})
        total = summary.get('total_participants', 0)
        
        for category, count in sorted(categories.items()):
            percentage = (count / total * 100) if total > 0 else 0
            output.append(f"\nüè∑Ô∏è {category}:")
            output.append(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}")
            output.append(f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%")
            output.append(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {self._get_category_description(category)}")
        
        self.categories_text.delete("1.0", "end")
        self.categories_text.insert("1.0", "\n".join(output))

    def _get_category_description(self, category: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        descriptions = {
            "Whale": "–ö—Ä—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º —Ç–æ—Ä–≥–æ–≤",
            "Active_Trader": "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã —Å —á–∞—Å—Ç—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏",
            "Regular_User": "–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é",
            "Holder": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤",
            "Newcomer": "–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏",
            "Inactive": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        }
        return descriptions.get(category, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    def _filter_participants(self, category: str):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not self.current_analysis_results:
            return
        
        if category == "–í—Å–µ":
            filtered = self.current_analysis_results
        else:
            filtered = {
                addr: data for addr, data in self.current_analysis_results.items()
                if data.category == category
            }
        
        self._update_participants_tab(filtered)

    def _calculate_rewards(self):
        """–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥"""
        if not self.current_analysis_results:
            self.update_status("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
        
        def calculate():
            try:
                qualified = self.participant_analyzer.get_participants_for_rewards()
                rewards = self.reward_manager.calculate_rewards(qualified)
                
                output = []
                output.append("üèÜ –†–ê–°–ß–ï–¢ –ù–ê–ì–†–ê–î")
                output.append("=" * 50)
                output.append(f"–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(qualified)}")
                output.append(f"–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥: {sum(rewards.values()):,.2f} PLEX")
                output.append("")
                
                for addr, amount in sorted(rewards.items(), key=lambda x: x[1], reverse=True):
                    if addr in self.current_analysis_results:
                        participant = self.current_analysis_results[addr]
                        output.append(
                            f"{addr[:20]:<20} "
                            f"{participant.reward_tier:<10} "
                            f"{amount:>10.2f} PLEX"
                        )
                
                self.root.after(0, lambda: self._display_rewards(output))
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
                self.root.after(0, lambda: self.update_status(f"‚ùå –û—à–∏–±–∫–∞: {e}"))
        
        threading.Thread(target=calculate, daemon=True).start()

    def _display_rewards(self, output: List[str]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥"""
        self.rewards_text.delete("1.0", "end")
        self.rewards_text.insert("1.0", "\n".join(output))

    def _export_rewards(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥"""
        self.update_status("üíæ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

    def update_status(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.configure(text=message)
        self.logger.info(f"Status: {message}")

    def update_progress(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_label.configure(text=message)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ progress_bar

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ PLEX Dynamic Staking Manager UI V3")
            self.root.mainloop()
        except KeyboardInterrupt:
            self.logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ UI: {e}")
        finally:
            self.close()

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if hasattr(self.web3_manager, 'close'):
                self.web3_manager.close()
            if hasattr(self.participant_analyzer, 'close'):
                self.participant_analyzer.close()
            self.logger.info("üîê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UI"""
    if not UI_AVAILABLE:
        print("‚ùå CustomTkinter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install customtkinter")
        return
    
    try:
        app = PLEXStakingUI_V3()
        app.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UI: {e}")


if __name__ == "__main__":
    main()
