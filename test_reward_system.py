#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥ –∏ –≤—ã–ø–ª–∞—Ç PLEX Dynamic Staking Manager
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –¢–ó
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, timedelta
from decimal import Decimal
from core.reward_manager import RewardManager, RewardDistribution, RewardPool
from core.participant_analyzer_v2 import ParticipantData

def test_reward_system():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ù–ê–ì–†–ê–î ===")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥
        reward_manager = RewardManager()
        print("‚úÖ RewardManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–∞–≥—Ä–∞–¥
        print("\nüìä –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–∞–≥—Ä–∞–¥")
        total_pool = Decimal('100000')  # 100,000 PLEX
        period_start = datetime.now() - timedelta(days=7)
        period_end = datetime.now()
        
        reward_pool = reward_manager.create_reward_pool(
            total_amount=total_pool,
            period_start=period_start,
            period_end=period_end
        )
        
        print(f"   üí∞ –û–±—â–∏–π –ø—É–ª: {reward_pool.total_amount} PLEX")
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {period_start.strftime('%Y-%m-%d')} - {period_end.strftime('%Y-%m-%d')}")
        print(f"   üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:")
        for tier, amount in reward_pool.tier_allocations.items():
            print(f"      {tier}: {amount} PLEX")
          # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print("\nüë• –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        test_participants = {
            # Platinum —É—á–∞—Å—Ç–Ω–∏–∫ (–∫–∏—Ç)
            "0x742d35cc6574c728532c85f5e6c8dece8ad21e0f": ParticipantData(
                address="0x742d35cc6574c728532c85f5e6c8dece8ad21e0f",
                first_activity=datetime.now() - timedelta(days=30),
                last_activity=datetime.now(),
                total_swaps=150,
                total_volume_usd=Decimal('1000000'),
                total_plex_bought=Decimal('50000'),
                total_plex_sold=Decimal('10000'),
                avg_swap_size_usd=Decimal('6666'),
                unique_days_active=30,
                consecutive_days=30,
                max_consecutive_days=30,
                category="Whale",
                eligibility_score=0.95,
                reward_tier="Platinum",
                is_qualified=True
            ),
            # Gold —É—á–∞—Å—Ç–Ω–∏–∫ (–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä)
            "0x8894E0a0c962CB723c1976a4421c95949bE2D4E6": ParticipantData(
                address="0x8894E0a0c962CB723c1976a4421c95949bE2D4E6",
                first_activity=datetime.now() - timedelta(days=20),
                last_activity=datetime.now(),
                total_swaps=80,
                total_volume_usd=Decimal('500000'),
                total_plex_bought=Decimal('25000'),
                total_plex_sold=Decimal('5000'),
                avg_swap_size_usd=Decimal('6250'),
                unique_days_active=20,
                consecutive_days=15,
                max_consecutive_days=15,
                category="Active_Trader", 
                eligibility_score=0.75,
                reward_tier="Gold",
                is_qualified=True
            ),
            # Silver —É—á–∞—Å—Ç–Ω–∏–∫ (—Ö–æ–ª–¥–µ—Ä)
            "0x3dfc1233a6b3e0f8b4a2b7b1c9d5e8f2a4b6c8d0": ParticipantData(
                address="0x3dfc1233a6b3e0f8b4a2b7b1c9d5e8f2a4b6c8d0",
                first_activity=datetime.now() - timedelta(days=15),
                last_activity=datetime.now(),
                total_swaps=30,
                total_volume_usd=Decimal('100000'),
                total_plex_bought=Decimal('10000'),
                total_plex_sold=Decimal('1000'),
                avg_swap_size_usd=Decimal('3333'),
                unique_days_active=15,
                consecutive_days=10,
                max_consecutive_days=10,
                category="Holder",
                eligibility_score=0.60,
                reward_tier="Silver",
                is_qualified=True
            ),
            # Bronze —É—á–∞—Å—Ç–Ω–∏–∫ (–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            "0x2aef9382e1b5c4d7f9a3b6c8e2f4a7b9d1c3e5f8": ParticipantData(
                address="0x2aef9382e1b5c4d7f9a3b6c8e2f4a7b9d1c3e5f8",
                first_activity=datetime.now() - timedelta(days=10),
                last_activity=datetime.now(),
                total_swaps=20,
                total_volume_usd=Decimal('50000'),
                total_plex_bought=Decimal('5000'),
                total_plex_sold=Decimal('1000'),
                avg_swap_size_usd=Decimal('2500'),
                unique_days_active=10,
                consecutive_days=5,
                max_consecutive_days=5,
                category="Regular_User",
                eligibility_score=0.45,
                reward_tier="Bronze",
                is_qualified=True
            ),
            # –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—â–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            "0x1a2b3c4d5e6f7890abcdef1234567890abcdef12": ParticipantData(
                address="0x1a2b3c4d5e6f7890abcdef1234567890abcdef12",
                first_activity=datetime.now() - timedelta(days=2),
                last_activity=datetime.now(),
                total_swaps=5,
                total_volume_usd=Decimal('1000'),
                total_plex_bought=Decimal('100'),
                total_plex_sold=Decimal('10'),
                avg_swap_size_usd=Decimal('200'),
                unique_days_active=2,
                consecutive_days=2,
                max_consecutive_days=2,
                category="Newcomer",
                eligibility_score=0.15,  # –ù–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ Bronze (0.2)
                reward_tier="None",
                is_qualified=False
            )
        }        
        print(f"   üë§ –°–æ–∑–¥–∞–Ω–æ {len(test_participants)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        for address, participant in test_participants.items():
            print(f"      {participant.address[:10]}...: {participant.category} (Score: {participant.eligibility_score})")
        
        # –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
        print("\nüí∞ –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –¢–ó")
        distributions = reward_manager.calculate_rewards(test_participants, reward_pool)
        
        print(f"   üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: {len(distributions)}")
        total_distributed = sum(d.final_reward for d in distributions)
        print(f"   üíµ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {total_distributed} PLEX")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        print("\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
        for dist in distributions:
            print(f"   üèÜ {dist.participant_address[:10]}...: {dist.reward_tier}")
            print(f"      üí∞ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {dist.base_reward} PLEX")
            print(f"      üî• –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {dist.bonus_multiplier}x")
            print(f"      üéÅ –ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {dist.final_reward} PLEX")
            print(f"      üìä Eligibility Score: {dist.eligibility_score}")
            print()
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –¢–ó
        print("üîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –¢–ó")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
        tier_counts = {}
        for dist in distributions:
            tier_counts[dist.reward_tier] = tier_counts.get(dist.reward_tier, 0) + 1
        
        print("   üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:")
        for tier, count in tier_counts.items():
            percentage = (count / len(distributions)) * 100 if distributions else 0
            print(f"      {tier}: {count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({percentage:.1f}%)")
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("   üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for dist in distributions:
            # –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É
            participant = None
            for addr, p in test_participants.items():
                if p.address == dist.participant_address:
                    participant = p
                    break
            
            if participant:
                expected_multiplier = reward_manager.category_multipliers.get(participant.category, 1.0)
                print(f"      {dist.participant_address[:10]}...: {dist.bonus_multiplier}x (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_multiplier}x)")
            else:
                print(f"      {dist.participant_address[:10]}...: {dist.bonus_multiplier}x (—É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω)")
          # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–ª–∞
        print("\nüõ°Ô∏è –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–ª–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –æ—à–∏–±–æ–∫ floating point
        tolerance = 1e-9  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ç–µ—Å—Ç–µ
        excess = total_distributed - reward_pool.total_amount
        
        if excess <= tolerance:
            print(f"   ‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {total_distributed} <= {reward_pool.total_amount} (excess: {excess})")
            remaining = reward_pool.total_amount - total_distributed
            print(f"   üíº –û—Å—Ç–∞—Ç–æ–∫ –≤ –ø—É–ª–µ: {remaining} PLEX")
        else:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—É–ª–∞! {total_distributed} > {reward_pool.total_amount} (excess: {excess})")
            return False
          # –¢–µ—Å—Ç 6: –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        print("\nüìè –¢–µ—Å—Ç 6: –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤")
        participants_below_threshold = [p for p in test_participants.values() if p.eligibility_score < 0.2]
        rewards_below_threshold = [d for d in distributions 
                                 if any(p.address == d.participant_address and p.eligibility_score < 0.2 
                                       for p in participants_below_threshold)]
        
        if not rewards_below_threshold:
            print("   ‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        else:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {len(rewards_below_threshold)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã!")
            return False
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –°–ò–°–¢–ï–ú–´ –ù–ê–ì–†–ê–î –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_reward_system()
    sys.exit(0 if success else 1)
