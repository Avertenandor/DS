"""
–ú–æ–¥—É–ª—å: Multicall –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–∞—Ç—á-–∑–∞–ø—Ä–æ—Å–æ–≤ –±–∞–ª–∞–Ω—Å–æ–≤
–û–ø–∏—Å–∞–Ω–∏–µ: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ 50 –≤—ã–∑–æ–≤–æ–≤ balanceOf –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å - —ç–∫–æ–Ω–æ–º–∏—è 98% –∫—Ä–µ–¥–∏—Ç–æ–≤
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: web3, eth_abi
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import time
from typing import List, Dict, Optional, Any, Tuple
from decimal import Decimal
from dataclasses import dataclass

from web3 import Web3
from eth_abi import encode, decode

from config.constants import TOKEN_DECIMALS, MULTICALL3_BSC
from utils.logger import get_logger
from utils.cache_manager import multicall_cache

logger = get_logger("MulticallManager")


@dataclass
class MulticallResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç Multicall –∑–∞–ø—Ä–æ—Å–∞"""
    success: bool
    block_number: int
    results: Dict[str, Any]
    execution_time: float
    calls_count: int
    credits_saved: int


class MulticallManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å"""
    
    # ABI –¥–ª—è Multicall3 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    MULTICALL3_ABI = [
        {
            "inputs": [
                {
                    "components": [
                        {"name": "target", "type": "address"},
                        {"name": "callData", "type": "bytes"}
                    ],
                    "name": "calls",
                    "type": "tuple[]"
                }
            ],
            "name": "aggregate",
            "outputs": [
                {"name": "blockNumber", "type": "uint256"},
                {"name": "returnData", "type": "bytes[]"}
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {"name": "target", "type": "address"},
                        {"name": "allowFailure", "type": "bool"},
                        {"name": "callData", "type": "bytes"}
                    ],
                    "name": "calls",
                    "type": "tuple[]"
                }
            ],
            "name": "tryAggregate",
            "outputs": [
                {
                    "components": [
                        {"name": "success", "type": "bool"},
                        {"name": "returnData", "type": "bytes"}
                    ],
                    "name": "returnData",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ]
    
    def __init__(self, w3: Web3):
        self.w3 = w3
        self.multicall_contract = w3.eth.contract(
            address=Web3.to_checksum_address(MULTICALL3_BSC),
            abi=self.MULTICALL3_ABI
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_calls_made = 0
        self.total_calls_saved = 0
        self.total_execution_time = 0
        self.batch_count = 0
        
        # –°–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π
        self.BALANCE_OF_SIGNATURE = Web3.keccak(text="balanceOf(address)")[:4]
        self.TRANSFER_SIGNATURE = Web3.keccak(text="Transfer(address,address,uint256)")
        
        logger.info(f"üíé MulticallManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   Multicall3 –∞–¥—Ä–µ—Å: {MULTICALL3_BSC}")
        
    def get_balances_batch(self, token_address: str, addresses: List[str], 
                          block: Optional[int] = None) -> Dict[str, Decimal]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        
        Args:
            token_address: –ê–¥—Ä–µ—Å ERC20 —Ç–æ–∫–µ–Ω–∞
            addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ (–¥–æ 200 –∑–∞ —Ä–∞–∑)
            block: –ù–æ–º–µ—Ä –±–ª–æ–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é latest)
            
        Returns:
            Dict —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ {address: balance}
        """
        if not addresses:
            return {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
        cached_result = multicall_cache.get_batch_balances(
            token_address, addresses, block or self.w3.eth.block_number,
            self._fetch_balances_multicall
        )
        
        if cached_result:
            logger.debug(f"üì¶ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(cached_result)} –±–∞–ª–∞–Ω—Å–æ–≤ –∏–∑ –∫—ç—à–∞")
            return cached_result
        
        return self._fetch_balances_multicall(token_address, addresses, block)
    
    def _fetch_balances_multicall(self, token_address: str, addresses: List[str], 
                                 block: Optional[int] = None) -> Dict[str, Decimal]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ Multicall"""
        
        start_time = time.time()
        token_address = Web3.to_checksum_address(token_address)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 50 –∞–¥—Ä–µ—Å–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Multicall3)
        batch_size = 50
        all_balances = {}
        
        for i in range(0, len(addresses), batch_size):
            batch_addresses = addresses[i:i + batch_size]
            
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–∑–æ–≤—ã balanceOf
                calls = []
                for addr in batch_addresses:
                    addr_checksum = Web3.to_checksum_address(addr)
                    
                    # –ö–æ–¥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ balanceOf(address)
                    call_data = self.BALANCE_OF_SIGNATURE + encode(['address'], [addr_checksum])
                    
                    calls.append({
                        'target': token_address,
                        'callData': call_data
                    })
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º Multicall
                if block:
                    result = self.multicall_contract.functions.aggregate(calls).call(
                        block_identifier=block
                    )
                else:
                    result = self.multicall_contract.functions.aggregate(calls).call()
                
                block_number, return_data = result
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for j, (addr, data) in enumerate(zip(batch_addresses, return_data)):
                    try:
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º uint256
                        balance_wei = decode(['uint256'], data)[0]
                        balance = Decimal(balance_wei) / Decimal(10 ** TOKEN_DECIMALS)
                        all_balances[addr] = balance
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {addr}: {e}")
                        all_balances[addr] = Decimal(0)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.total_calls_made += 1
                self.total_calls_saved += len(batch_addresses) - 1  # –°—ç–∫–æ–Ω–æ–º–∏–ª–∏ N-1 –≤—ã–∑–æ–≤–æ–≤
                
                logger.debug(f"üíé Multicall batch {i//batch_size + 1}: {len(batch_addresses)} –±–∞–ª–∞–Ω—Å–æ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Multicall –¥–ª—è –±–∞—Ç—á–∞ {i//batch_size + 1}: {e}")
                
                # Fallback –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
                logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã...")
                batch_balances = self._get_balances_individual(
                    token_address, batch_addresses, block
                )
                all_balances.update(batch_balances)
        
        execution_time = time.time() - start_time
        self.total_execution_time += execution_time
        self.batch_count += 1
        
        logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ {len(all_balances)} –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞ {execution_time:.2f}s")
        logger.info(f"   –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ {len(addresses) - len(range(0, len(addresses), batch_size))} API –≤—ã–∑–æ–≤–æ–≤")
        
        return all_balances
    
    def _get_balances_individual(self, token_address: str, addresses: List[str], 
                               block: Optional[int] = None) -> Dict[str, Decimal]:
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ balanceOf"""
        
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã balanceOf (fallback)")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        token_abi = [
            {
                "constant": True,
                "inputs": [{"name": "_owner", "type": "address"}],
                "name": "balanceOf",
                "outputs": [{"name": "balance", "type": "uint256"}],
                "type": "function"
            }
        ]
        
        token_contract = self.w3.eth.contract(
            address=Web3.to_checksum_address(token_address),
            abi=token_abi
        )
        
        balances = {}
        
        for addr in addresses:
            try:
                addr_checksum = Web3.to_checksum_address(addr)
                
                if block:
                    balance_wei = token_contract.functions.balanceOf(addr_checksum).call(
                        block_identifier=block
                    )
                else:
                    balance_wei = token_contract.functions.balanceOf(addr_checksum).call()
                
                balance = Decimal(balance_wei) / Decimal(10 ** TOKEN_DECIMALS)
                balances[addr] = balance
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {addr}: {e}")
                balances[addr] = Decimal(0)
        
        return balances
    
    def get_multiple_contract_data(self, calls_data: List[Dict[str, Any]], 
                                  block: Optional[int] = None) -> List[MulticallResult]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        
        Args:
            calls_data: –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ [{'target': address, 'data': call_data, 'decode': decode_func}]
            block: –ù–æ–º–µ—Ä –±–ª–æ–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ MulticallResult
        """
        if not calls_data:
            return []
        
        start_time = time.time()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –¥–ª—è tryAggregate (–ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –≤—ã–∑–æ–≤–∞–º –ø–∞–¥–∞—Ç—å)
        calls = []
        for call_info in calls_data:
            calls.append({
                'target': Web3.to_checksum_address(call_info['target']),
                'allowFailure': True,
                'callData': call_info['data']
            })
        
        try:
            if block:
                results = self.multicall_contract.functions.tryAggregate(False, calls).call(
                    block_identifier=block
                )
            else:
                results = self.multicall_contract.functions.tryAggregate(False, calls).call()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processed_results = []
            
            for i, (call_info, (success, return_data)) in enumerate(zip(calls_data, results)):
                if success and return_data:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                        if 'decode' in call_info and callable(call_info['decode']):
                            decoded_value = call_info['decode'](return_data)
                        else:
                            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ uint256
                            decoded_value = decode(['uint256'], return_data)[0]
                        
                        processed_results.append(MulticallResult(
                            success=True,
                            block_number=block or self.w3.eth.block_number,
                            results={'value': decoded_value},
                            execution_time=time.time() - start_time,
                            calls_count=1,
                            credits_saved=19  # –°—ç–∫–æ–Ω–æ–º–∏–ª–∏ –ø–æ—á—Ç–∏ –ø–æ–ª–Ω—ã–π –≤—ã–∑–æ–≤
                        ))
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {i}: {e}")
                        processed_results.append(MulticallResult(
                            success=False,
                            block_number=block or self.w3.eth.block_number,
                            results={'error': str(e)},
                            execution_time=time.time() - start_time,
                            calls_count=1,
                            credits_saved=0
                        ))
                else:
                    processed_results.append(MulticallResult(
                        success=False,
                        block_number=block or self.w3.eth.block_number,
                        results={'error': 'Call failed'},
                        execution_time=time.time() - start_time,
                        calls_count=1,
                        credits_saved=0
                    ))
            
            execution_time = time.time() - start_time
            self.total_calls_made += 1
            self.total_calls_saved += len(calls_data) - 1
            
            logger.info(f"üíé Multicall: {len(calls_data)} –≤—ã–∑–æ–≤–æ–≤ –∑–∞ {execution_time:.2f}s")
            
            return processed_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Multicall: {e}")
            return [
                MulticallResult(
                    success=False,
                    block_number=block or self.w3.eth.block_number,
                    results={'error': str(e)},
                    execution_time=time.time() - start_time,
                    calls_count=len(calls_data),
                    credits_saved=0
                )
            ]
    
    def batch_token_info(self, token_addresses: List[str], 
                        block: Optional[int] = None) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö (name, symbol, decimals, totalSupply)
        
        Args:
            token_addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
            block: –ù–æ–º–µ—Ä –±–ª–æ–∫–∞
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–∞—Ö
        """
        if not token_addresses:
            return {}
        
        calls_data = []
        
        # –°–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π ERC20
        name_sig = Web3.keccak(text="name()")[:4]
        symbol_sig = Web3.keccak(text="symbol()")[:4]
        decimals_sig = Web3.keccak(text="decimals()")[:4]
        total_supply_sig = Web3.keccak(text="totalSupply()")[:4]
        
        # –§—É–Ω–∫—Ü–∏–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        def decode_string(data):
            try:
                return decode(['string'], data)[0]
            except:
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç bytes32 –≤–º–µ—Å—Ç–æ string
                return decode(['bytes32'], data)[0].decode('utf-8').rstrip('\x00')
        
        def decode_uint(data):
            return decode(['uint256'], data)[0]
        
        def decode_uint8(data):
            return decode(['uint8'], data)[0]
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–∑–æ–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for token_addr in token_addresses:
            calls_data.extend([
                {'target': token_addr, 'data': name_sig, 'decode': decode_string, 'field': 'name'},
                {'target': token_addr, 'data': symbol_sig, 'decode': decode_string, 'field': 'symbol'},
                {'target': token_addr, 'data': decimals_sig, 'decode': decode_uint8, 'field': 'decimals'},
                {'target': token_addr, 'data': total_supply_sig, 'decode': decode_uint, 'field': 'totalSupply'},
            ])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º Multicall
        results = self.get_multiple_contract_data(calls_data, block)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        token_info = {}
        
        for i, token_addr in enumerate(token_addresses):
            token_info[token_addr] = {}
            
            # –ö–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç 4 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (name, symbol, decimals, totalSupply)
            for j, field in enumerate(['name', 'symbol', 'decimals', 'totalSupply']):
                result_index = i * 4 + j
                
                if result_index < len(results) and results[result_index].success:
                    token_info[token_addr][field] = results[result_index].results['value']
                else:
                    token_info[token_addr][field] = None
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(token_addresses)} —Ç–æ–∫–µ–Ω–∞—Ö")
        
        return token_info
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Multicall –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        avg_execution_time = (
            self.total_execution_time / self.batch_count 
            if self.batch_count > 0 else 0
        )
        
        estimated_credits_saved = self.total_calls_saved * 20  # 20 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –≤—ã–∑–æ–≤
        
        return {
            'total_multicall_batches': self.batch_count,
            'total_calls_made': self.total_calls_made,
            'total_calls_saved': self.total_calls_saved,
            'avg_execution_time': f"{avg_execution_time:.2f}s",
            'estimated_credits_saved': estimated_credits_saved,
            'efficiency': f"{(self.total_calls_saved / max(1, self.total_calls_made + self.total_calls_saved) * 100):.1f}%"
        }


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MulticallManager
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MulticallManager...")
    
    from blockchain.node_client import Web3Manager
    from config.constants import QUICKNODE_HTTP, TOKEN_ADDRESS
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    w3_manager = Web3Manager()
    multicall_manager = MulticallManager(w3_manager.w3_http)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
    test_addresses = [
        "0x0000000000000000000000000000000000000001",
        "0x0000000000000000000000000000000000000002", 
        "0x0000000000000000000000000000000000000003",
        "0x0000000000000000000000000000000000000004",
        "0x0000000000000000000000000000000000000005"
    ]
    
    print(f"\nüí∞ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:")
    print(f"–¢–æ–∫–µ–Ω: {TOKEN_ADDRESS}")
    print(f"–ê–¥—Ä–µ—Å–∞: {len(test_addresses)}")
    
    try:
        start_time = time.time()
        balances = multicall_manager.get_balances_batch(TOKEN_ADDRESS, test_addresses)
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(balances)} –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞ {execution_time:.2f}s")
        
        for addr, balance in list(balances.items())[:3]:
            print(f"  {addr}: {balance} PLEX")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = multicall_manager.get_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Multicall:")
        for key, value in stats.items():
            print(f"  {key}: {value}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    print("\n‚úÖ MulticallManager —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
