"""
PLEX Dynamic Staking Manager - Smart Cache System
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import time
import threading
from typing import Dict, List, Optional, Any, Set
from collections import defaultdict, OrderedDict
from datetime import datetime, timedelta
from decimal import Decimal

from utils.logger import get_logger

logger = get_logger(__name__)


class SmartCache:
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ—Å–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏
    –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ blockchain –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    
    def __init__(self, analyzer, max_size: int = 50000, default_ttl: int = 300):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –∫—ç—à–∞.
        
        Args:
            analyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            max_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            default_ttl: TTL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.analyzer = analyzer
        self.max_size = max_size
        self.default_ttl = default_ttl
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à: {cache_key: {'value': value, 'timestamp': time, 'ttl': ttl}}
        self.cache: OrderedDict = OrderedDict()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {key: {'count': int, 'last_access': time}}
        self.access_stats: Dict[str, Dict] = defaultdict(lambda: {'count': 0, 'last_access': 0})
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        self.popular_addresses: List[str] = []
        self.popular_blocks: Set[int] = set()
        
        # –ö—ç—à —Å–æ—Å–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.neighbor_cache: Dict[str, List[str]] = {}
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        self.lock = threading.RLock()
        
        # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏
        self.cleanup_thread = threading.Thread(target=self._background_cleanup, daemon=True)
        self.cleanup_thread.start()
        
        logger.info(f"üß† SmartCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: max_size={max_size}, default_ttl={default_ttl}s")
    
    def get(self, key: str, ttl: Optional[int] = None) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞.
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            ttl: TTL –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
            
        Returns:
            Any: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None
        """
        with self.lock:
            if key in self.cache:
                entry = self.cache[key]
                current_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL
                if current_time - entry['timestamp'] < entry.get('ttl', self.default_ttl):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self._update_access_stats(key)
                    
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü (LRU)
                    self.cache.move_to_end(key)
                    
                    return entry['value']
                else:
                    # –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∑–∞–ø–∏—Å—å
                    del self.cache[key]
            
            return None
    
    def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à.
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
            ttl: TTL –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
        """
        with self.lock:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
            if len(self.cache) >= self.max_size:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (LRU)
                oldest_key = next(iter(self.cache))
                del self.cache[oldest_key]
                logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–ª—é—á: {oldest_key}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self.cache[key] = {
                'value': value,
                'timestamp': time.time(),
                'ttl': ttl or self.default_ttl
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_access_stats(key)
    
    def get_balance_with_preload(self, address: str, block: int, 
                                neighbor_addresses: Optional[List[str]] = None) -> Optional[Decimal]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ—Å–µ–¥–Ω–∏—Ö –∞–¥—Ä–µ—Å–æ–≤.
        
        Args:
            address: –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            block: –ù–æ–º–µ—Ä –±–ª–æ–∫–∞
            neighbor_addresses: –°–æ—Å–µ–¥–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            Decimal: –ë–∞–ª–∞–Ω—Å –∏–ª–∏ None
        """
        cache_key = f"balance:{address}:{block}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_balance = self.get(cache_key)
        if cached_balance is not None:
            self._update_popularity(address, block)
            return cached_balance
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ –∞–¥—Ä–µ—Å–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç–æ–º
        if neighbor_addresses:
            addresses_to_load = [address]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ
            for neighbor in neighbor_addresses[:49]:  # –ú–∞–∫—Å–∏–º—É–º 50 –∞–¥—Ä–µ—Å–æ–≤ –≤ multicall
                neighbor_key = f"balance:{neighbor}:{block}"
                if self.get(neighbor_key) is None:
                    addresses_to_load.append(neighbor)
            
            # Multicall –∑–∞–ø—Ä–æ—Å - –û–î–ò–ù –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞!
            try:
                balances = self.analyzer.get_balances_multicall(
                    self.analyzer.token_address,
                    addresses_to_load,
                    block
                )
                
                # –ö—ç—à–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
                for addr, balance in balances.items():
                    addr_key = f"balance:{addr}:{block}"
                    self.set(addr_key, balance, ttl=300)  # 5 –º–∏–Ω—É—Ç TTL –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–æ–∫
                self.neighbor_cache[address] = neighbor_addresses[:20]
                
                self._update_popularity(address, block)
                return balances.get(address)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ multicall –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                return None
        
        return None
    
    def preload_popular(self, top_count: int = 50) -> None:
        """
        –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.
        
        Args:
            top_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        """
        if not self.popular_addresses:
            return
            
        def preload_task():
            """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏."""
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∞–¥—Ä–µ—Å–∞
                top_addresses = self.popular_addresses[:top_count]
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫
                current_block = self.analyzer.web3_manager.w3_http.eth.block_number
                
                # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
                missing_addresses = []
                for addr in top_addresses:
                    cache_key = f"balance:{addr}:{current_block}"
                    if self.get(cache_key) is None:
                        missing_addresses.append(addr)
                
                if missing_addresses:
                    logger.info(f"üì¶ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ {len(missing_addresses)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤...")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á–∞–º–∏
                    for i in range(0, len(missing_addresses), 50):
                        batch = missing_addresses[i:i+50]
                        
                        balances = self.analyzer.get_balances_multicall(
                            self.analyzer.token_address,
                            batch,
                            current_block
                        )
                        
                        # –ö—ç—à–∏—Ä—É–µ–º
                        for addr, balance in balances.items():
                            cache_key = f"balance:{addr}:{current_block}"
                            self.set(cache_key, balance, ttl=600)  # 10 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
                    
                    logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(missing_addresses)} –∞–¥—Ä–µ—Å–æ–≤")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        threading.Thread(target=preload_task, daemon=True).start()
    
    def _update_access_stats(self, key: str) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞."""
        self.access_stats[key]['count'] += 1
        self.access_stats[key]['last_access'] = time.time()
    
    def _update_popularity(self, address: str, block: int) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if address not in self.popular_addresses:
            self.popular_addresses.append(address)
        else:
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü (—Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)
            self.popular_addresses.remove(address)
            self.popular_addresses.append(address)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
        if len(self.popular_addresses) > 1000:
            self.popular_addresses = self.popular_addresses[-500:]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª–æ–∫–∏
        self.popular_blocks.add(block)
        if len(self.popular_blocks) > 100:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏
            sorted_blocks = sorted(self.popular_blocks)
            self.popular_blocks = set(sorted_blocks[-50:])
    
    def _background_cleanup(self) -> None:
        """–§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π."""
        while True:
            try:
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                current_time = time.time()
                expired_keys = []
                
                with self.lock:
                    for key, entry in self.cache.items():
                        if current_time - entry['timestamp'] > entry.get('ttl', self.default_ttl):
                            expired_keys.append(key)
                    
                    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ
                    for key in expired_keys:
                        del self.cache[key]
                
                if expired_keys:
                    logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                old_stats = []
                for key, stats in self.access_stats.items():
                    if current_time - stats['last_access'] > 3600:  # –°—Ç–∞—Ä—à–µ —á–∞—Å–∞
                        old_stats.append(key)
                
                for key in old_stats:
                    del self.access_stats[key]
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
                time.sleep(300)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∫—ç—à–∞
        """
        with self.lock:
            total_access = sum(stats['count'] for stats in self.access_stats.values())
            
            # –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–π
            popular_keys = sorted(
                self.access_stats.items(),
                key=lambda x: x[1]['count'],
                reverse=True
            )[:10]
            
            return {
                'cache_size': len(self.cache),
                'max_size': self.max_size,
                'utilization_percent': round(len(self.cache) / self.max_size * 100, 1),
                'total_accesses': total_access,
                'unique_keys': len(self.access_stats),
                'popular_addresses_count': len(self.popular_addresses),
                'popular_blocks_count': len(self.popular_blocks),
                'top_keys': [{'key': k, 'accesses': v['count']} for k, v in popular_keys]
            }
    
    def clear_expired(self) -> int:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        current_time = time.time()
        expired_keys = []
        
        with self.lock:
            for key, entry in self.cache.items():
                if current_time - entry['timestamp'] > entry.get('ttl', self.default_ttl):
                    expired_keys.append(key)
            
            for key in expired_keys:
                del self.cache[key]
        
        logger.info(f"üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–æ {len(expired_keys)} –∑–∞–ø–∏—Å–µ–π")
        return len(expired_keys)
    
    def warm_up(self, addresses: List[str], blocks: List[int]) -> None:
        """
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏ –±–ª–æ–∫–æ–≤.
        
        Args:
            addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
            blocks: –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
        """
        logger.info(f"üî• –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞: {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ √ó {len(blocks)} –±–ª–æ–∫–æ–≤")
        
        def warm_up_task():
            """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞."""
            try:
                for block in blocks:
                    # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 50 –∞–¥—Ä–µ—Å–æ–≤
                    for i in range(0, len(addresses), 50):
                        batch = addresses[i:i+50]
                        
                        try:
                            balances = self.analyzer.get_balances_multicall(
                                self.analyzer.token_address,
                                batch,
                                block
                            )
                            
                            # –ö—ç—à–∏—Ä—É–µ–º —Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º TTL –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
                            for addr, balance in balances.items():
                                cache_key = f"balance:{addr}:{block}"
                                self.set(cache_key, balance, ttl=1800)  # 30 –º–∏–Ω—É—Ç
                            
                            logger.debug(f"üî• –ü—Ä–æ–≥—Ä–µ–≤ –±–ª–æ–∫–∞ {block}: {len(batch)} –∞–¥—Ä–µ—Å–æ–≤")
                            
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –±–ª–æ–∫–∞ {block}: {e}")
                            continue
                
                logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        threading.Thread(target=warm_up_task, daemon=True).start()


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['SmartCache']


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —É–º–Ω–æ–≥–æ –∫—ç—à–∞    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è SmartCache...")
    
    # üö´ Mock —Ç–µ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ test_components.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üö´ Mock —Ç–µ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ test_components.py")
