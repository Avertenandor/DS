"""
PLEX Dynamic Staking Manager - Transaction Scheduler
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass, field
from decimal import Decimal
import threading
from queue import PriorityQueue, Empty
from collections import defaultdict, deque
import random

from utils.logger import get_logger
from utils.retry import blockchain_retry

logger = get_logger(__name__)


@dataclass
class ScheduledTransaction:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è."""
    tx_id: str
    scheduled_time: datetime
    transaction_func: Callable
    args: tuple = field(default_factory=tuple)
    kwargs: Dict[str, Any] = field(default_factory=dict)
    priority: int = 1  # 1 = –≤—ã—Å–æ–∫–∏–π, 5 = –Ω–∏–∑–∫–∏–π
    max_retries: int = 3
    retry_count: int = 0
    callback: Optional[Callable] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def __lt__(self, other):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è PriorityQueue (—Å–Ω–∞—á–∞–ª–∞ –≤—Ä–µ–º—è, –ø–æ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)."""
        if self.scheduled_time != other.scheduled_time:
            return self.scheduled_time < other.scheduled_time
        return self.priority < other.priority


@dataclass
class SchedulerStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    total_scheduled: int = 0
    total_executed: int = 0
    total_failed: int = 0
    total_retried: int = 0
    average_delay: float = 0.0
    current_queue_size: int = 0
    last_execution_time: Optional[datetime] = None


class TransactionScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏
    - Retry –ª–æ–≥–∏–∫–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    - –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, web3_manager, base_interval: float = 1.0, 
                 max_interval: float = 30.0, network_monitor_interval: float = 10.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            web3_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            base_interval: –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (—Å–µ–∫)
            max_interval: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫)
            network_monitor_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏ (—Å–µ–∫)
        """
        self.web3_manager = web3_manager
        self.w3 = web3_manager.w3_http
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        self.base_interval = base_interval
        self.max_interval = max_interval
        self.current_interval = base_interval
        self.network_monitor_interval = network_monitor_interval
        
        # –û—á–µ—Ä–µ–¥—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è)
        self.transaction_queue = PriorityQueue()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.stats = SchedulerStats()
        self.recent_execution_times = deque(maxlen=100)
        self.network_congestion_level = 0.0  # 0.0 - —Å–≤–æ–±–æ–¥–Ω–æ, 1.0 - –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–æ
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ç–æ–∫–æ–≤
        self.running = False
        self.scheduler_thread = None
        self.monitor_thread = None
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        self.max_pending_transactions = 1000
        self.rate_limit_window = 60  # —Å–µ–∫—É–Ω–¥
        self.max_transactions_per_window = 100
        self.transaction_timestamps = deque(maxlen=self.max_transactions_per_window)
        
        logger.info(f"‚è∞ TransactionScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {base_interval}s)")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        if self.running:
            logger.warning("‚ö†Ô∏è TransactionScheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler_thread = threading.Thread(
            target=self._scheduler_loop,
            daemon=True
        )
        self.scheduler_thread.start()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏
        self.monitor_thread = threading.Thread(
            target=self._network_monitor_loop,
            daemon=True
        )
        self.monitor_thread.start()
        
        logger.info("üöÄ TransactionScheduler –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        if not self.running:
            return
        
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TransactionScheduler...")
        self.running = False
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=10)
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
        
        logger.info("‚úÖ TransactionScheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def schedule_transaction(self, transaction_func: Callable, 
                           delay_seconds: Optional[float] = None,
                           priority: int = 3,
                           max_retries: int = 3,
                           callback: Optional[Callable] = None,
                           *args, **kwargs) -> str:
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        
        Args:
            transaction_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            delay_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (None = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è)
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-5, –≥–¥–µ 1 = –≤—ã—Å—à–∏–π)
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è transaction_func
            
        Returns:
            str: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if self.transaction_queue.qsize() >= self.max_pending_transactions:
                raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {self.max_pending_transactions}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
            if not self._check_rate_limit():
                raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {self.max_transactions_per_window}/{self.rate_limit_window}s")
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if delay_seconds is None:
                delay_seconds = self._calculate_optimal_delay()
            
            scheduled_time = datetime.now() + timedelta(seconds=delay_seconds)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx_id = f"tx_{int(time.time() * 1000)}_{random.randint(1000, 9999)}"
            
            scheduled_tx = ScheduledTransaction(
                tx_id=tx_id,
                scheduled_time=scheduled_time,
                transaction_func=transaction_func,
                args=args,
                kwargs=kwargs,
                priority=priority,
                max_retries=max_retries,
                callback=callback,
                metadata={
                    'created_at': datetime.now(),
                    'delay_seconds': delay_seconds,
                    'congestion_level': self.network_congestion_level
                }
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
            self.transaction_queue.put(scheduled_tx)
            self.stats.total_scheduled += 1
            
            logger.debug(f"üìÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {tx_id} (–∑–∞–¥–µ—Ä–∂–∫–∞: {delay_seconds:.1f}s)")
            
            return tx_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise
    
    def schedule_bulk_transactions(self, transactions: List[Dict], 
                                 base_delay: float = 0.0,
                                 interval_between: Optional[float] = None) -> List[str]:
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º.
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
            interval_between: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (None = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        """
        if interval_between is None:
            interval_between = self.current_interval
        
        tx_ids = []
        
        for i, tx_params in enumerate(transactions):
            try:
                delay = base_delay + (i * interval_between)
                
                tx_id = self.schedule_transaction(
                    delay_seconds=delay,
                    **tx_params
                )
                tx_ids.append(tx_id)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {i}: {e}")
                tx_ids.append(None)
        
        successful = len([tx for tx in tx_ids if tx])
        logger.info(f"üì¶ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {successful}/{len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        return tx_ids
    
    def get_queue_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏."""
        self.stats.current_queue_size = self.transaction_queue.qsize()
        
        return {
            'queue_size': self.stats.current_queue_size,
            'current_interval': self.current_interval,
            'network_congestion': self.network_congestion_level,
            'recent_avg_delay': (
                sum(self.recent_execution_times) / len(self.recent_execution_times)
                if self.recent_execution_times else 0.0
            ),
            'rate_limit_usage': len(self.transaction_timestamps),
            'is_running': self.running
        }
    
    def get_statistics(self) -> SchedulerStats:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        self.stats.current_queue_size = self.transaction_queue.qsize()
        if self.recent_execution_times:
            self.stats.average_delay = sum(self.recent_execution_times) / len(self.recent_execution_times)
        
        return self.stats
    
    def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                try:
                    scheduled_tx = self.transaction_queue.get(timeout=1.0)
                except Empty:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                now = datetime.now()
                if scheduled_tx.scheduled_time > now:
                    # –†–∞–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                    self.transaction_queue.put(scheduled_tx)
                    time.sleep(0.1)
                    continue
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                self._execute_scheduled_transaction(scheduled_tx)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(1)
        
        logger.info("‚èπÔ∏è –¶–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _execute_scheduled_transaction(self, scheduled_tx: ScheduledTransaction):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        start_time = time.time()
        
        try:
            logger.debug(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {scheduled_tx.tx_id}")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            result = scheduled_tx.transaction_func(*scheduled_tx.args, **scheduled_tx.kwargs)
            
            execution_time = time.time() - start_time
            self.recent_execution_times.append(execution_time)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats.total_executed += 1
            self.stats.last_execution_time = datetime.now()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ timestamp –¥–ª—è rate limiting
            self.transaction_timestamps.append(time.time())
            
            # –í—ã–∑–æ–≤ callback
            if scheduled_tx.callback:
                try:
                    scheduled_tx.callback(scheduled_tx, result, True)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ callback –¥–ª—è {scheduled_tx.tx_id}: {e}")
            
            logger.debug(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {scheduled_tx.tx_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {execution_time:.2f}s")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {scheduled_tx.tx_id}: {e}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤
            if scheduled_tx.retry_count < scheduled_tx.max_retries:
                scheduled_tx.retry_count += 1
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è retry
                retry_delay = min(
                    self.base_interval * (2 ** scheduled_tx.retry_count),
                    self.max_interval
                )
                
                scheduled_tx.scheduled_time = datetime.now() + timedelta(seconds=retry_delay)
                
                # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                self.transaction_queue.put(scheduled_tx)
                self.stats.total_retried += 1
                
                logger.info(f"üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {scheduled_tx.tx_id} –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ {retry_delay:.1f}s (–ø–æ–ø—ã—Ç–∫–∞ {scheduled_tx.retry_count}/{scheduled_tx.max_retries})")
            else:
                # –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
                self.stats.total_failed += 1
                
                # –í—ã–∑–æ–≤ callback —Å –æ—à–∏–±–∫–æ–π
                if scheduled_tx.callback:
                    try:
                        scheduled_tx.callback(scheduled_tx, None, False, str(e))
                    except Exception as cb_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ callback –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {scheduled_tx.tx_id}: {cb_error}")
                
                logger.error(f"üíÄ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {scheduled_tx.tx_id} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ {scheduled_tx.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    
    def _network_monitor_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤."""
        logger.info("üìä –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏")
        
        while self.running:
            try:
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏
                self._update_network_congestion()
                
                # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                self._adapt_intervals()
                
                time.sleep(self.network_monitor_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏: {e}")
                time.sleep(self.network_monitor_interval)
        
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _update_network_congestion(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏."""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ gas price
            current_gas_price = self.w3.eth.gas_price
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            pending_count = len(self.w3.eth.get_block('pending').transactions)
            
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è gas price (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ 20 Gwei)
            base_gas_price = 20 * 10**9  # 20 Gwei
            gas_factor = min(current_gas_price / base_gas_price, 10.0) / 10.0
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            pending_factor = min(pending_count / 1000, 1.0)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏
            self.network_congestion_level = (gas_factor * 0.7 + pending_factor * 0.3)
            
            logger.debug(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: {self.network_congestion_level:.2f} (gas: {current_gas_price/10**9:.1f} Gwei, pending: {pending_count})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            self.network_congestion_level = 0.5
    
    def _adapt_intervals(self):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏."""
        try:
            # –†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            congestion_multiplier = 1.0 + (self.network_congestion_level * 2.0)
            
            new_interval = min(
                self.base_interval * congestion_multiplier,
                self.max_interval
            )
            
            # –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if abs(new_interval - self.current_interval) > 0.1:
                self.current_interval = (self.current_interval * 0.8 + new_interval * 0.2)
                
                logger.debug(f"‚öôÔ∏è –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {self.current_interval:.2f}s (–∑–∞–≥—Ä—É–∑–∫–∞: {self.network_congestion_level:.2f})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {e}")
    
    def _calculate_optimal_delay(self) -> float:
        """–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏
        base_delay = self.current_interval
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–∂–∏—Ç—Ç–µ—Ä–∞ (¬±20%)
        jitter = random.uniform(-0.2, 0.2) * base_delay
        
        # –£—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
        queue_factor = min(self.transaction_queue.qsize() / 100, 1.0)
        queue_delay = queue_factor * self.current_interval
        
        total_delay = max(base_delay + jitter + queue_delay, 0.1)
        
        return min(total_delay, self.max_interval)
    
    def _check_rate_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit."""
        current_time = time.time()
        window_start = current_time - self.rate_limit_window
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö timestamp'–æ–≤
        while self.transaction_timestamps and self.transaction_timestamps[0] < window_start:
            self.transaction_timestamps.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        return len(self.transaction_timestamps) < self.max_transactions_per_window


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['TransactionScheduler', 'ScheduledTransaction', 'SchedulerStats']


if __name__ == "__main__":
    print("‚è∞ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è TransactionScheduler...")
    print("üí° –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç—Ä–µ–±—É–µ—Ç Web3Manager –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏")
