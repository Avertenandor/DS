"""
–ú–æ–¥—É–ª—å: –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
–û–ø–∏—Å–∞–Ω–∏–µ: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤, –±–∞–ª–∞–Ω—Å–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å TTL –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ 90% –∑–∞–ø—Ä–æ—Å–æ–≤
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: threading, time, collections
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import time
import threading
from typing import Dict, Any, Optional, List, Callable
from collections import OrderedDict, defaultdict
from decimal import Decimal
from dataclasses import dataclass
from datetime import datetime, timedelta

from utils.logger import get_logger
from config.constants import TOKEN_DECIMALS

logger = get_logger("CacheManager")


@dataclass
class CacheEntry:
    """–ó–∞–ø–∏—Å—å –≤ –∫—ç—à–µ —Å TTL"""
    value: Any
    timestamp: float
    ttl: int
    access_count: int = 0
    last_access: float = 0


class BlockNumberCache:
    """–ö—ç—à –Ω–æ–º–µ—Ä–∞ –±–ª–æ–∫–∞ —Å TTL –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ 90% –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞"""
    
    def __init__(self, ttl_seconds: int = 60):
        self._cache = None
        self._timestamp = 0
        self.ttl = ttl_seconds
        self._lock = threading.Lock()
        self.hits = 0
        self.misses = 0
        
        logger.info(f"üîÑ BlockNumberCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å TTL {ttl_seconds}s")
        
    def get_block_number(self, w3) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        now = time.time()
        
        with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
            if self._cache and (now - self._timestamp) < self.ttl:
                self.hits += 1
                logger.debug(f"üì¶ Cache HIT: block {self._cache}")
                return self._cache
            
            # –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
            self.misses += 1
            self._cache = w3.eth.block_number
            self._timestamp = now
            
            logger.debug(f"üîÑ Cache MISS: fetched block {self._cache}")
            return self._cache
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞"""
        total = self.hits + self.misses
        hit_rate = (self.hits / total * 100) if total > 0 else 0
        
        return {
            'hits': self.hits,
            'misses': self.misses,
            'hit_rate': f"{hit_rate:.1f}%",
            'total_requests': total,
            'credits_saved': self.hits * 20  # 20 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å
        }


class SmartCache:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, max_size: int = 10000, default_ttl: int = 300):
        self.cache: Dict[str, CacheEntry] = OrderedDict()
        self.max_size = max_size
        self.default_ttl = default_ttl
        self._lock = threading.RLock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.hits = 0
        self.misses = 0
        self.evictions = 0
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        self.access_patterns = defaultdict(int)
        self.popular_keys = []
        
        logger.info(f"üß† SmartCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: max_size={max_size}, default_ttl={default_ttl}s")
        
    def get(self, key: str, fetch_func: Callable = None, ttl: int = None, 
            **fetch_kwargs) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å"""
        now = time.time()
        
        with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∫—ç—à–µ
            if key in self.cache:
                entry = self.cache[key]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
                if now - entry.timestamp < entry.ttl:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
                    entry.access_count += 1
                    entry.last_access = now
                    self.access_patterns[key] += 1
                    self.hits += 1
                    
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü (LRU)
                    self.cache.move_to_end(key)
                    
                    logger.debug(f"üì¶ Cache HIT: {key}")
                    return entry.value
                else:
                    # –ó–∞–ø–∏—Å—å —É—Å—Ç–∞—Ä–µ–ª–∞
                    del self.cache[key]
                    logger.debug(f"‚è∞ Cache EXPIRED: {key}")
            
            # –ö—ç—à –ø—Ä–æ–º–∞—Ö - –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
            self.misses += 1
            
            if fetch_func is None:
                logger.debug(f"‚ùå Cache MISS: {key} (no fetch function)")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            try:
                value = fetch_func(**fetch_kwargs)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.set(key, value, ttl or self.default_ttl)
                
                logger.debug(f"üîÑ Cache MISS: {key} (fetched and cached)")
                return value
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {key}: {e}")
                return None
    
    def set(self, key: str, value: Any, ttl: int = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        now = time.time()
        ttl = ttl or self.default_ttl
        
        with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self.cache) >= self.max_size:
                self._evict_lru()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            entry = CacheEntry(
                value=value,
                timestamp=now,
                ttl=ttl,
                access_count=1,
                last_access=now
            )
            
            self.cache[key] = entry
            self.access_patterns[key] += 1
            
    def _evict_lru(self):
        """–£–¥–∞–ª–∏—Ç—å –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–ø–∏—Å–∏"""
        if not self.cache:
            return
            
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å (LRU)
        oldest_key = next(iter(self.cache))
        del self.cache[oldest_key]
        self.evictions += 1
        
        logger.debug(f"üóëÔ∏è Evicted LRU entry: {oldest_key}")
    
    def preload_popular(self, fetch_func: Callable, popular_keys: List[str], 
                       **fetch_kwargs):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        def _preload():
            for key in popular_keys[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50 –∑–∞–ø–∏—Å—è–º–∏
                if key not in self.cache:
                    try:
                        value = fetch_func(key=key, **fetch_kwargs)
                        self.set(key, value)
                        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ {key}: {e}")
        
        threading.Thread(target=_preload, daemon=True).start()
        logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ {len(popular_keys)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–π")
    
    def update_popular_keys(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π
        sorted_keys = sorted(
            self.access_patterns.items(),
            key=lambda x: x[1],
            reverse=True
        )
        
        self.popular_keys = [key for key, count in sorted_keys[:100]]
        logger.debug(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(self.popular_keys)}")
    
    def cleanup_expired(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
        now = time.time()
        expired_keys = []
        
        with self._lock:
            for key, entry in self.cache.items():
                if now - entry.timestamp >= entry.ttl:
                    expired_keys.append(key)
            
            for key in expired_keys:
                del self.cache[key]
        
        if expired_keys:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
        total = self.hits + self.misses
        hit_rate = (self.hits / total * 100) if total > 0 else 0
        
        return {
            'size': len(self.cache),
            'max_size': self.max_size,
            'hits': self.hits,
            'misses': self.misses,
            'evictions': self.evictions,
            'hit_rate': f"{hit_rate:.1f}%",
            'popular_keys_count': len(self.popular_keys),
            'credits_saved': self.hits * 20  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è
        }


class MulticallCache:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à –¥–ª—è Multicall –∑–∞–ø—Ä–æ—Å–æ–≤ –±–∞–ª–∞–Ω—Å–æ–≤"""
    
    def __init__(self, ttl_seconds: int = 120):
        self.cache: Dict[str, Dict[str, Decimal]] = {}
        self.timestamps: Dict[str, float] = {}
        self.ttl = ttl_seconds
        self._lock = threading.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.batch_hits = 0
        self.batch_misses = 0
        self.individual_hits = 0
        
        logger.info(f"üí∞ MulticallCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å TTL {ttl_seconds}s")
    
    def get_batch_balances(self, token_address: str, addresses: List[str], 
                          block: int, fetch_func: Callable) -> Dict[str, Decimal]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"{token_address}:{block}"
        now = time.time()
        
        with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
            if (cache_key in self.cache and 
                cache_key in self.timestamps and
                now - self.timestamps[cache_key] < self.ttl):
                
                cached_balances = self.cache[cache_key]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –∫—ç—à–µ
                missing_addresses = [addr for addr in addresses if addr not in cached_balances]
                
                if not missing_addresses:
                    # –í—Å–µ –∞–¥—Ä–µ—Å–∞ –≤ –∫—ç—à–µ
                    self.batch_hits += 1
                    result = {addr: cached_balances[addr] for addr in addresses}
                    logger.debug(f"üì¶ Batch cache HIT: {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤")
                    return result
                
                # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
                if len(missing_addresses) < len(addresses):
                    logger.debug(f"üì¶ Partial cache HIT: {len(addresses) - len(missing_addresses)}/{len(addresses)}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
                    new_balances = fetch_func(token_address, missing_addresses, block)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    cached_balances.update(new_balances)
                    self.timestamps[cache_key] = now
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = {addr: cached_balances[addr] for addr in addresses}
                    return result
            
            # –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–∞—Ö - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã
            self.batch_misses += 1
            
            balances = fetch_func(token_address, addresses, block)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.cache[cache_key] = balances.copy()
            self.timestamps[cache_key] = now
            
            logger.debug(f"üîÑ Batch cache MISS: –ø–æ–ª—É—á–µ–Ω–æ {len(balances)} –±–∞–ª–∞–Ω—Å–æ–≤")
            return balances
    
    def get_balance(self, token_address: str, address: str, block: int) -> Optional[Decimal]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏–∑ –∫—ç—à–∞"""
        cache_key = f"{token_address}:{block}"
        now = time.time()
        
        with self._lock:
            if (cache_key in self.cache and 
                cache_key in self.timestamps and
                now - self.timestamps[cache_key] < self.ttl):
                
                if address in self.cache[cache_key]:
                    self.individual_hits += 1
                    return self.cache[cache_key][address]
        
        return None
    
    def cleanup_old_entries(self, keep_latest_n: int = 100):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –±–ª–æ–∫–æ–≤"""
        with self._lock:
            if len(self.cache) <= keep_latest_n:
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
            sorted_keys = sorted(
                self.timestamps.items(),
                key=lambda x: x[1],
                reverse=True
            )
            
            keys_to_keep = [key for key, _ in sorted_keys[:keep_latest_n]]
            keys_to_remove = [key for key in self.cache.keys() if key not in keys_to_keep]
            
            for key in keys_to_remove:
                del self.cache[key]
                del self.timestamps[key]
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(keys_to_remove)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–æ–≤")
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–æ–≤"""
        total_batches = self.batch_hits + self.batch_misses
        batch_hit_rate = (self.batch_hits / total_batches * 100) if total_batches > 0 else 0
        
        return {
            'cached_blocks': len(self.cache),
            'batch_hits': self.batch_hits,
            'batch_misses': self.batch_misses,
            'batch_hit_rate': f"{batch_hit_rate:.1f}%",
            'individual_hits': self.individual_hits,
            'estimated_credits_saved': (self.batch_hits * 1000 + self.individual_hits * 20)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫—ç—à–µ–π
block_cache = BlockNumberCache(ttl_seconds=60)
smart_cache = SmartCache(max_size=50000, default_ttl=300)
multicall_cache = MulticallCache(ttl_seconds=120)


def get_cache_manager_stats() -> Dict[str, Any]:
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
    return {
        'block_cache': block_cache.get_stats(),
        'smart_cache': smart_cache.get_stats(),
        'multicall_cache': multicall_cache.get_stats(),
        'timestamp': datetime.now().isoformat()
    }


def cleanup_all_caches():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
    smart_cache.cleanup_expired()
    multicall_cache.cleanup_old_entries()
    logger.info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π")


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π
def start_cache_cleanup_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π"""
    def cleanup_loop():
        while True:
            time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            try:
                cleanup_all_caches()
                smart_cache.update_popular_keys()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π: {e}")
    
    thread = threading.Thread(target=cleanup_loop, daemon=True)
    thread.start()
    logger.info("‚è∞ –ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")


if __name__ == "__main__":
    # üö´ Mock —Ç–µ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ test_components.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ BSC
    print("üö´ Mock —Ç–µ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ test_components.py")
