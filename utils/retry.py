"""
–ú–æ–¥—É–ª—å: Retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
–û–ø–∏—Å–∞–Ω–∏–µ: –£–º–Ω—ã–µ retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: tenacity, functools, time
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import functools
import time
import random
from typing import Callable, Type, Union, List, Optional
from tenacity import (
    retry, stop_after_attempt, wait_exponential, 
    retry_if_exception_type, wait_fixed, wait_random_exponential
)

from utils.logger import get_logger
from config.settings import settings

logger = get_logger("Retry")


class BlockchainRetryError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ retry"""
    pass


class RateLimitError(BlockchainRetryError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    pass


class PayloadTooLargeError(BlockchainRetryError):
    """–û—à–∏–±–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ payload"""
    pass


class ConnectionError(BlockchainRetryError):
    """–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–¥–µ"""
    pass


class TemporaryNodeError(BlockchainRetryError):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–æ–¥—ã"""
    pass


def extract_error_type(exception: Exception) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    error_msg = str(exception).lower()
    
    if "rate limit" in error_msg or "too many requests" in error_msg or "429" in error_msg:
        return "rate_limit"
    elif "payload too large" in error_msg or "request entity too large" in error_msg:
        return "payload_too_large"
    elif "connection" in error_msg or "timeout" in error_msg or "network" in error_msg:
        return "connection"
    elif "internal server error" in error_msg or "502" in error_msg or "503" in error_msg:
        return "temporary_node"
    else:
        return "unknown"


def log_retry_attempt(retry_state):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ retry"""
    attempt = retry_state.attempt_number
    if hasattr(retry_state, 'outcome') and retry_state.outcome.failed:
        exception = retry_state.outcome.exception()
        error_type = extract_error_type(exception)
        logger.warning(f"üîÑ Retry attempt {attempt} failed: {error_type} - {exception}")
    else:
        logger.debug(f"üîÑ Retry attempt {attempt}")


def blockchain_retry(
    max_attempts: int = None,
    base_delay: float = None,
    max_delay: float = 60.0,
    jitter: bool = True,
    rate_limit_delay: float = 2.0
):
    """
    –£–º–Ω—ã–π retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        max_delay: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        jitter: –î–æ–±–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        rate_limit_delay: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limit –æ—à–∏–±–æ–∫
    """
    if max_attempts is None:
        max_attempts = settings.retry_attempts
    if base_delay is None:
        base_delay = settings.retry_delay_base
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(1, max_attempts + 1):
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
                    if attempt > 1:
                        logger.debug(f"üîÑ Retry attempt {attempt}/{max_attempts} for {func.__name__}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    result = func(*args, **kwargs)
                    
                    # –£—Å–ø–µ—Ö - –ª–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ retry
                    if attempt > 1:
                        logger.info(f"‚úÖ {func.__name__} succeeded on attempt {attempt}")
                    
                    return result
                    
                except Exception as e:
                    last_exception = e
                    error_type = extract_error_type(e)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                    if not should_retry(e, attempt, max_attempts):
                        logger.error(f"‚ùå {func.__name__} failed permanently: {e}")
                        raise e
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    delay = calculate_retry_delay(
                        attempt, base_delay, max_delay, error_type, 
                        rate_limit_delay, jitter
                    )
                    
                    logger.warning(
                        f"‚è≥ {func.__name__} attempt {attempt} failed ({error_type}), "
                        f"retrying in {delay:.2f}s: {e}"
                    )
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    time.sleep(delay)
            
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            logger.error(f"‚ùå {func.__name__} failed after {max_attempts} attempts")
            raise last_exception
            
        return wrapper
    return decorator


def should_retry(exception: Exception, attempt: int, max_attempts: int) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"""
    
    # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ
    if attempt >= max_attempts:
        return False
    
    error_msg = str(exception).lower()
    
    # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    permanent_errors = [
        "invalid address",
        "invalid transaction",
        "insufficient funds",
        "nonce too low",
        "authentication failed",
        "unauthorized",
        "forbidden",
        "bad request"
    ]
    
    for permanent_error in permanent_errors:
        if permanent_error in error_msg:
            return False
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    temporary_errors = [
        "rate limit",
        "too many requests",
        "payload too large",
        "connection",
        "timeout",
        "internal server error",
        "bad gateway",
        "service unavailable",
        "gateway timeout"
    ]
    
    for temporary_error in temporary_errors:
        if temporary_error in error_msg:
            return True
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
    return False


def calculate_retry_delay(
    attempt: int, 
    base_delay: float, 
    max_delay: float, 
    error_type: str,
    rate_limit_delay: float,
    jitter: bool
) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è retry"""
    
    # –ë–∞–∑–æ–≤–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    delay = min(base_delay * (2 ** (attempt - 1)), max_delay)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limit
    if error_type == "rate_limit":
        delay += rate_limit_delay
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è payload too large
    elif error_type == "payload_too_large":
        delay += 1.0  # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    if jitter:
        jitter_amount = delay * 0.1  # 10% jitter
        delay += random.uniform(-jitter_amount, jitter_amount)
    
    return max(0.1, delay)  # –ú–∏–Ω–∏–º—É–º 0.1 —Å–µ–∫—É–Ω–¥—ã


# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π

def api_call_retry(max_attempts: int = 5):
    """Retry –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤ —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    return blockchain_retry(
        max_attempts=max_attempts,
        base_delay=1.0,
        max_delay=30.0,
        rate_limit_delay=2.0
    )


def critical_operation_retry(max_attempts: int = 10):
    """Retry –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    return blockchain_retry(
        max_attempts=max_attempts,
        base_delay=0.5,
        max_delay=60.0,
        rate_limit_delay=5.0
    )


def lightweight_retry(max_attempts: int = 3):
    """Retry –¥–ª—è –ª–µ–≥–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±—ã—Å—Ç—Ä—ã–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    return blockchain_retry(
        max_attempts=max_attempts,
        base_delay=0.2,
        max_delay=5.0,
        rate_limit_delay=1.0
    )


def gas_transaction_retry(max_attempts: int = 7):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π retry –¥–ª—è –≥–∞–∑–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    return blockchain_retry(
        max_attempts=max_attempts,
        base_delay=2.0,
        max_delay=120.0,
        rate_limit_delay=10.0
    )


# Tenacity –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=1, min=1, max=30),
    retry=retry_if_exception_type((ConnectionError, TemporaryNodeError)),
    after=log_retry_attempt
)
def tenacity_api_call(func: Callable) -> Callable:
    """Tenacity –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤"""
    return func


@retry(
    stop=stop_after_attempt(3),
    wait=wait_fixed(2) + wait_random_exponential(multiplier=1, max=10),
    retry=retry_if_exception_type(RateLimitError),
    after=log_retry_attempt
)
def tenacity_rate_limit_retry(func: Callable) -> Callable:
    """Tenacity –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limit –æ—à–∏–±–æ–∫"""
    return func


class RetryCounter:
    """–°—á–µ—Ç—á–∏–∫ retry –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.counters = {}
        self.reset_time = time.time()
    
    def increment(self, operation: str, error_type: str):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"""
        key = f"{operation}:{error_type}"
        self.counters[key] = self.counters.get(key, 0) + 1
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É retry –ø–æ–ø—ã—Ç–æ–∫"""
        total_retries = sum(self.counters.values())
        uptime_hours = (time.time() - self.reset_time) / 3600
        
        return {
            "total_retries": total_retries,
            "retries_per_hour": total_retries / uptime_hours if uptime_hours > 0 else 0,
            "by_operation": self.counters,
            "uptime_hours": uptime_hours
        }
    
    def reset(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏"""
        self.counters.clear()
        self.reset_time = time.time()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ retry
retry_counter = RetryCounter()


def with_retry(max_attempts: int = 3, delay: float = 1.0, backoff: float = 2.0):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä retry —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        backoff: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    """
    def decorator(func: Callable):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            current_delay = delay
            for attempt in range(max_attempts):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if attempt == max_attempts - 1:
                        logger.error(f"‚ùå {func.__name__} failed after {max_attempts} attempts: {e}")
                        raise
                    
                    logger.warning(f"‚ö†Ô∏è {func.__name__} attempt {attempt + 1} failed: {e}. Retrying in {current_delay}s...")
                    time.sleep(current_delay)
                    current_delay *= backoff
            
        return wrapper
    return decorator


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ retry –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    
    @api_call_retry()
    def test_api_call(should_fail: bool = False):
        """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è API –≤—ã–∑–æ–≤–∞"""
        if should_fail:
            raise Exception("rate limit exceeded")
        return "success"
    
    @critical_operation_retry()
    def test_critical_operation(should_fail: bool = False):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"""
        if should_fail:
            raise Exception("connection timeout")
        return "critical success"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤
    result = test_api_call(False)
    print(f"‚úÖ API call result: {result}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤
    try:
        result = test_api_call(True)
    except Exception as e:
        print(f"‚ùå API call failed after retries: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry
    stats = retry_counter.get_stats()
    print(f"üìä Retry stats: {stats}")
