"""
PLEX Dynamic Staking Manager - Batch Transaction Processor
–ë–∞—Ç—á–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –¥–æ 70% –Ω–∞ –º–∞—Å—Å–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from decimal import Decimal
import threading
from queue import Queue, Empty
from collections import defaultdict

from config.constants import TOKEN_ADDRESS, TOKEN_DECIMALS, BATCH_TRANSFER_CONTRACT
from utils.logger import get_logger
from utils.retry import blockchain_retry
from blockchain.gas_manager import GasManager

logger = get_logger(__name__)


@dataclass
class TransferRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤."""
    recipient: str
    amount: Decimal
    priority: int = 1  # 1 = –≤—ã—Å–æ–∫–∏–π, 5 = –Ω–∏–∑–∫–∏–π
    created_at: datetime = field(default_factory=datetime.now)
    callback: Optional[callable] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class BatchResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞."""
    batch_id: str
    tx_hash: Optional[str] = None
    success: bool = False
    gas_used: int = 0
    gas_price: int = 0
    total_amount: Decimal = field(default_factory=lambda: Decimal('0'))
    recipients_count: int = 0
    processing_time: float = 0.0
    error: Optional[str] = None
    individual_results: List[Dict] = field(default_factory=list)


class BatchTransactionProcessor:
    """
    –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –±–∞—Ç—á-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≥–∞–∑–∞.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ 50 –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É/–≤—Ä–µ–º–µ–Ω–∏
    - Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –±–∞—Ç—á–µ–π
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∏ –≥–∞–∑–∞
    - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    """
    
    def __init__(self, web3_manager, batch_size: int = 50, timeout_seconds: int = 300):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –±–∞—Ç—á–µ–π.
        
        Args:
            web3_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            batch_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–¥–æ 50)
            timeout_seconds: –¢–∞–π–º-–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞
        """
        self.web3_manager = web3_manager
        self.w3 = web3_manager.w3_http
        self.batch_size = min(batch_size, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 –∞–¥—Ä–µ—Å–æ–≤
        self.timeout_seconds = timeout_seconds
        
        # –û—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        self.pending_transfers = {
            1: Queue(),  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            2: Queue(),  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            3: Queue(),  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_batches_executed = 0
        self.total_transfers_processed = 0
        self.total_gas_saved = 0
        self.last_batch_time = datetime.now()
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ç–æ–∫–æ–≤
        self.running = False
        self.processor_thread = None
        
        # Gas manager –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.gas_manager = GasManager(web3_manager)
          logger.info(f"üî• BatchTransactionProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size})")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –±–∞—Ç—á–µ–π."""
        if self.running:
            logger.warning("‚ö†Ô∏è BatchTransactionProcessor —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.running = True
        self.processor_thread = threading.Thread(
            target=self._process_batches_loop,
            daemon=True
        )
        self.processor_thread.start()
        
        logger.info("üöÄ BatchTransactionProcessor –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        \"\"\"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –±–∞—Ç—á–µ–π.\"\"\"
        if not self.running:
            return
        
        logger.info(\"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ BatchTransactionProcessor...\")
        self.running = False
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–∞—Ç—á–µ–π
        self.flush_all_pending()
        
        if self.processor_thread:
            self.processor_thread.join(timeout=10)
        
        logger.info(\"‚úÖ BatchTransactionProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\")
    
    def add_transfer(self, recipient: str, amount: Decimal, priority: int = 2, 
                    callback: Optional[callable] = None, **metadata) -> str:
        \"\"\"
        –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤ –æ—á–µ—Ä–µ–¥—å.
        
        Args:
            recipient: –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-3, –≥–¥–µ 1 = –≤—ã—Å—à–∏–π)
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            **metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            str: ID –∑–∞–ø—Ä–æ—Å–∞
        \"\"\"
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self.w3.is_address(recipient):
                raise ValueError(f\"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: {recipient}\")
            
            if amount <= 0:
                raise ValueError(f\"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: {amount}\")
            
            priority = max(1, min(3, priority))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1-3
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            transfer_request = TransferRequest(
                recipient=self.w3.to_checksum_address(recipient),
                amount=amount,
                priority=priority,
                callback=callback,
                metadata=metadata
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
            self.pending_transfers[priority].put(transfer_request)
            
            request_id = f\"{recipient[:10]}_{int(time.time() * 1000)}\"
            logger.debug(f\"üìù –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {amount} PLEX ‚Üí {recipient[:10]}... (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority})\")
            
            return request_id
            
        except Exception as e:
            logger.error(f\"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: {e}\")
            raise
    
    def add_bulk_transfers(self, transfers: List[Tuple[str, Decimal]], priority: int = 2) -> List[str]:
        \"\"\"
        –î–æ–±–∞–≤–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
        
        Args:
            transfers: –°–ø–∏—Å–æ–∫ (–∞–¥—Ä–µ—Å, —Å—É–º–º–∞)
            priority: –û–±—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ ID –∑–∞–ø—Ä–æ—Å–æ–≤
        \"\"\"
        request_ids = []
        
        for recipient, amount in transfers:
            try:
                request_id = self.add_transfer(recipient, amount, priority)
                request_ids.append(request_id)
            except Exception as e:
                logger.error(f\"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ {recipient}: {e}\")
                request_ids.append(None)
        
        logger.info(f\"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ {len([r for r in request_ids if r])} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ {len(transfers)}\")
        return request_ids
    
    def flush_all_pending(self) -> List[BatchResult]:
        \"\"\"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤.\"\"\"
        logger.info(\"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –±–∞—Ç—á–µ–π...\")
        
        results = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        for priority in [1, 2, 3]:
            while not self.pending_transfers[priority].empty():
                batch = self._collect_batch(priority)
                if batch:
                    result = self._execute_batch(batch)
                    results.append(result)
        
        logger.info(f\"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(results)} –±–∞—Ç—á–µ–π\")
        return results
    
    def get_pending_count(self) -> Dict[int, int]:
        \"\"\"–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º.\"\"\"
        return {
            priority: queue.qsize() 
            for priority, queue in self.pending_transfers.items()
        }
    
    def get_statistics(self) -> Dict[str, Any]:
        \"\"\"–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.\"\"\"
        pending = self.get_pending_count()
        total_pending = sum(pending.values())
        
        return {
            'total_batches_executed': self.total_batches_executed,
            'total_transfers_processed': self.total_transfers_processed,
            'total_gas_saved': self.total_gas_saved,
            'pending_transfers': pending,
            'total_pending': total_pending,
            'average_batch_size': (
                self.total_transfers_processed / self.total_batches_executed 
                if self.total_batches_executed > 0 else 0
            ),
            'last_batch_time': self.last_batch_time,
            'is_running': self.running
        }
    
    def _process_batches_loop(self):
        \"\"\"–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π.\"\"\"
        logger.info(\"üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π\")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞–π–º-–∞—É—Ç
                time_since_last = (datetime.now() - self.last_batch_time).total_seconds()
                has_pending = sum(self.get_pending_count().values()) > 0
                
                if has_pending and time_since_last >= self.timeout_seconds:
                    logger.info(f\"‚è∞ –¢–∞–π–º-–∞—É—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({self.timeout_seconds}s), –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞—Ç—á–∞...\")
                    self._process_next_batch()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –±–∞—Ç—á–∞
                for priority in [1, 2, 3]:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                    if self.pending_transfers[priority].qsize() >= self.batch_size:
                        logger.info(f\"üì¶ –ë–∞—Ç—á –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ {priority} –∑–∞–ø–æ–ª–Ω–µ–Ω ({self.batch_size} –ø–µ—Ä–µ–≤–æ–¥–æ–≤)\")
                        self._process_next_batch(priority)
                        break
                
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                
            except Exception as e:
                logger.error(f\"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π: {e}\")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        logger.info(\"‚èπÔ∏è –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω\")
    
    def _process_next_batch(self, priority: Optional[int] = None):
        \"\"\"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞.\"\"\"
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if priority is None:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                for p in [1, 2, 3]:
                    if not self.pending_transfers[p].empty():
                        priority = p
                        break
            
            if priority is None:
                return  # –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            # –°–±–æ—Ä –±–∞—Ç—á–∞
            batch = self._collect_batch(priority)
            if not batch:
                return
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞—Ç—á–∞
            result = self._execute_batch(batch)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.total_batches_executed += 1
            self.total_transfers_processed += len(batch)
            self.last_batch_time = datetime.now()
            
            # –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –≥–∞–∑–∞
            if result.success:
                individual_gas = len(batch) * 21000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                saved_gas = individual_gas - result.gas_used
                self.total_gas_saved += saved_gas
                
                logger.info(f\"üí∞ –ë–∞—Ç—á –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(batch)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ {saved_gas:,} –≥–∞–∑–∞\")
            
            # –í—ã–∑–æ–≤ callbacks
            self._execute_callbacks(batch, result)
            
        except Exception as e:
            logger.error(f\"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}\")
    
    def _collect_batch(self, priority: int) -> List[TransferRequest]:
        \"\"\"–°–±–æ—Ä –±–∞—Ç—á–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\"\"\"
        batch = []
        queue = self.pending_transfers[priority]
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–æ batch_size –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        for _ in range(self.batch_size):
            try:
                transfer = queue.get_nowait()
                batch.append(transfer)
            except Empty:
                break
        
        return batch
    
    @blockchain_retry
    def _execute_batch(self, batch: List[TransferRequest]) -> BatchResult:
        \"\"\"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞—Ç—á–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.\"\"\"
        start_time = time.time()
        batch_id = f\"batch_{int(start_time * 1000)}\"
        
        logger.info(f\"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞—Ç—á–∞ {batch_id}: {len(batch)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤\")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞—Ç—á-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            recipients = [transfer.recipient for transfer in batch]
            amounts = [
                int(transfer.amount * Decimal(10 ** TOKEN_DECIMALS)) 
                for transfer in batch
            ]
            
            total_amount = sum(transfer.amount for transfer in batch)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –±–∞—Ç—á-–ø–µ—Ä–µ–≤–æ–¥–æ–≤
            batch_contract = self.w3.eth.contract(
                address=BATCH_TRANSFER_CONTRACT,
                abi=self._get_batch_transfer_abi()
            )
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx = batch_contract.functions.batchTransfer(
                TOKEN_ADDRESS,
                recipients,
                amounts
            ).build_transaction({
                'from': self.gas_manager.sender_address,
                'nonce': self.w3.eth.get_transaction_count(self.gas_manager.sender_address),
                'gasPrice': self.w3.eth.gas_price
            })
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ gas manager
            tx_hash = self.gas_manager.send_transaction(tx)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash, timeout=120)
            
            processing_time = time.time() - start_time
            
            if receipt.status == 1:
                # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                result = BatchResult(
                    batch_id=batch_id,
                    tx_hash=tx_hash.hex(),
                    success=True,
                    gas_used=receipt.gasUsed,
                    gas_price=tx['gasPrice'],
                    total_amount=total_amount,
                    recipients_count=len(recipients),
                    processing_time=processing_time,
                    individual_results=[
                        {'recipient': r, 'amount': a, 'success': True} 
                        for r, a in zip(recipients, amounts)
                    ]
                )
                
                logger.info(f\"‚úÖ –ë–∞—Ç—á {batch_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {processing_time:.1f}s\")
                return result
            else:
                # –ù–µ—É–¥–∞—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                raise Exception(f\"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {tx_hash.hex()}\")
                
        except Exception as e:
            processing_time = time.time() - start_time
            
            logger.error(f\"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞ {batch_id}: {e}\")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–∞–∫ —Ñ–æ–ª–ª–±—ç–∫
            individual_results = self._execute_individual_fallback(batch)
            
            return BatchResult(
                batch_id=batch_id,
                success=False,
                error=str(e),
                processing_time=processing_time,
                recipients_count=len(batch),
                individual_results=individual_results
            )
    
    def _execute_individual_fallback(self, batch: List[TransferRequest]) -> List[Dict]:
        \"\"\"–§–æ–ª–ª–±—ç–∫: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –±–∞—Ç—á–∞.\"\"\"
        logger.warning(f\"üîÑ –§–æ–ª–ª–±—ç–∫: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(batch)} –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤\")
        
        results = []
        
        for transfer in batch:
            try:
                # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ ERC20 transfer
                tx_hash = self.gas_manager.send_token_transfer(
                    TOKEN_ADDRESS,
                    transfer.recipient,
                    transfer.amount
                )
                
                results.append({
                    'recipient': transfer.recipient,
                    'amount': transfer.amount,
                    'success': True,
                    'tx_hash': tx_hash
                })
                
            except Exception as e:
                logger.error(f\"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ {transfer.recipient}: {e}\")
                results.append({
                    'recipient': transfer.recipient,
                    'amount': transfer.amount,
                    'success': False,
                    'error': str(e)
                })
        
        successful = len([r for r in results if r['success']])
        logger.info(f\"üìä –§–æ–ª–ª–±—ç–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {successful}/{len(batch)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤\")
        
        return results
    
    def _execute_callbacks(self, batch: List[TransferRequest], result: BatchResult):
        \"\"\"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ callback —Ñ—É–Ω–∫—Ü–∏–π.\"\"\"
        for i, transfer in enumerate(batch):
            if transfer.callback:
                try:
                    individual_result = (
                        result.individual_results[i] 
                        if i < len(result.individual_results) 
                        else {'success': False, 'error': 'No result'}
                    )
                    
                    transfer.callback(transfer, individual_result, result)
                    
                except Exception as e:
                    logger.error(f\"‚ùå –û—à–∏–±–∫–∞ callback –¥–ª—è {transfer.recipient}: {e}\")
      def _get_batch_transfer_abi(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å ABI –¥–ª—è –±–∞—Ç—á-–ø–µ—Ä–µ–≤–æ–¥–æ–≤."""
        try:
            import json
            import os
            from config.constants import BASE_DIR
            
            abi_path = os.path.join(BASE_DIR, 'config', 'abi', 'batch_transfer.json')
            
            with open(abi_path, 'r', encoding='utf-8') as f:
                abi = json.load(f)
            
            logger.debug("üìã ABI –¥–ª—è –±–∞—Ç—á-–ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
            return abi
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ABI –∏–∑ —Ñ–∞–π–ª–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π ABI")
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ABI –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return [
                {
                    "inputs": [
                        {"name": "token", "type": "address"},
                        {"name": "recipients", "type": "address[]"},
                        {"name": "amounts", "type": "uint256[]"}
                    ],
                    "name": "batchTransfer",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "nonpayable",
                    "type": "function"
                }
            ]


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['BatchTransactionProcessor', 'TransferRequest', 'BatchResult']


if __name__ == \"__main__\":
    print(\"üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BatchTransactionProcessor...\")
    print(\"üí° –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç—Ä–µ–±—É–µ—Ç Web3Manager –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏\")
    print(\"üéØ –≠–∫–æ–Ω–æ–º–∏—è –¥–æ 70% –≥–∞–∑–∞ –Ω–∞ –º–∞—Å—Å–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö\")
