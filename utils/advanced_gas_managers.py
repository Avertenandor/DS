"""
PLEX Dynamic Staking Manager - Advanced Gas Management Modes
–¢—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import time
import asyncio
from decimal import Decimal
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from collections import deque
import statistics

from blockchain.gas_manager import GasManager, GasPrice, GasEstimate, GasMode
from utils.logger import get_logger
from utils.retry import blockchain_retry

logger = get_logger(__name__)


@dataclass
class NetworkConditions:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –ø–æ –≥–∞–∑—É."""
    current_gas_price: int
    pending_transactions: int
    block_utilization: float  # 0.0 - 1.0
    average_confirmation_time: float  # —Å–µ–∫—É–Ω–¥—ã
    congestion_level: float  # 0.0 - 1.0
    timestamp: float = field(default_factory=time.time)


class AdaptiveGasManager(GasManager):
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥–∞–∑–∞ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–µ—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –≥–∞–∑–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    
    def __init__(self, web3_manager):
        super().__init__(web3_manager, GasMode.ADAPTIVE)
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
        self.network_history = deque(maxlen=100)
        self.transaction_history = deque(maxlen=50)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        self.adaptation_config = {
            'learning_rate': 0.1,
            'min_confidence': 0.7,
            'price_volatility_threshold': 0.2,
            'congestion_threshold': 0.8,
            'emergency_multiplier': 2.0
        }
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        self.current_strategy = 'balanced'  # conservative, balanced, aggressive
        self.strategy_confidence = 1.0
        
        logger.info("üß† AdaptiveGasManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_adaptive_gas_estimate(self, transaction_type: str = 'erc20_transfer',
                                      priority: str = 'standard',
                                      target_confirmation_time: float = 30.0) -> GasEstimate:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É –≥–∞–∑–∞ —Å —É—á–µ—Ç–æ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
        
        Args:
            transaction_type: –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (safe, standard, fast, urgent)
            target_confirmation_time: –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Å–µ–∫)
            
        Returns:
            GasEstimate: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
        """
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
            network_conditions = await self._analyze_network_conditions()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            self.network_history.append(network_conditions)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
            predicted_price = await self._predict_optimal_gas_price(
                network_conditions, target_confirmation_time
            )
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            await self._adapt_strategy(network_conditions)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
            gas_limit = self._get_adaptive_gas_limit(transaction_type, network_conditions)
            
            estimate = GasEstimate(
                gas_limit=gas_limit,
                gas_price=predicted_price,
                estimated_cost_wei=gas_limit * predicted_price,
                estimated_cost_bnb=Decimal(gas_limit * predicted_price) / Decimal(10**18)
            )
            
            logger.debug(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞: {estimate}")
            return estimate
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É
            return await self._get_fallback_estimate(transaction_type)
    
    async def _analyze_network_conditions(self) -> NetworkConditions:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏."""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ç–∏
            current_gas_price = await asyncio.to_thread(self.w3.eth.gas_price)
            latest_block = await asyncio.to_thread(self.w3.eth.get_block, 'latest')
            pending_block = await asyncio.to_thread(self.w3.eth.get_block, 'pending')
            
            # –†–∞—Å—á–µ—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∞
            block_utilization = latest_block.gasUsed / latest_block.gasLimit
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            pending_transactions = len(pending_block.transactions)
            
            # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
            avg_confirmation_time = self._estimate_confirmation_time()
            
            # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∑–∞–≥—Ä—É–∑–∫–∏
            congestion_level = self._calculate_congestion_level(
                block_utilization, pending_transactions, current_gas_price
            )
            
            conditions = NetworkConditions(
                current_gas_price=current_gas_price,
                pending_transactions=pending_transactions,
                block_utilization=block_utilization,
                average_confirmation_time=avg_confirmation_time,
                congestion_level=congestion_level
            )
            
            logger.debug(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏: –∑–∞–≥—Ä—É–∑–∫–∞={congestion_level:.2f}, –≥–∞–∑={current_gas_price/10**9:.1f} Gwei")
            
            return conditions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return NetworkConditions(
                current_gas_price=5_000_000_000,  # 5 Gwei
                pending_transactions=100,
                block_utilization=0.5,
                average_confirmation_time=30.0,
                congestion_level=0.5
            )
    
    async def _predict_optimal_gas_price(self, conditions: NetworkConditions,
                                       target_time: float) -> int:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≥–∞–∑–∞ —Å –ø–æ–º–æ—â—å—é ML."""
        try:
            # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π
            base_price = conditions.current_gas_price
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏
            congestion_multiplier = 1.0 + (conditions.congestion_level * 0.5)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            time_multiplier = max(0.5, min(2.0, 60.0 / target_time))
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_multiplier = self._get_strategy_multiplier()
            
            # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            historical_multiplier = self._analyze_historical_patterns(conditions)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
            predicted_price = int(
                base_price * 
                congestion_multiplier * 
                time_multiplier * 
                strategy_multiplier *
                historical_multiplier
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
            max_price = self.default_config['max_gas_price']
            predicted_price = min(predicted_price, max_price)
            
            logger.debug(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: {predicted_price/10**9:.2f} Gwei")
            
            return predicted_price
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞: {e}")
            return conditions.current_gas_price
    
    def _analyze_historical_patterns(self, current_conditions: NetworkConditions) -> float:
        """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω—ã."""
        if len(self.network_history) < 10:
            return 1.0
        
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ —Ü–µ–Ω –≥–∞–∑–∞
            recent_prices = [h.current_gas_price for h in list(self.network_history)[-10:]]
            price_trend = (recent_prices[-1] - recent_prices[0]) / recent_prices[0]
            
            # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
            recent_congestion = [h.congestion_level for h in list(self.network_history)[-10:]]
            congestion_trend = statistics.mean(recent_congestion)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
            trend_multiplier = 1.0
            
            if price_trend > 0.1:  # –†–æ—Å—Ç —Ü–µ–Ω
                trend_multiplier *= 1.1
            elif price_trend < -0.1:  # –ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω
                trend_multiplier *= 0.9
            
            if congestion_trend > 0.7:  # –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                trend_multiplier *= 1.05
            
            return min(max(trend_multiplier, 0.8), 1.3)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return 1.0
    
    async def _adapt_strategy(self, conditions: NetworkConditions):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π —Å–µ—Ç–∏."""
        try:
            # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if len(self.transaction_history) >= 10:
                success_rate = self._calculate_strategy_success_rate()
                
                if success_rate < self.adaptation_config['min_confidence']:
                    # –°–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    await self._change_strategy(conditions)
            
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            if conditions.congestion_level > self.adaptation_config['congestion_threshold']:
                if self.current_strategy != 'aggressive':
                    self.current_strategy = 'aggressive'
                    logger.info("‚ö° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑-–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
    
    def _get_strategy_multiplier(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        multipliers = {
            'conservative': 0.8,
            'balanced': 1.0,
            'aggressive': 1.3
        }
        return multipliers.get(self.current_strategy, 1.0)


class StandardGasManager(GasManager):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥–∞–∑–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ü–µ–Ω—ã –≥–∞–∑–∞
    - –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    - –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    """
    
    def __init__(self, web3_manager):
        super().__init__(web3_manager, GasMode.STANDARD)
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è BSC
        self.standard_config = {
            'safe_gas_price': 3_000_000_000,      # 3 Gwei
            'standard_gas_price': 5_000_000_000,  # 5 Gwei
            'fast_gas_price': 8_000_000_000,      # 8 Gwei
            'urgent_gas_price': 12_000_000_000,   # 12 Gwei
            'gas_limit_buffer': 0.1,              # 10% –±—É—Ñ–µ—Ä –¥–ª—è gas limit
        }
        
        logger.info("‚öôÔ∏è StandardGasManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_standard_gas_estimate(self, transaction_type: str = 'erc20_transfer',
                                      priority: str = 'standard') -> GasEstimate:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –≥–∞–∑–∞.
        
        Args:
            transaction_type: –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (safe, standard, fast, urgent)
            
        Returns:
            GasEstimate: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≥–∞–∑–∞
            base_gas_limit = self.gas_limits.get(transaction_type, 65000)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
            gas_limit = int(base_gas_limit * (1 + self.standard_config['gas_limit_buffer']))
            
            # –í—ã–±–æ—Ä —Ü–µ–Ω—ã –≥–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            gas_price = self._get_price_by_priority(priority)
            
            estimate = GasEstimate(
                gas_limit=gas_limit,
                gas_price=gas_price,
                estimated_cost_wei=gas_limit * gas_price,
                estimated_cost_bnb=Decimal(gas_limit * gas_price) / Decimal(10**18)
            )
            
            logger.debug(f"‚öôÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞: {estimate}")
            return estimate
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞: {e}")
            raise
    
    def _get_price_by_priority(self, priority: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≥–∞–∑–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É."""
        price_map = {
            'safe': self.standard_config['safe_gas_price'],
            'standard': self.standard_config['standard_gas_price'],
            'fast': self.standard_config['fast_gas_price'],
            'urgent': self.standard_config['urgent_gas_price']
        }
        return price_map.get(priority, self.standard_config['standard_gas_price'])


class BatchingGasManager(GasManager):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –≥–∞–∑–∞, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –±–∞—Ç—á-–æ–ø–µ—Ä–∞—Ü–∏–π.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    - –≠–∫–æ–Ω–æ–º–∏—è –≥–∞–∑–∞ —á–µ—Ä–µ–∑ –±–∞—Ç—á–∏–Ω–≥
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, web3_manager):
        super().__init__(web3_manager, GasMode.BATCHING)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
        self.batching_config = {
            'optimal_batch_size': 25,
            'max_batch_size': 50,
            'batch_gas_overhead': 30000,  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥–∞–∑ –Ω–∞ –±–∞—Ç—á
            'individual_transfer_gas': 21000,
            'batch_discount_factor': 0.7,  # 30% —ç–∫–æ–Ω–æ–º–∏—è –ø—Ä–∏ –±–∞—Ç—á–∏–Ω–≥–µ
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á–∏–Ω–≥–∞
        self.batch_stats = {
            'total_batches': 0,
            'total_individual_savings': 0,
            'average_batch_size': 0
        }
        
        logger.info("üì¶ BatchingGasManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_batch_gas_estimate(self, recipient_count: int,
                                   transaction_type: str = 'erc20_transfer') -> GasEstimate:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á-–æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            recipient_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –±–∞—Ç—á–µ
            transaction_type: –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            
        Returns:
            GasEstimate: –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á–∞
        """
        try:
            if recipient_count <= 1:
                # –î–ª—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                return await self._get_single_transaction_estimate(transaction_type)
            
            # –†–∞—Å—á–µ—Ç –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á–∞
            base_gas_per_transfer = self.gas_limits.get(transaction_type, 65000)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –±–∞—Ç—á–∞
            batch_gas_limit = (
                self.batching_config['batch_gas_overhead'] +
                (base_gas_per_transfer * recipient_count * self.batching_config['batch_discount_factor'])
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –±–ª–æ–∫–∞
            max_block_gas = 30_000_000  # –õ–∏–º–∏—Ç –±–ª–æ–∫–∞ BSC
            batch_gas_limit = min(int(batch_gas_limit), max_block_gas // 2)
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á–µ–π
            gas_price = await self._get_batch_optimized_gas_price()
            
            # –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
            individual_cost = recipient_count * base_gas_per_transfer * gas_price
            batch_cost = batch_gas_limit * gas_price
            savings = individual_cost - batch_cost
            
            estimate = GasEstimate(
                gas_limit=batch_gas_limit,
                gas_price=gas_price,
                estimated_cost_wei=batch_cost,
                estimated_cost_bnb=Decimal(batch_cost) / Decimal(10**18)
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∏
            savings_percent = (savings / individual_cost) * 100 if individual_cost > 0 else 0
            logger.info(f"üí∞ –ë–∞—Ç—á-–æ—Ü–µ–Ω–∫–∞: {recipient_count} –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —ç–∫–æ–Ω–æ–º–∏—è {savings_percent:.1f}%")
            
            return estimate
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á–∞: {e}")
            raise
    
    async def _get_batch_optimized_gas_price(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á–µ–π."""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –≥–∞–∑–∞
            current_price = await asyncio.to_thread(self.w3.eth.gas_price)
            
            # –î–ª—è –±–∞—Ç—á–µ–π –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∏–∑–∫—É—é —Ü–µ–Ω—É
            # —Ç–∞–∫ –∫–∞–∫ —ç–∫–æ–Ω–æ–º–∏–º –Ω–∞ –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            batch_multiplier = 0.9  # 10% —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ü–µ–Ω—É –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á–µ–π
            
            optimized_price = int(current_price * batch_multiplier)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            min_price = self.default_config['safe_gas_price']
            optimized_price = max(optimized_price, min_price)
            
            return optimized_price
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á–∞: {e}")
            return self.default_config['standard_gas_price']
    
    def calculate_batch_efficiency(self, recipient_count: int) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∞—Ç—á–∏–Ω–≥–∞.
        
        Args:
            recipient_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            
        Returns:
            Dict: –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        try:
            # –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            individual_gas = recipient_count * self.batching_config['individual_transfer_gas']
            
            # –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∞—Ç—á–∞
            batch_gas = (
                self.batching_config['batch_gas_overhead'] +
                (self.batching_config['individual_transfer_gas'] * recipient_count * 
                 self.batching_config['batch_discount_factor'])
            )
            
            # –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
            gas_savings = individual_gas - batch_gas
            savings_percent = (gas_savings / individual_gas) * 100 if individual_gas > 0 else 0
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
            optimal_size = self.batching_config['optimal_batch_size']
            size_efficiency = min(recipient_count / optimal_size, 1.0)
            
            return {
                'recipient_count': recipient_count,
                'individual_gas_cost': individual_gas,
                'batch_gas_cost': int(batch_gas),
                'gas_savings': gas_savings,
                'savings_percent': savings_percent,
                'size_efficiency': size_efficiency,
                'is_recommended': recipient_count >= 5 and savings_percent > 20
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∞—Ç—á–∏–Ω–≥–∞: {e}")
            return {'error': str(e)}
    
    def update_batch_stats(self, batch_size: int, gas_used: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞—Ç—á–∏–Ω–≥–∞."""
        try:
            self.batch_stats['total_batches'] += 1
            
            # –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
            individual_cost = batch_size * self.batching_config['individual_transfer_gas']
            savings = individual_cost - gas_used
            self.batch_stats['total_individual_savings'] += savings
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
            total_transfers = self.batch_stats['average_batch_size'] * (self.batch_stats['total_batches'] - 1) + batch_size
            self.batch_stats['average_batch_size'] = total_transfers / self.batch_stats['total_batches']
            
            logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {self.batch_stats}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞—Ç—á–∏–Ω–≥–∞: {e}")


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–∞–∑–∞
class GasManagerFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–∞–∑–∞."""
    
    @staticmethod
    def create_gas_manager(web3_manager, mode: str = 'adaptive', **kwargs):
        """
        –°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –≥–∞–∑–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∂–∏–º–æ–º.
        
        Args:
            web3_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä Web3
            mode: –†–µ–∂–∏–º ('adaptive', 'standard', 'batching')
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥–∞–∑–∞
        """
        managers = {
            'adaptive': AdaptiveGasManager,
            'standard': StandardGasManager,
            'batching': BatchingGasManager
        }
        
        manager_class = managers.get(mode.lower(), StandardGasManager)
        return manager_class(web3_manager, **kwargs)


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = [
    'AdaptiveGasManager', 
    'StandardGasManager', 
    'BatchingGasManager',
    'GasManagerFactory',
    'NetworkConditions'
]


if __name__ == "__main__":
    print("‚õΩ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Advanced Gas Management...")
    print("üß† AdaptiveGasManager - –ò–ò –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    print("‚öôÔ∏è StandardGasManager - –Ω–∞–¥–µ–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("üì¶ BatchingGasManager - —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –±–∞—Ç—á–∞—Ö")
