"""
–ú–æ–¥—É–ª—å: –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è PLEX Dynamic Staking Manager
–û–ø–∏—Å–∞–Ω–∏–µ: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: logging, pathlib
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import logging
import logging.handlers
import sys
from pathlib import Path
from datetime import datetime
from typing import Optional

from config.settings import settings


class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[35m'  # Magenta
    }
    RESET = '\033[0m'
    
    def format(self, record):
        log_color = self.COLORS.get(record.levelname, self.RESET)
        record.levelname = f"{log_color}{record.levelname}{self.RESET}"
        return super().format(record)


class PLEXLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è PLEX Dynamic Staking Manager"""
    
    def __init__(self, name: str = "PLEX_Staking", log_file: Optional[str] = None):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(getattr(logging, settings.log_level))
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        if self.logger.handlers:
            return
            
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_file = log_file or settings.log_file
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
        file_formatter = logging.Formatter(
            fmt='%(asctime)s | %(levelname)-8s | %(name)s | %(funcName)s:%(lineno)d | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        console_formatter = ColoredFormatter(
            fmt='%(asctime)s | %(levelname)-8s | %(name)s | %(message)s',
            datefmt='%H:%M:%S'
        )
        
        # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        file_handler = logging.handlers.RotatingFileHandler(
            filename=log_path,
            maxBytes=10 * 1024 * 1024,  # 10 MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setFormatter(file_formatter)
        file_handler.setLevel(logging.DEBUG)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(console_formatter)
        console_handler.setLevel(getattr(logging, settings.log_level))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
        self.logger.info(f"üöÄ PLEX Dynamic Staking Manager Logger initialized")
        self.logger.info(f"üìÅ Log file: {log_path.absolute()}")
        self.logger.info(f"üìä Log level: {settings.log_level}")
    
    def get_logger(self) -> logging.Logger:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä"""
        return self.logger
    
    def log_blockchain_operation(self, operation: str, details: dict):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.logger.info(f"üîó {operation}: {details}")
    
    def log_api_usage(self, endpoint: str, credits_used: int, response_time: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
        self.logger.debug(f"üì° API: {endpoint} | Credits: {credits_used} | Time: {response_time:.3f}s")
    
    def log_gas_transaction(self, tx_hash: str, gas_used: int, gas_price: int, status: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–∑–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        self.logger.info(f"‚õΩ TX: {tx_hash} | Gas: {gas_used} | Price: {gas_price} Gwei | Status: {status}")
    
    def log_reward_payment(self, recipient: str, amount: float, tx_hash: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç –Ω–∞–≥—Ä–∞–¥"""
        self.logger.info(f"üí∞ REWARD: {recipient} | Amount: {amount} PLEX | TX: {tx_hash}")
    
    def log_category_change(self, address: str, old_category: str, new_category: str, reason: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        self.logger.warning(f"üìä CATEGORY: {address} | {old_category} ‚Üí {new_category} | Reason: {reason}")
    
    def log_amnesty_decision(self, address: str, granted: bool, reason: str, admin: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ –∞–º–Ω–∏—Å—Ç–∏–∏"""
        status = "GRANTED" if granted else "DENIED"
        self.logger.warning(f"üõ°Ô∏è AMNESTY {status}: {address} | Reason: {reason} | Admin: {admin}")
    
    def log_error_with_context(self, error: Exception, context: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        self.logger.error(f"‚ùå ERROR: {type(error).__name__}: {error}")
        self.logger.error(f"üìç Context: {context}")
    
    def log_performance_metric(self, operation: str, duration: float, items_processed: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        rate = items_processed / duration if duration > 0 else 0
        self.logger.info(f"‚ö° PERF: {operation} | Duration: {duration:.2f}s | Items: {items_processed} | Rate: {rate:.1f}/s")
    
    def log_system_startup(self, version: str, config_summary: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("="*80)
        self.logger.info(f"üöÄ PLEX Dynamic Staking Manager v{version} STARTING")
        self.logger.info("="*80)
        for key, value in config_summary.items():
            self.logger.info(f"üîß {key}: {value}")
        self.logger.info("="*80)
    
    def log_checkpoint(self, checkpoint_name: str, status: str, details: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ checkpoint'–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        emoji = "‚úÖ" if status == "SUCCESS" else "‚ùå" if status == "FAILED" else "‚è≥"
        self.logger.info(f"{emoji} CHECKPOINT: {checkpoint_name} | Status: {status}")
        for key, value in details.items():
            self.logger.info(f"    üìå {key}: {value}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
main_logger = PLEXLogger("PLEX_Main")


def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    module_logger = PLEXLogger(f"PLEX_{name}")
    return module_logger.get_logger()


def log_function_call(func_name: str, args: dict = None, result: any = None, 
                     execution_time: float = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
    logger = get_logger("FunctionCalls")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
    if args:
        logger.debug(f"üîÑ CALL: {func_name}({args})")
    else:
        logger.debug(f"üîÑ CALL: {func_name}()")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if result is not None:
        if execution_time:
            logger.debug(f"‚úÖ RESULT: {func_name} | Time: {execution_time:.3f}s | Result: {type(result).__name__}")
        else:
            logger.debug(f"‚úÖ RESULT: {func_name} | Result: {type(result).__name__}")


def setup_logging_for_external_libs():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å WARNING –¥–ª—è —à—É–º–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    noisy_loggers = ['urllib3', 'requests', 'web3', 'sqlalchemy.engine']
    
    for logger_name in noisy_loggers:
        logging.getLogger(logger_name).setLevel(logging.WARNING)


def create_session_log_file() -> str:
    """–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    session_log = f"logs/session_{timestamp}.log"
    return session_log


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_logging_for_external_libs()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = get_logger("Test")
    
    logger.debug("–≠—Ç–æ debug —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.info("–≠—Ç–æ info —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.warning("–≠—Ç–æ warning —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.error("–≠—Ç–æ error —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.critical("–≠—Ç–æ critical —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    main_logger.log_blockchain_operation("GetLogs", {"blocks": "1000-2000", "logs": 150})
    main_logger.log_api_usage("/eth_getLogs", 75, 0.245)
    main_logger.log_gas_transaction("0xabc123", 21000, 7, "SUCCESS")
    main_logger.log_reward_payment("0x123456", 100.5, "0xdef456")
    main_logger.log_category_change("0x789abc", "perfect", "transferred", "Manual transfer detected")
    main_logger.log_amnesty_decision("0xghi789", True, "First-time missed purchase", "admin")
    
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª logs/")
