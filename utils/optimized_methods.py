"""
PLEX Dynamic Staking Manager - Optimized Blockchain Methods
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –∫—Ä–µ–¥–∏—Ç–æ–≤.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import time
from decimal import Decimal
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from web3 import Web3

from utils.logger import get_logger
from utils.retry import with_retry
from config.constants import TOKEN_DECIMALS, MULTICALL3_BSC, SECONDS_PER_BLOCK

logger = get_logger(__name__)


class BlockNumberCache:
    """
    –ö—ç—à –Ω–æ–º–µ—Ä–∞ –±–ª–æ–∫–∞ —Å TTL –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ 90% –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞.
    """
    
    def __init__(self, ttl_seconds: int = 60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –±–ª–æ–∫–æ–≤.
        
        Args:
            ttl_seconds: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self._cache: Optional[int] = None
        self._timestamp: float = 0
        self.ttl = ttl_seconds
        self.hit_count = 0
        self.miss_count = 0
        
        logger.info(f"üîÑ BlockNumberCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å TTL {ttl_seconds}s")
    
    def get_block_number(self, w3: Web3) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Args:
            w3: Web3 –∏–Ω—Å—Ç–∞–Ω—Å
            
        Returns:
            int: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
        """
        now = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if self._cache and (now - self._timestamp) < self.ttl:
            self.hit_count += 1
            return self._cache
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        self._cache = w3.eth.block_number
        self._timestamp = now
        self.miss_count += 1
        
        return self._cache
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞."""
        total = self.hit_count + self.miss_count
        hit_rate = (self.hit_count / total * 100) if total > 0 else 0
        
        return {
            'hits': self.hit_count,
            'misses': self.miss_count,
            'hit_rate_percent': round(hit_rate, 1),
            'total_requests': total
        }


class OptimizedBlockchainMethods:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º.
    –≠–∫–æ–Ω–æ–º–∏—è –¥–æ 99% API –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –Ω–∞–∏–≤–Ω—ã–º–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏.
    """
    
    def __init__(self, web3_manager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.
        
        Args:
            web3_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        """
        self.web3_manager = web3_manager
        self.w3 = web3_manager.w3_http
        self.block_cache = BlockNumberCache(ttl=60)
        
        logger.info("üß† OptimizedBlockchainMethods –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def find_stop_block_optimized(self, target_timestamp: int) -> int:
        """
        –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–æ–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º.
        –≠–∫–æ–Ω–æ–º–∏—è 70% –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º.
        
        Args:
            target_timestamp: –¶–µ–ª–µ–≤–æ–π timestamp
            
        Returns:
            int: –ù–æ–º–µ—Ä –±–ª–æ–∫–∞ –±–ª–∏–∂–∞–π—à–∏–π –∫ timestamp
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ –¥–ª—è timestamp {target_timestamp}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ (1 –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏–∑ –∫—ç—à–∞)
        current_block = self.block_cache.get_block_number(self.w3)
        current_block_data = self.w3.eth.get_block(current_block)
        current_timestamp = current_block_data['timestamp']
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±–ª–æ–∫
        time_diff = current_timestamp - target_timestamp
        blocks_diff = int(time_diff / SECONDS_PER_BLOCK)
        estimated_block = max(1, current_block - blocks_diff)
        
        logger.info(f"üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –±–ª–æ–∫: {estimated_block}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (1 –∑–∞–ø—Ä–æ—Å)
        check_block = self.w3.eth.get_block(estimated_block)
        
        # –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –±–ª–∏–∑–∫–æ (¬±5 –º–∏–Ω—É—Ç), –¥–µ–ª–∞–µ–º –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫
        if abs(check_block['timestamp'] - target_timestamp) < 300:
            return self._linear_search(estimated_block, target_timestamp)
        else:
            # –ò–Ω–∞—á–µ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
            return self._binary_search_optimized(estimated_block, target_timestamp)
    
    def _linear_search(self, start_block: int, target_timestamp: int, 
                      max_iterations: int = 100) -> int:
        """–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è."""
        current_block = start_block
        
        for _ in range(max_iterations):
            block_data = self.w3.eth.get_block(current_block)
            
            if block_data['timestamp'] <= target_timestamp:
                return current_block
            
            current_block -= 1
            if current_block <= 0:
                return 1
        
        return current_block
    
    def _binary_search_optimized(self, estimated_block: int, target_timestamp: int) -> int:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫."""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞
        current_block = self.block_cache.get_block_number(self.w3)
        
        left = max(1, estimated_block - 1000)
        right = min(current_block, estimated_block + 1000)
        
        while left <= right:
            mid = (left + right) // 2
            mid_block = self.w3.eth.get_block(mid)
            
            if mid_block['timestamp'] <= target_timestamp:
                if mid == right or self.w3.eth.get_block(mid + 1)['timestamp'] > target_timestamp:
                    return mid
                left = mid + 1
            else:
                right = mid - 1
        
        return right
    
    def get_balances_multicall(self, token_address: str, addresses: List[str], 
                              block: int) -> Dict[str, Decimal]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ 50 –±–∞–ª–∞–Ω—Å–æ–≤ –û–î–ù–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º –≤–º–µ—Å—Ç–æ 50.
        –≠–∫–æ–Ω–æ–º–∏—è 98% API –∫—Ä–µ–¥–∏—Ç–æ–≤!
        
        Args:
            token_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
            block: –ù–æ–º–µ—Ä –±–ª–æ–∫–∞
            
        Returns:
            Dict: {–∞–¥—Ä–µ—Å: –±–∞–ª–∞–Ω—Å}
        """
        logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ {len(addresses)} –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ Multicall")
        
        if not addresses:
            return {}
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã–∑–æ–≤–æ–≤ balanceOf
        balance_of_sig = Web3.keccak(text="balanceOf(address)")[:4]
        calls = []
        
        for addr in addresses:
            addr_padded = Web3.to_bytes(hexstr=addr).rjust(32, b'\x00')
            call_data = balance_of_sig + addr_padded
            calls.append({
                'target': Web3.to_checksum_address(token_address),
                'callData': Web3.to_hex(call_data)
            })
        
        # –ë–∞—Ç—á–∏ –ø–æ 50 –∞–¥—Ä–µ—Å–æ–≤
        results = {}
        batch_size = 50
        
        for i in range(0, len(calls), batch_size):
            batch_calls = calls[i:i+batch_size]
            batch_addresses = addresses[i:i+batch_size]
            
            try:
                # –û–î–ò–ù –≤—ã–∑–æ–≤ multicall –≤–º–µ—Å—Ç–æ 50!
                multicall_result = self._execute_multicall(batch_calls, block)
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for addr, result_hex in zip(batch_addresses, multicall_result):
                    try:
                        balance_wei = int(result_hex, 16) if result_hex != '0x' else 0
                        balance = Decimal(balance_wei) / Decimal(10 ** TOKEN_DECIMALS)
                        results[addr] = balance
                    except (ValueError, TypeError):
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {addr}")
                        results[addr] = Decimal('0')
                        
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á {i//batch_size + 1}: {len(batch_addresses)} –∞–¥—Ä–µ—Å–æ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ multicall –±–∞—Ç—á–∞ {i//batch_size + 1}: {e}")
                # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
                for addr in batch_addresses:
                    try:
                        balance = self._get_balance_individual(token_address, addr, block)
                        results[addr] = balance
                    except:
                        results[addr] = Decimal('0')
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} –±–∞–ª–∞–Ω—Å–æ–≤")
        return results
    
    def _execute_multicall(self, calls: List[Dict], block: int) -> List[str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å multicall –∑–∞–ø—Ä–æ—Å."""
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ multicall –¥–∞–Ω–Ω—ã—Ö
        multicall_data = self._encode_multicall_data(calls)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ multicall
        result = self.w3.eth.call({
            'to': Web3.to_checksum_address(MULTICALL3_BSC),
            'data': multicall_data
        }, block_identifier=block)
        
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return self._decode_multicall_result(result)
    
    def _encode_multicall_data(self, calls: List[Dict]) -> str:
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è multicall."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π ABI encoder
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        
        # –§—É–Ω–∫—Ü–∏—è aggregate(Call[] calls)
        function_sig = Web3.keccak(text="aggregate((address,bytes)[])")[:4]
        
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ calls
        calls_encoded = b''
        for call in calls:
            target = Web3.to_bytes(hexstr=call['target']).rjust(32, b'\x00')
            call_data = Web3.to_bytes(hexstr=call['callData'])
            call_data_length = len(call_data).to_bytes(32, 'big')
            calls_encoded += target + call_data_length + call_data
        
        return Web3.to_hex(function_sig + calls_encoded)
    
    def _decode_multicall_result(self, result: str) -> List[str]:
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ multicall."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π ABI decoder
        
        results = []
        result_bytes = Web3.to_bytes(hexstr=result)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        offset = 64  # –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        
        while offset < len(result_bytes):
            try:
                # –ß–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö
                length = int.from_bytes(result_bytes[offset:offset+32], 'big')
                offset += 32
                
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = result_bytes[offset:offset+length]
                results.append(Web3.to_hex(data))
                offset += length
                
            except:
                break
        
        return results
    
    def _get_balance_individual(self, token_address: str, address: str, block: int) -> Decimal:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º (—Ñ–æ–ª–ª–±—ç–∫)."""
        balance_of_sig = Web3.keccak(text="balanceOf(address)")[:4]
        addr_padded = Web3.to_bytes(hexstr=address).rjust(32, b'\x00')
        call_data = balance_of_sig + addr_padded
        
        result = self.w3.eth.call({
            'to': Web3.to_checksum_address(token_address),
            'data': Web3.to_hex(call_data)
        }, block_identifier=block)
        
        balance_wei = int(result.hex(), 16)
        return Decimal(balance_wei) / Decimal(10 ** TOKEN_DECIMALS)
    
    def get_address_transfers_optimized(self, address: str, token_address: str, 
                                      corp_wallet: str, stop_block: int) -> Decimal:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¢–û–õ–¨–ö–û —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ - 1 –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ 500!
        –≠–∫–æ–Ω–æ–º–∏—è 99.8% API –∫—Ä–µ–¥–∏—Ç–æ–≤.
        
        Args:
            address: –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            token_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            corp_wallet: –ê–¥—Ä–µ—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
            stop_block: –ö–æ–Ω–µ—á–Ω—ã–π –±–ª–æ–∫
            
        Returns:
            Decimal: –û–±—â–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        """
        logger.info(f"üîÑ –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {address[:10]}... ‚Üí {corp_wallet[:10]}...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä —Å –¢–†–ï–ú–Ø —Ç–æ–ø–∏–∫–∞–º–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        transfer_sig = Web3.keccak(text="Transfer(address,address,uint256)")
        topic_from = Web3.to_bytes(hexstr=address).rjust(32, b'\x00')
        topic_to = Web3.to_bytes(hexstr=corp_wallet).rjust(32, b'\x00')
        
        # –ó–∞–ø—Ä–æ—Å –¢–û–õ–¨–ö–û –Ω—É–∂–Ω—ã—Ö –ª–æ–≥–æ–≤
        filter_params = {
            'fromBlock': hex(1),
            'toBlock': hex(stop_block),
            'address': Web3.to_checksum_address(token_address),
            'topics': [
                Web3.to_hex(transfer_sig),   # Event signature
                Web3.to_hex(topic_from),      # From address (–∏—Å–∫–æ–º—ã–π)
                Web3.to_hex(topic_to)         # To address (–∫–æ—Ä–ø. –∫–æ—à–µ–ª—ë–∫)
            ]
        }
        
        try:
            # –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ —Å–æ—Ç–µ–Ω! –≠–∫–æ–Ω–æ–º–∏—è 99%!
            logs = self.w3.eth.get_logs(filter_params)
            
            # –°—É–º–º–∏—Ä—É–µ–º
            total = Decimal(0)
            for log in logs:
                value_wei = int(log['data'], 16)
                value = Decimal(value_wei) / Decimal(10 ** TOKEN_DECIMALS)
                total += value
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(logs)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —Å—É–º–º–∞: {total} PLEX")
            return total
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {e}")
            return Decimal(0)
    
    def get_transfers_batch_optimized(self, addresses: List[str], token_address: str,
                                    stop_block: int) -> Dict[str, List[Dict]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –û–î–ù–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º.
        
        Args:
            addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
            token_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            stop_block: –ö–æ–Ω–µ—á–Ω—ã–π –±–ª–æ–∫
            
        Returns:
            Dict: {–∞–¥—Ä–µ—Å: [—Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤]}
        """
        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤...")
        
        # –ó–∞–ø—Ä–æ—Å –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ from –∞–¥—Ä–µ—Å—É - –ø–æ–ª—É—á–∞–µ–º –í–°–ï –ø–µ—Ä–µ–≤–æ–¥—ã
        transfer_sig = Web3.keccak(text="Transfer(address,address,uint256)")
        
        filter_params = {
            'fromBlock': hex(1),
            'toBlock': hex(stop_block),
            'address': Web3.to_checksum_address(token_address),
            'topics': [
                Web3.to_hex(transfer_sig),
                None,  # Any from address
                None   # Any to address
            ]
        }
        
        try:
            # –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –í–°–ï–• –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ç–æ–∫–µ–Ω–∞
            all_transfers = self.w3.eth.get_logs(filter_params)
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(all_transfers)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            address_set = set(addresses)
            result = {addr: [] for addr in addresses}
            
            for log in all_transfers:
                try:
                    from_addr = Web3.to_checksum_address("0x" + log['topics'][1].hex()[-40:])
                    to_addr = Web3.to_checksum_address("0x" + log['topics'][2].hex()[-40:])
                    
                    if from_addr in address_set:
                        value_wei = int(log['data'], 16)
                        value = Decimal(value_wei) / Decimal(10 ** TOKEN_DECIMALS)
                        
                        result[from_addr].append({
                            'to': to_addr,
                            'value': value,
                            'tx_hash': log['transactionHash'].hex(),
                            'block': log['blockNumber']
                        })
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–∞: {e}")
                    continue
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {e}")
            return {addr: [] for addr in addresses}


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['BlockNumberCache', 'OptimizedBlockchainMethods']


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫—ç—à–∞
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BlockNumberCache...")
    
    cache = BlockNumberCache(ttl=5)
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {cache.get_stats()}")
