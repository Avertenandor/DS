"""
–ú–æ–¥—É–ª—å: SafeWidgetFactory –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è CustomTkinter –≤–∏–¥–∂–µ—Ç–æ–≤
–û–ø–∏—Å–∞–Ω–∏–µ: –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç runtime –æ—à–∏–±–∫–∏
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: customtkinter, logging
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import logging
from typing import Dict, Any, Set, Optional, Callable
import customtkinter as ctk
from config.constants import UI_COLORS

logger = logging.getLogger(__name__)


class SafeWidgetFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è CustomTkinter –≤–∏–¥–∂–µ—Ç–æ–≤.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è CustomTkinter v5.2.1
    –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç runtime –æ—à–∏–±–∫–∏ —Ç–∏–ø–∞ "unexpected keyword argument".
    """
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤–∏–¥–∂–µ—Ç–∞ CustomTkinter v5.2.1
    SAFE_PARAMS: Dict[str, Set[str]] = {
        'CTkEntry': {
            'height', 'width', 'corner_radius', 'fg_color', 'border_color', 
            'text_color', 'font', 'state', 'textvariable', 'justify', 'show'
        },
        'CTkButton': {
            'height', 'width', 'corner_radius', 'fg_color', 'hover_color', 
            'text_color', 'font', 'command', 'state', 'text', 'image',
            'compound', 'anchor'
        },
        'CTkTextbox': {
            'height', 'width', 'corner_radius', 'fg_color', 'text_color',
            'font', 'state', 'wrap', 'spacing1', 'spacing2', 'spacing3'
        },
        'CTkLabel': {
            'height', 'width', 'corner_radius', 'fg_color', 'text_color',
            'font', 'text', 'image', 'compound', 'anchor', 'justify'
        },
        'CTkFrame': {
            'height', 'width', 'corner_radius', 'fg_color', 'border_color',
            'border_width'
        },
        'CTkCheckBox': {
            'height', 'width', 'corner_radius', 'fg_color', 'hover_color',
            'text_color', 'font', 'text', 'variable', 'command', 'state'
        },
        'CTkRadioButton': {
            'height', 'width', 'corner_radius', 'fg_color', 'hover_color',
            'text_color', 'font', 'text', 'variable', 'value', 'command', 'state'
        },
        'CTkProgressBar': {
            'height', 'width', 'corner_radius', 'fg_color', 'progress_color',
            'orientation', 'mode', 'determinate_speed', 'indeterminate_speed'
        },
        'CTkSlider': {
            'height', 'width', 'corner_radius', 'fg_color', 'progress_color',
            'button_color', 'button_hover_color', 'from_', 'to', 'number_of_steps',
            'orientation', 'state', 'variable', 'command'
        },
        'CTkOptionMenu': {
            'height', 'width', 'corner_radius', 'fg_color', 'button_color',
            'button_hover_color', 'text_color', 'font', 'values', 'variable',
            'command', 'state', 'anchor'
        },
        'CTkComboBox': {
            'height', 'width', 'corner_radius', 'fg_color', 'border_color',
            'button_color', 'button_hover_color', 'text_color', 'font',
            'values', 'variable', 'command', 'state', 'justify'
        },
        'CTkScrollableFrame': {
            'height', 'width', 'corner_radius', 'fg_color', 'border_color',
            'border_width', 'scrollbar_fg_color', 'scrollbar_button_color',
            'scrollbar_button_hover_color', 'orientation'
        },
        'CTkTabview': {
            'height', 'width', 'corner_radius', 'fg_color', 'border_color',
            'border_width', 'segmented_button_fg_color', 'segmented_button_selected_color',
            'segmented_button_selected_hover_color', 'segmented_button_unselected_color',
            'segmented_button_unselected_hover_color', 'text_color', 'text_color_disabled'
        },
        'CTkToplevel': {
            'fg_color'
        }
    }
    
    def __init__(self, theme=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SafeWidgetFactory —Å —Ç–µ–º–æ–π.
        
        Args:
            theme: –û–±—ä–µ–∫—Ç —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
        """
        self.theme = theme
        logger.debug("üè≠ SafeWidgetFactory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ç–µ–º–æ–π")
    
    def create_entry(self, parent, **kwargs) -> ctk.CTkEntry:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π CTkEntry –≤–∏–¥–∂–µ—Ç."""
        return self.create_widget(ctk.CTkEntry, parent, **kwargs)
    
    def create_button(self, parent, **kwargs) -> ctk.CTkButton:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π CTkButton –≤–∏–¥–∂–µ—Ç."""
        return self.create_widget(ctk.CTkButton, parent, **kwargs)
    
    def create_textbox(self, parent, **kwargs) -> ctk.CTkTextbox:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π CTkTextbox –≤–∏–¥–∂–µ—Ç."""
        return self.create_widget(ctk.CTkTextbox, parent, **kwargs)
    
    def create_label(self, parent, **kwargs) -> ctk.CTkLabel:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π CTkLabel –≤–∏–¥–∂–µ—Ç."""
        return self.create_widget(ctk.CTkLabel, parent, **kwargs)
    
    def create_frame(self, parent, **kwargs) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π CTkFrame –≤–∏–¥–∂–µ—Ç."""
        return self.create_widget(ctk.CTkFrame, parent, **kwargs)
    
    def setup_placeholder(self, widget, placeholder_text: str, is_textbox: bool = False) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç placeholder –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞."""
        self._setup_placeholder(widget, placeholder_text, is_textbox)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    SPECIAL_HANDLING = {
        'placeholder_text': '_setup_placeholder',
        'hover_color': '_validate_hover_support',
        'border_width': '_validate_border_support'    }
    
    def create_widget(self, widget_class, parent, **kwargs) -> Any:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        
        Args:
            widget_class: –ö–ª–∞—Å—Å –≤–∏–¥–∂–µ—Ç–∞ CustomTkinter
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–∂–µ—Ç–∞
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        """
        widget_name = widget_class.__name__
        safe_params = self.SAFE_PARAMS.get(widget_name, set())
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ —Ç—Ä–µ–±—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        safe_kwargs = {}
        special_kwargs = {}
        removed_params = []
        
        for key, value in kwargs.items():
            if key in safe_params:
                safe_kwargs[key] = value
            elif key in self.SPECIAL_HANDLING:
                special_kwargs[key] = value
            else:
                removed_params.append(key)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if removed_params:
            logger.warning(f"üîß –£–¥–∞–ª–µ–Ω—ã –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {widget_name}: {removed_params}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        try:
            widget = widget_class(parent, **safe_kwargs)
            logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω {widget_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {list(safe_kwargs.keys())}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            self._apply_special_handling(widget, widget_name, special_kwargs)
            
            return widget
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {widget_name}: {e}")
            logger.error(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {safe_kwargs}")
            raise
    
    def _apply_special_handling(self, widget, widget_name: str, special_kwargs: Dict[str, Any]) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏."""
        
        # Placeholder text - –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        if 'placeholder_text' in special_kwargs:
            placeholder_text = special_kwargs['placeholder_text']
            is_textbox = widget_name == 'CTkTextbox'
            self._setup_placeholder(widget, placeholder_text, is_textbox)
        
        # Hover color - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        if 'hover_color' in special_kwargs and widget_name in ['CTkButton', 'CTkCheckBox', 'CTkRadioButton']:
            try:
                widget.configure(hover_color=special_kwargs['hover_color'])
            except Exception as e:                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å hover_color –¥–ª—è {widget_name}: {e}")
    
    def _setup_placeholder(self, widget, placeholder_text: str, is_textbox: bool = False) -> None:
        """
        –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è placeholder –¥–ª—è Entry –∏ Textbox.
        
        CustomTkinter v5.2.1 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π placeholder_text,
        –ø–æ—ç—Ç–æ–º—É —Ä–µ–∞–ª–∏–∑—É–µ–º —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è focus in/out.
        """
        # –¶–≤–µ—Ç–∞ –¥–ª—è placeholder
        PLACEHOLDER_COLOR = "#666666"
        NORMAL_COLOR = UI_COLORS.get('text_primary', "#ECECEC")
        
        def on_focus_in(event):
            if is_textbox:
                current = widget.get("1.0", "end-1c")
            else:
                current = widget.get()
                
            if current == placeholder_text:
                if is_textbox:
                    widget.delete("1.0", "end")
                else:
                    widget.delete(0, "end")
                widget.configure(text_color=NORMAL_COLOR)
        
        def on_focus_out(event):
            if is_textbox:
                current = widget.get("1.0", "end-1c")
            else:
                current = widget.get()
                
            if not current.strip():
                if is_textbox:
                    widget.insert("1.0", placeholder_text)
                else:
                    widget.insert(0, placeholder_text)
                widget.configure(text_color=PLACEHOLDER_COLOR)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        widget.bind("<FocusIn>", on_focus_in)
        widget.bind("<FocusOut>", on_focus_out)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π placeholder
        on_focus_out(None)
        
        logger.debug(f"‚úÖ Placeholder —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: '{placeholder_text}'")
    
    @classmethod
    def create_styled_entry(cls, parent, placeholder: str = "", **kwargs) -> ctk.CTkEntry:
        """–£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Entry —Å placeholder."""
        kwargs['placeholder_text'] = placeholder
        return cls.create_widget(ctk.CTkEntry, parent, **kwargs)
    
    @classmethod
    def create_styled_textbox(cls, parent, placeholder: str = "", **kwargs) -> ctk.CTkTextbox:
        """–£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Textbox —Å placeholder."""
        kwargs['placeholder_text'] = placeholder
        return cls.create_widget(ctk.CTkTextbox, parent, **kwargs)
    
    @classmethod
    def create_styled_button(cls, parent, text: str, **kwargs) -> ctk.CTkButton:
        """–£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Button."""
        kwargs['text'] = text
        return cls.create_widget(ctk.CTkButton, parent, **kwargs)
    
    @classmethod
    def create_styled_label(cls, parent, text: str, **kwargs) -> ctk.CTkLabel:
        """–£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Label."""
        kwargs['text'] = text
        return cls.create_widget(ctk.CTkLabel, parent, **kwargs)
    
    @classmethod
    def create_styled_frame(cls, parent, **kwargs) -> ctk.CTkFrame:
        """–£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Frame."""
        return cls.create_widget(ctk.CTkFrame, parent, **kwargs)
    
    @classmethod
    def validate_color(cls, color: Optional[str]) -> str:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π —Ü–≤–µ—Ç.
        
        Args:
            color: –¶–≤–µ—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            –í–∞–ª–∏–¥–Ω—ã–π —Ü–≤–µ—Ç (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ None)
        """
        if not color or not isinstance(color, str):
            return UI_COLORS.get('text_secondary', '#A0A0A0')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º hex —Ñ–æ—Ä–º–∞—Ç
        if color.startswith('#') and len(color) in [4, 7]:
            return color
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
        named_colors = ['red', 'green', 'blue', 'white', 'black', 'gray', 'yellow', 'orange', 'purple']
        if color.lower() in named_colors:
            return color
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç '{color}', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π")
        return UI_COLORS.get('text_secondary', '#A0A0A0')
    
    @classmethod
    def get_safe_params_for_widget(cls, widget_name: str) -> Set[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞."""
        return cls.SAFE_PARAMS.get(widget_name, set()).copy()
    
    @classmethod
    def is_param_safe(cls, widget_name: str, param_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞."""
        safe_params = cls.SAFE_PARAMS.get(widget_name, set())
        return param_name in safe_params or param_name in cls.SPECIAL_HANDLING


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def create_safe_widget(widget_class, parent, **kwargs):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ SafeWidgetFactory.create_widget"""
    return SafeWidgetFactory.create_widget(widget_class, parent, **kwargs)


def setup_placeholder(widget, placeholder_text: str, is_textbox: bool = False):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ placeholder"""
    SafeWidgetFactory._setup_placeholder(widget, placeholder_text, is_textbox)


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'SafeWidgetFactory',
    'create_safe_widget', 
    'setup_placeholder'
]


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SafeWidgetFactory
    import tkinter as tk
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SafeWidgetFactory...")
    
    # –¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    safe_params = SafeWidgetFactory.get_safe_params_for_widget('CTkEntry')
    print(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è CTkEntry: {safe_params}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞
    test_colors = ["#FF0000", "red", "#invalid", None, "", "unknown"]
    for color in test_colors:
        validated = SafeWidgetFactory.validate_color(color)
        print(f"üé® –¶–≤–µ—Ç '{color}' -> '{validated}'")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    test_params = ["height", "width", "placeholder_text", "invalid_param"]
    for param in test_params:
        is_safe = SafeWidgetFactory.is_param_safe('CTkEntry', param)
        status = "‚úÖ" if is_safe else "‚ùå"
        print(f"{status} –ü–∞—Ä–∞–º–µ—Ç—Ä '{param}' –¥–ª—è CTkEntry: {is_safe}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SafeWidgetFactory –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
