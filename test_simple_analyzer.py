#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å SimpleAnalyzer
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, timedelta
from core.simple_analyzer import SimpleAnalyzer

def test_simple_analyzer():
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SIMPLE ANALYZER ===")
    
    try:
        analyzer = SimpleAnalyzer()
        print("‚úÖ SimpleAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤ (–Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞)
        hours = 6
        
        print(f"üïê –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        results = analyzer.analyze_participants(hours)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"ÔøΩ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(results) if results else 0}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results and 'participants' in results:
            participants = results['participants']
            print(f"ÔøΩ –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for i, (address, data) in enumerate(list(participants.items())[:5]):
                category = data.category if hasattr(data, 'category') else 'unknown'
                swaps_count = data.swaps_count if hasattr(data, 'swaps_count') else 0
                status = data.status if hasattr(data, 'status') else 'unknown'
                
                print(f"üîç {address[:10]}...: {category} | –°—Ç–∞—Ç—É—Å: {status} | –û–ø–µ—Ä–∞—Ü–∏–π: {swaps_count}")
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_simple_analyzer()
    sys.exit(0 if success else 1)
