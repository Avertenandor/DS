#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–∞–¥ PLEX Dynamic Staking Manager
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"""

import sys
import os
from datetime import datetime, timedelta
from decimal import Decimal
import random
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.reward_manager import RewardManager
from core.participant_analyzer_v2 import ParticipantData
from utils.logger import get_logger

logger = get_logger("test_reward_extended")

def generate_test_participants(count: int) -> dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    participants = {}
    categories = ["Whale", "Active_Trader", "Holder", "Regular_User", "Newcomer"]
    
    for i in range(count):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        address = f"0x{''.join(random.choices('0123456789abcdef', k=40))}"
        
        # –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º (–±–æ–ª—å—à–µ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        category_weights = [5, 15, 20, 40, 20]  # –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        category = random.choices(categories, weights=category_weights)[0]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category == "Whale":
            eligibility_score = random.uniform(0.8, 1.0)
            volume = random.uniform(500000, 2000000)
            unique_days = random.randint(25, 30)
            consecutive_days = random.randint(20, 30)
            current_balance = random.uniform(10000, 100000)
        elif category == "Active_Trader":
            eligibility_score = random.uniform(0.6, 0.85)
            volume = random.uniform(100000, 500000)
            unique_days = random.randint(15, 25)
            consecutive_days = random.randint(10, 20)
            current_balance = random.uniform(5000, 20000)
        elif category == "Holder":
            eligibility_score = random.uniform(0.4, 0.7)
            volume = random.uniform(10000, 100000)
            unique_days = random.randint(5, 15)
            consecutive_days = random.randint(3, 10)
            current_balance = random.uniform(1000, 10000)
        elif category == "Regular_User":
            eligibility_score = random.uniform(0.2, 0.5)
            volume = random.uniform(1000, 20000)
            unique_days = random.randint(3, 10)
            consecutive_days = random.randint(1, 7)
            current_balance = random.uniform(100, 2000)
        else:  # Newcomer
            eligibility_score = random.uniform(0.05, 0.25)
            volume = random.uniform(100, 5000)
            unique_days = random.randint(1, 5)
            consecutive_days = random.randint(1, 3)
            current_balance = random.uniform(10, 500)
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ eligibility_score
        if eligibility_score >= 0.8:
            reward_tier = "Platinum"
        elif eligibility_score >= 0.6:
            reward_tier = "Gold"
        elif eligibility_score >= 0.4:
            reward_tier = "Silver"
        elif eligibility_score >= 0.2:
            reward_tier = "Bronze"
        else:
            reward_tier = "None"
        
        participant = ParticipantData(
            address=address,
            first_activity=datetime.now() - timedelta(days=random.randint(30, 365)),
            last_activity=datetime.now() - timedelta(days=random.randint(0, 7)),
            total_swaps=random.randint(1, 100),
            total_volume_usd=Decimal(str(volume)),
            total_plex_bought=Decimal(str(volume * 0.6)),
            total_plex_sold=Decimal(str(volume * 0.4)),
            avg_swap_size_usd=Decimal(str(volume / random.randint(5, 50))),
            unique_days_active=unique_days,
            consecutive_days=consecutive_days,
            max_consecutive_days=consecutive_days,
            category=category,
            eligibility_score=eligibility_score,
            reward_tier=reward_tier,
            is_qualified=eligibility_score >= 0.2
        )
        
        participants[address] = participant
    
    return participants

def test_mass_reward_distribution():
    """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥"""
    print("üöÄ –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ù–ê–ì–†–ê–î")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    reward_manager = RewardManager()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ 1000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    print("‚ö° –¢–µ—Å—Ç 1: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ 1000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    start_time = time.time()
    
    participants_1k = generate_test_participants(1000)
    print(f"   üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(participants_1k)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–∞–≥—Ä–∞–¥
    reward_pool = reward_manager.create_reward_pool(
        total_amount=Decimal('1000000'),  # 1M PLEX
        period_start=datetime.now(),
        period_end=datetime.now() + timedelta(days=7)
    )    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
    distributions = reward_manager.calculate_rewards(participants_1k, reward_pool)
    
    end_time = time.time()
    execution_time = end_time - start_time
    
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: {len(distributions)}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    total_distributed = sum(d.final_reward for d in distributions)
    print(f"   üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_distributed:.2f} PLEX")
    print(f"   üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–∞: {total_distributed} <= {reward_pool.total_amount} ‚úÖ")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = {}
    for dist in distributions:
        category = None
        for p in participants_1k.values():
            if p.address == dist.participant_address:
                category = p.category
                break
        
        if category:
            if category not in category_stats:
                category_stats[category] = {"count": 0, "total_reward": 0}
            category_stats[category]["count"] += 1
            category_stats[category]["total_reward"] += dist.final_reward
    
    print("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, stats in category_stats.items():
        avg_reward = stats["total_reward"] / stats["count"] if stats["count"] > 0 else 0
        print(f"      {category}: {stats['count']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {avg_reward:.2f} PLEX")
    
    # –¢–µ—Å—Ç 2: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –Ω–∞ 5000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    print(f"\nüî• –¢–µ—Å—Ç 2: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –Ω–∞ 5000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    start_time = time.time()
    
    participants_5k = generate_test_participants(5000)
    
    # –ë–æ–ª—å—à–∏–π –ø—É–ª –Ω–∞–≥—Ä–∞–¥
    reward_pool_big = reward_manager.create_reward_pool(
        total_amount=Decimal('5000000'),  # 5M PLEX
        period_start=datetime.now(),
        period_end=datetime.now() + timedelta(days=7)
    )
    
    distributions_big = reward_manager.calculate_rewards(participants_5k, reward_pool_big)
    
    end_time = time.time()
    execution_time = end_time - start_time
    
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: {len(distributions_big)}")
    
    total_distributed_big = sum(d.final_reward for d in distributions_big)
    print(f"   üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_distributed_big:.2f} PLEX")
    print(f"   üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–∞: {total_distributed_big} <= {reward_pool_big.total_amount} ‚úÖ")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    print(f"\nüéØ –¢–µ—Å—Ç 3: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏")
    
    # –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º score
    equal_participants = {}
    for i in range(100):
        address = f"0x{''.join(random.choices('0123456789abcdef', k=40))}"
        participant = ParticipantData(
            address=address,
            first_activity=datetime.now() - timedelta(days=60),
            last_activity=datetime.now() - timedelta(days=1),
            total_swaps=random.randint(10, 50),
            total_volume_usd=Decimal('10000'),
            total_plex_bought=Decimal('6000'),
            total_plex_sold=Decimal('4000'),
            avg_swap_size_usd=Decimal('200'),
            unique_days_active=10,
            consecutive_days=5,
            max_consecutive_days=5,
            category="Regular_User",
            eligibility_score=0.5,
            reward_tier="Silver",  # 0.5 >= 0.4
            is_qualified=True
        )
        equal_participants[address] = participant
    
    reward_pool_equal = reward_manager.create_reward_pool(
        total_amount=Decimal('100000'),
        period_start=datetime.now(),
        period_end=datetime.now() + timedelta(days=7)
    )
    
    distributions_equal = reward_manager.calculate_rewards(equal_participants, reward_pool_equal)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    rewards = [d.final_reward for d in distributions_equal]
    avg_reward = sum(rewards) / len(rewards) if rewards else 0
    max_deviation = max(abs(reward - avg_reward) for reward in rewards) if rewards else 0
    
    print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º score: {len(equal_participants)}")
    print(f"   üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {avg_reward:.2f} PLEX")
    print(f"   üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {max_deviation:.2f} PLEX")
    print(f"   ‚úÖ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {max_deviation < float(avg_reward) * 0.1}")
    
    # –¢–µ—Å—Ç 4: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
    print(f"\n‚ö° –¢–µ—Å—Ç 4: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏")
    
    extreme_participants = {}
    # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    extreme_participant = ParticipantData(
        address="0xExtreme" + "0" * 32,
        first_activity=datetime.now() - timedelta(days=365),
        last_activity=datetime.now(),
        total_swaps=random.randint(500, 1000),
        total_volume_usd=Decimal('10000000'),  # 10M USD
        total_plex_bought=Decimal('6000000'),
        total_plex_sold=Decimal('4000000'),
        avg_swap_size_usd=Decimal('20000'),
        unique_days_active=30,
        consecutive_days=30,
        max_consecutive_days=30,
        category="Whale",
        eligibility_score=1.0,
        reward_tier="Platinum",  # 1.0 >= 0.8
        is_qualified=True
    )
    extreme_participants[extreme_participant.address] = extreme_participant
    
    # –ò –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for i in range(10):
        address = f"0xNormal{'0' * (34-len(str(i)))}{i}"
        participant = ParticipantData(
            address=address,
            first_activity=datetime.now() - timedelta(days=30),
            last_activity=datetime.now() - timedelta(days=2),
            total_swaps=random.randint(5, 20),
            total_volume_usd=Decimal('5000'),
            total_plex_bought=Decimal('3000'),
            total_plex_sold=Decimal('2000'),
            avg_swap_size_usd=Decimal('250'),
            unique_days_active=5,
            consecutive_days=3,
            max_consecutive_days=3,
            category="Regular_User",
            eligibility_score=0.3,
            reward_tier="Bronze",  # 0.3 >= 0.2
            is_qualified=True
        )
        extreme_participants[address] = participant
    
    reward_pool_extreme = reward_manager.create_reward_pool(
        total_amount=Decimal('50000'),
        period_start=datetime.now(),
        period_end=datetime.now() + timedelta(days=7)
    )
    
    distributions_extreme = reward_manager.calculate_rewards(extreme_participants, reward_pool_extreme)
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–≥—Ä–∞–¥—É —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    extreme_reward = None
    normal_rewards = []
    for dist in distributions_extreme:
        if "Extreme" in dist.participant_address:
            extreme_reward = dist.final_reward
        else:
            normal_rewards.append(dist.final_reward)
    
    avg_normal_reward = sum(normal_rewards) / len(normal_rewards) if normal_rewards else 0
    
    print(f"   üêã –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {extreme_reward:.2f} PLEX")
    print(f"   üë§ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ –æ–±—ã—á–Ω—ã—Ö: {avg_normal_reward:.2f} PLEX")
    print(f"   üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {extreme_reward / avg_normal_reward:.1f}x" if avg_normal_reward > 0 else "N/A")
    
    total_extreme = sum(d.final_reward for d in distributions_extreme)
    print(f"   üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–∞: {total_extreme} <= {reward_pool_extreme.total_amount} ‚úÖ")
    
    print(f"\nüéâ –í–°–ï –†–ê–°–®–ò–†–ï–ù–ù–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    
    return True

if __name__ == "__main__":
    try:
        success = test_mass_reward_distribution()
        if success:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
