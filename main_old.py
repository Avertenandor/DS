"""
PLEX Dynamic Staking Manager - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–û–ø–∏—Å–∞–Ω–∏–µ: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ PLEX ONE v4.0
–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team

–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ main_v4.py –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
—Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∫–Ω–æ–ø–æ–∫ –∏ enhanced –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
"""

import sys
import subprocess
from pathlib import Path

print("üöÄ PLEX Dynamic Staking Manager")
print("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ v4.0...")
print("‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ main_v4.py")
print("")

# –ó–∞–ø—É—Å–∫–∞–µ–º main_v4.py
try:
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ main_v4.py
    current_dir = Path(__file__).parent
    main_v4_path = current_dir / "main_v4.py"
    
    if main_v4_path.exists():
        # –ó–∞–ø—É—Å–∫–∞–µ–º main_v4.py —Å —Ç–µ–º–∏ –∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        subprocess.run([sys.executable, str(main_v4_path)] + sys.argv[1:], cwd=current_dir)
    else:
        print("‚ùå –û—à–∏–±–∫–∞: main_v4.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª main_v4.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
        sys.exit(1)
        
except KeyboardInterrupt:
    print("\n‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    sys.exit(0)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é: python main_v4.py")
    sys.exit(1)


class PLEXStakingManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã —Å—Ç–µ–π–∫–∏–Ω–≥–∞ PLEX"""
    
    def __init__(self):
        self.web3_manager = None
        self.swap_analyzer = None
        self.is_running = False
        self.version = "1.0.0"
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PLEX Dynamic Staking Manager")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            config_summary = {
                "Version": self.version,
                "Token": f"{TOKEN_NAME} ({TOKEN_SYMBOL})",
                "QuickNode": settings.quicknode_http[:50] + "...",
                "Database": settings.database_url,
                "Gas Mode": settings.gas_mode,
                "Log Level": settings.log_level
            }
            
            main_logger.log_system_startup(self.version, config_summary)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
            self.web3_manager = get_web3_manager()
            
            if not self.web3_manager.is_connected:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ QuickNode")
            
            logger.info("‚úÖ Web3 –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ swap'–æ–≤
            logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ swap'–æ–≤...")
            self.swap_analyzer = get_swap_analyzer()
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä swap'–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            health = self.web3_manager.check_connection_health()
            if not health["http_connected"]:
                raise Exception("HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
            logger.info(f"üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–ª–æ–∫—É #{health['latest_block']:,}")
            
            self.is_running = True
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def run_analysis(self, period_days: int = 30):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
        try:
            logger.info(f"üìä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {period_days} –¥–Ω–µ–π")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ø-–±–ª–æ–∫
            from datetime import datetime, timedelta
            stop_timestamp = int((datetime.now() - timedelta(days=period_days)).timestamp())
            stop_block = self.web3_manager.find_block_by_timestamp(stop_timestamp)
            
            logger.info(f"üéØ –ê–Ω–∞–ª–∏–∑ –¥–æ –±–ª–æ–∫–∞ #{stop_block:,}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ swap —Å–æ–±—ã—Ç–∏—è
            def progress_callback(message, progress):
                logger.info(f"üìà {message}")
            
            swaps = self.swap_analyzer.collect_all_swaps(stop_block, progress_callback)
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            categories = self.swap_analyzer.categorize_participants(swaps, period_days)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
            logger.info(f"   üåü –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {len(categories['perfect'])}")
            logger.info(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ–∫—É–ø–∫–∏: {len(categories['missed_purchase'])}")
            logger.info(f"   ‚ùå –ü—Ä–æ–¥–∞–≤–∞–ª–∏ —Ç–æ–∫–µ–Ω—ã: {len(categories['sold_token'])}")
            logger.info(f"   üì§ –ü–µ—Ä–µ–≤–æ–¥–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã: {len(categories['transferred'])}")
            
            return categories
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            if self.web3_manager:
                self.web3_manager.close_connections()
            
            self.is_running = False
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    manager = PLEXStakingManager()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        manager.initialize()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if len(sys.argv) > 1:
            command = sys.argv[1].lower()
            
            if command == "test":
                # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                from scripts.test_connection import main as test_main
                return test_main()
                
            elif command == "analyze":
                # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
                period_days = int(sys.argv[2]) if len(sys.argv) > 2 else 30
                results = manager.run_analysis(period_days)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                import json
                from datetime import datetime
                
                output_file = f"analysis_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –≤ float –¥–ª—è JSON
                def convert_decimal(obj):
                    if hasattr(obj, '__dict__'):
                        return {k: convert_decimal(v) for k, v in obj.__dict__.items()}
                    elif isinstance(obj, list):
                        return [convert_decimal(item) for item in obj]
                    elif isinstance(obj, dict):
                        return {k: convert_decimal(v) for k, v in obj.items()}
                    elif hasattr(obj, 'isoformat'):  # datetime
                        return obj.isoformat()
                    elif str(type(obj)) == "<class 'decimal.Decimal'>":
                        return float(obj)
                    else:
                        return obj
                
                converted_results = convert_decimal(results)
                
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(converted_results, f, indent=2, ensure_ascii=False, default=str)
                
                logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
                
            elif command == "ui":
                # –ó–∞–ø—É—Å–∫ UI (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ)
                logger.info("üñ•Ô∏è –ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
                logger.warning("‚ö†Ô∏è UI –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
                
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                print("  test     - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                print("  analyze [–¥–Ω–∏] - –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π)")
                print("  ui       - –∑–∞–ø—É—Å–∫ UI")
                return False
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            logger.info("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
            
            while manager.is_running:
                print("\n" + "="*50)
                print("PLEX Dynamic Staking Manager")
                print("="*50)
                print("1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                print("2. –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                print("3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API")
                print("4. –í—ã—Ö–æ–¥")
                print("="*50)
                
                try:
                    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
                    
                    if choice == "1":
                        from scripts.test_connection import main as test_main
                        test_main()
                        
                    elif choice == "2":
                        days = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
                        period_days = int(days) if days.isdigit() else 30
                        
                        results = manager.run_analysis(period_days)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ({period_days} –¥–Ω–µ–π):")
                        print(f"üåü –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {len(results['perfect'])}")
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ–∫—É–ø–∫–∏: {len(results['missed_purchase'])}")
                        print(f"‚ùå –ü—Ä–æ–¥–∞–≤–∞–ª–∏ —Ç–æ–∫–µ–Ω—ã: {len(results['sold_token'])}")
                        
                    elif choice == "3":
                        stats = manager.web3_manager.api_usage.get_usage_stats()
                        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê API:")
                        print(f"üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['credits_used']:,}")
                        print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['requests_count']:,}")
                        print(f"‚ö° –¢–µ–∫—É—â–∏–π RPS: {stats['current_rps']}")
                        print(f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: {stats['monthly_projection']:,.0f}")
                        
                    elif choice == "4":
                        break
                        
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                        
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
        
    finally:
        manager.shutdown()


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
