#!/usr/bin/env python3
"""
PLEX Dynamic Staking Manager - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–û–ø–∏—Å–∞–Ω–∏–µ: Production-ready —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ PLEX ONE
–í–µ—Ä—Å–∏—è: 1.0.0
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import sys
import asyncio
import argparse
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import settings
from config.constants import TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS
from utils.logger import get_logger
from utils.converters import format_number
from utils.batch_processor import BatchProcessor
from blockchain.node_client import Web3Manager
from blockchain.swap_analyzer import SwapAnalyzer
from core.participant_analyzer_v2 import ParticipantAnalyzer
from core.reward_manager import RewardManager
from core.duplicate_protection import DuplicateProtectionManager
from db.models import DatabaseManager
from db.history_manager import HistoryManager
from db.backup_manager import BackupManager
from scripts.export_data import DataExporter

# UI –∏–º–ø–æ—Ä—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from ui.main_window import PLEXStakingUI
    from ui.main_window_v3 import PLEXStakingUI_V3
    UI_AVAILABLE = True
except ImportError:
    UI_AVAILABLE = False

logger = get_logger("PLEX_Main")

class PLEXStakingManager:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PLEX Dynamic Staking Manager")
        logger.info("=" * 80)
        logger.info("üöÄ PLEX Dynamic Staking Manager v1.0.0 STARTING")
        logger.info("=" * 80)
        logger.info(f"üîß Version: 1.0.0")
        logger.info(f"üîß Token: {TOKEN_NAME} ({TOKEN_SYMBOL})")
        logger.info(f"üîß QuickNode: {settings.quicknode_http[:50]}...")
        logger.info(f"üîß Database: {settings.database_url}")
        logger.info(f"üîß Gas Mode: {settings.gas_optimization_mode}")
        logger.info(f"üîß Log Level: {settings.log_level}")
        logger.info("=" * 80)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
            self.web3_manager = Web3Manager()
            logger.info("‚úÖ Web3 –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ swap'–æ–≤...")
            self.swap_analyzer = SwapAnalyzer()
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä swap'–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            self.participant_analyzer = ParticipantAnalyzer()
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("üèÜ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥...")
            self.reward_manager = RewardManager()
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≥—Ä–∞–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î...")
            self.db_manager = DatabaseManager()
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("üîí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
            self.duplicate_protection = DuplicateProtectionManager()
            logger.info("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            logger.info("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏...")
            self.history_manager = HistoryManager()
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—ç–∫–∞–ø–æ–≤...")
            self.backup_manager = BackupManager(auto_backup=False)  # –û—Ç–∫–ª—é—á–∏–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±—ç–∫–∞–ø–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞—Ç—á-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
            self.batch_processor = BatchProcessor()
            logger.info("‚úÖ –ë–∞—Ç—á-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
            self.data_exporter = DataExporter()
            logger.info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            latest_block = self.web3_manager.get_latest_block_number()
            logger.info(f"üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–ª–æ–∫—É #{latest_block:,}")
            
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def analyze_participants(self, 
                          start_block: Optional[int] = None,
                          end_block: Optional[int] = None,
                          days_back: int = 30) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
        
        Args:
            start_block: –ù–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫ (–µ—Å–ª–∏ None, –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            end_block: –ö–æ–Ω–µ—á–Ω—ã–π –±–ª–æ–∫ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π)
            days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫–æ–≤
            if end_block is None:
                end_block = self.web3_manager.get_latest_block_number()
            
            if start_block is None:
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                blocks_per_day = 24 * 60 * 60 // 3  # BSC ~3 —Å–µ–∫ –Ω–∞ –±–ª–æ–∫
                start_block = end_block - (days_back * blocks_per_day)
            
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤ {start_block:,} - {end_block:,} ({days_back} –¥–Ω–µ–π)")
              # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = self.participant_analyzer.analyze_participants(
                start_block, end_block
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            summary = self.participant_analyzer.export_participants_summary()
            
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
            logger.info(f"üéØ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {summary.get('reward_tiers', {}).get('Bronze', 0) + summary.get('reward_tiers', {}).get('Silver', 0) + summary.get('reward_tiers', {}).get('Gold', 0) + summary.get('reward_tiers', {}).get('Platinum', 0)}")
            
            return {
                "participants": participants,
                "summary": summary,
                "analysis_blocks": {
                    "start": start_block,
                    "end": end_block,
                    "total": end_block - start_block
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            raise

    def calculate_rewards(self, participants: Dict, total_reward_pool: float = 100000) -> Dict:
        """
        –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        
        Args:
            participants: –°–ª–æ–≤–∞—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
            total_reward_pool: –û–±—â–∏–π –ø—É–ª –Ω–∞–≥—Ä–∞–¥ –≤ PLEX
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
        """
        logger.info(f"üí∞ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥. –ü—É–ª: {format_number(total_reward_pool)} PLEX")
        
        try:
            from decimal import Decimal
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª –Ω–∞–≥—Ä–∞–¥
            reward_pool = self.reward_manager.create_reward_pool(
                total_amount=Decimal(str(total_reward_pool)),
                period_start=datetime.now() - timedelta(days=30),
                period_end=datetime.now()
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
            distributions = self.reward_manager.calculate_rewards(participants, reward_pool)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
            summary = self.reward_manager.get_reward_summary()
            
            logger.info("‚úÖ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")
            logger.info(f"üéÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {len(distributions)}")
            logger.info(f"üíé –û–±—â–∞—è —Å—É–º–º–∞: {format_number(float(summary.get('total_rewards', 0)))} PLEX")
            
            return {
                "distributions": distributions,
                "summary": summary,
                "pool_info": {
                    "total": total_reward_pool,
                    "distributed": float(reward_pool.distributed_amount),
                    "remaining": float(reward_pool.remaining_amount)
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            raise

    def export_all_data(self) -> List[str]:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
            
            exported_files = []
            
            # –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            try:
                file_path = self.data_exporter.export_participants_analysis()
                exported_files.append(file_path)
                logger.info(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–≥—Ä–∞–¥
            try:
                file_path = self.data_exporter.export_rewards_summary()
                exported_files.append(file_path)
                logger.info(f"‚úÖ –ù–∞–≥—Ä–∞–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            try:
                file_path = self.data_exporter.export_system_metrics()
                exported_files.append(file_path)
                logger.info(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞—à–±–æ—Ä–¥–∞
            try:
                file_path = self.data_exporter.create_dashboard_data()
                exported_files.append(file_path)
                logger.info(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {file_path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            
            logger.info(f"üìÅ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(exported_files)} —Ñ–∞–π–ª–æ–≤")
            return exported_files
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return []

    def get_system_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            stats = {}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            try:
                db_stats = self.db_manager.get_connection_stats()
                stats["database"] = db_stats
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î: {e}")
                stats["database"] = {"error": str(e)}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            try:
                history_stats = self.history_manager.get_statistics()
                stats["history"] = history_stats
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                stats["history"] = {"error": str(e)}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤
            try:
                backup_stats = self.backup_manager.get_backup_statistics()
                stats["backups"] = backup_stats
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ç–∫–∞–ø–æ–≤: {e}")
                stats["backups"] = {"error": str(e)}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            try:
                batch_stats = self.batch_processor.get_statistics()
                stats["batch_processor"] = batch_stats
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞—Ç—á-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
                stats["batch_processor"] = {"error": str(e)}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            try:
                duplicate_stats = self.duplicate_protection.get_statistics()
                stats["duplicate_protection"] = duplicate_stats
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
                stats["duplicate_protection"] = {"error": str(e)}
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {"error": str(e)}

    def export_data(self, data: Dict, export_type: str = "analysis", filename: Optional[str] = None):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            import json
            
            if filename is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"plex_staking_{export_type}_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"üìÅ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return None

    def run_cli_interface(self):
        """–ó–∞–ø—É—Å–∫ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        logger.info("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        
        while True:
            print("\n" + "=" * 50)
            print("PLEX Dynamic Staking Manager")
            print("=" * 50)
            print("1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            print("2. –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            print("3. –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥")
            print("4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API")
            print("5. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            print("6. –ó–∞–ø—É—Å–∫ UI")
            print("7. –í—ã—Ö–æ–¥")
            print("=" * 50)
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): ").strip()
                
                if choice == "1":
                    self._run_connection_test()
                elif choice == "2":
                    self._run_participant_analysis()
                elif choice == "3":
                    self._run_reward_calculation()
                elif choice == "4":
                    self._show_api_stats()
                elif choice == "5":
                    self._run_data_export()
                elif choice == "6":
                    self._launch_ui()
                elif choice == "7":
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    
            except KeyboardInterrupt:
                print("\nüîÑ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ CLI: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def _run_connection_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            from scripts.test_connection import main as test_main
            test_main()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def _run_participant_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            print("\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            days_back = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
            days_back = int(days_back) if days_back else 30
            
            print(f"\nüîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –±–ª–æ–∫–∏
            current_block = self.web3_manager.get_current_block()
            blocks_per_day = 28800  # BSC: ~3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –±–ª–æ–∫
            start_block = current_block - (days_back * blocks_per_day)
            end_block = current_block
              # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            results = self.participant_analyzer.analyze_participants(start_block, end_block)
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(results)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = {}
            for participant in results.values():
                cat = getattr(participant, 'category', 'Unknown')
                categories[cat] = categories.get(cat, 0) + 1
            
            print("üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for cat, count in categories.items():
                print(f"   {cat}: {count}")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
            export = input("\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? (y/n): ").strip().lower()
            if export == 'y':
                filename = f"participants_analysis_{days_back}d.xlsx"
                print(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤ {filename}...")
                # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def _run_reward_calculation(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥"""
        print("\nüèÜ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

    def _show_api_stats(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API"""
        try:
            stats = self.web3_manager.get_api_usage()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:")
            print(f"üìà –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['requests_made']}")
            print(f"üí≥ –ö—Ä–µ–¥–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['credits_used']}")
            print(f"‚ö° –¢–µ–∫—É—â–∏–π RPS: {stats['current_rps']}")
            print(f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: {stats['monthly_projection']:,} –∫—Ä–µ–¥–∏—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _run_data_export(self):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìÅ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞")

    def _launch_ui(self):
        """–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not UI_AVAILABLE:
            print("‚ùå UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install customtkinter")
            return
        
        try:
            print("üé® –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            ui = PLEXStakingUI()
            ui.run()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ UI: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ UI: {e}")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        try:
            if hasattr(self, 'web3_manager'):
                self.web3_manager.close()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        parser = argparse.ArgumentParser(description="PLEX Dynamic Staking Manager")
        parser.add_argument("command", nargs="?", choices=["test", "analyze", "rewards", "ui", "ui3", "export", "backup", "history", "stats", "batch"], 
                          help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        parser.add_argument("--days", type=int, default=30, 
                          help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        parser.add_argument("--export", action="store_true", 
                          help="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        args = parser.parse_args()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        manager = PLEXStakingManager()
        
        try:
            if args.command == "test":
                logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                from scripts.test_connection import main as test_main
                test_main()
                
            elif args.command == "analyze":
                logger.info(f"üìä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({args.days} –¥–Ω–µ–π)...")
                
                results = manager.analyze_participants(days_back=args.days)
                
                if args.export:
                    filename = manager.export_data(results, "analysis")
                    logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {filename}")
                    
            elif args.command == "rewards":
                logger.info("üèÜ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥...")
                print("üèÜ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
                
            elif args.command == "ui":
                if UI_AVAILABLE:
                    logger.info("üé® –ó–∞–ø—É—Å–∫ UI...")
                    ui = PLEXStakingUI()
                    ui.run()
                else:
                    logger.error("‚ùå UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install customtkinter")
                    
            elif args.command == "ui3":
                if UI_AVAILABLE:
                    logger.info("üé® –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ UI V3...")
                    ui = PLEXStakingUI_V3()
                    ui.run()
                else:
                    logger.error("‚ùå UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install customtkinter")
                    
            elif args.command == "export":
                logger.info("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
                exports = manager.export_all_data()
                logger.info(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(exports)} —Ñ–∞–π–ª–æ–≤")
                for export in exports:
                    logger.info(f"  - {export}")
                    
            elif args.command == "backup":
                logger.info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
                backup_info = manager.backup_manager.create_full_backup("–†—É—á–Ω–æ–π –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ CLI")
                if backup_info and backup_info.success:
                    logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_info.backup_id}")
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")
                    
            elif args.command == "history":
                logger.info("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π...")
                history = manager.history_manager.get_history(limit=50)
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(history)} –æ–ø–µ—Ä–∞—Ü–∏–π:")
                for record in history[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    status = "‚úÖ" if record.success else "‚ùå"
                    logger.info(f"  {status} {record.timestamp.strftime('%Y-%m-%d %H:%M:%S')} | {record.operation_type.value} | {record.component}")
                    
            elif args.command == "stats":
                logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
                stats = manager.get_system_statistics()
                logger.info("üìà –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                for key, value in stats.items():
                    logger.info(f"  {key}: {value}")
                    
            elif args.command == "batch":
                logger.info("‚ö° –ó–∞–ø—É—Å–∫ –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                # –ü—Ä–∏–º–µ—Ä –±–∞—Ç—á-–æ–ø–µ—Ä–∞—Ü–∏–π
                if manager.batch_processor.get_total_pending_tasks() > 0:
                    results = manager.batch_processor.process_all_tasks()
                    logger.info(f"‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∑–∞–¥–∞—á")
                else:
                    logger.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            else:
                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                manager.run_cli_interface()
                
        finally:
            manager.cleanup()
            
    except KeyboardInterrupt:
        logger.info("üîÑ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
