"""
PLEX Dynamic Staking Manager - Gas Manager
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–æ–º –Ω–∞ BSC –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö —Ä–∞–±–æ—Ç—ã.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import time
from decimal import Decimal
from enum import Enum
from typing import Dict, List, Optional, Tuple, Union, Any
from dataclasses import dataclass
from web3 import Web3
from web3.types import TxParams
from utils.logger import get_logger
from utils.retry import with_retry
from utils.validators import validate_address
from utils.converters import wei_to_token, token_to_wei

logger = get_logger(__name__)


class GasMode(Enum):
    """–†–µ–∂–∏–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–æ–º."""
    ADAPTIVE = "adaptive"      # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ç–∏
    STANDARD = "standard"      # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    BATCHING = "batching"      # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞


@dataclass
class GasPrice:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–Ω—ã –≥–∞–∑–∞."""
    safe_gas_price: int       # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ü–µ–Ω–∞ (gwei)
    standard_gas_price: int   # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞ (gwei)
    fast_gas_price: int       # –ë—ã—Å—Ç—Ä–∞—è —Ü–µ–Ω–∞ (gwei)
    base_fee: Optional[int] = None  # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è EIP-1559


@dataclass
class GasEstimate:
    """–û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    gas_limit: int
    gas_price: int
    max_fee_per_gas: Optional[int] = None
    max_priority_fee_per_gas: Optional[int] = None
    estimated_cost_wei: int = 0
    estimated_cost_bnb: Decimal = Decimal('0')


class GasManager:
    """
    Production-ready –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–æ–º –Ω–∞ BSC.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –≥–∞–∑–∞
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    - –ë–∞—Ç—á–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≥–∞–∑–∞
    """
    
    def __init__(self, web3_manager, mode: GasMode = GasMode.ADAPTIVE):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GasManager.
        
        Args:
            web3_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä Web3Manager
            mode: –†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–æ–º
        """
        self.w3_manager = web3_manager
        self.w3 = web3_manager.w3_http
        self.mode = mode
        
        # –ö—ç—à —Ü–µ–Ω –≥–∞–∑–∞
        self.gas_price_cache: Optional[GasPrice] = None
        self.cache_timestamp = 0
        self.cache_ttl = 30  # —Å–µ–∫—É–Ω–¥
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è BSC
        self.default_config = {
            'safe_gas_price': 3_000_000_000,      # 3 gwei
            'standard_gas_price': 5_000_000_000,  # 5 gwei
            'fast_gas_price': 10_000_000_000,     # 10 gwei
            'max_gas_price': 50_000_000_000,      # 50 gwei - –º–∞–∫—Å–∏–º—É–º –¥–ª—è BSC
            'gas_limit_multiplier': 1.2,          # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è gas limit
            'priority_fee': 1_000_000_000,        # 1 gwei –¥–ª—è EIP-1559
        }
        
        # –õ–∏–º–∏—Ç—ã –≥–∞–∑–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.gas_limits = {
            'transfer': 21000,
            'erc20_transfer': 65000,
            'erc20_approve': 65000,
            'swap': 200000,
            'multicall': 300000,
            'complex_transaction': 500000
        }
        
        logger.info(f"‚úÖ GasManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ: {mode.value}")
    
    @with_retry(max_attempts=3, delay=1.0)
    async def get_gas_price(self, refresh_cache: bool = False) -> GasPrice:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –≥–∞–∑–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Args:
            refresh_cache: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
            
        Returns:
            GasPrice: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ü–µ–Ω–∞–º–∏ –≥–∞–∑–∞
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if not refresh_cache and self._is_cache_valid():
            logger.debug("üìã –í–æ–∑–≤—Ä–∞—Ç —Ü–µ–Ω—ã –≥–∞–∑–∞ –∏–∑ –∫—ç—à–∞")
            return self.gas_price_cache
        
        try:
            if self.mode == GasMode.ADAPTIVE:
                gas_price = await self._get_adaptive_gas_price()
            elif self.mode == GasMode.STANDARD:
                gas_price = self._get_standard_gas_price()
            elif self.mode == GasMode.BATCHING:
                gas_price = await self._get_batching_gas_price()
            else:
                gas_price = self._get_standard_gas_price()
              # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.gas_price_cache = gas_price
            self.cache_timestamp = time.time()
            
            logger.debug(f"‚õΩ –¶–µ–Ω—ã –≥–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {gas_price}")
            return gas_price
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self._get_standard_gas_price()
    async def _get_adaptive_gas_price(self) -> GasPrice:
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≥–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏.
        
        Returns:
            GasPrice: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã –≥–∞–∑–∞
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –≥–∞–∑–∞ –∏–∑ —Å–µ—Ç–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
            current_gas_price = self.w3.eth.gas_price
            
            # –ü—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
            multipliers = {'safe': 0.9, 'standard': 1.0, 'fast': 1.2}
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            try:
                safe_price = max(
                    int(current_gas_price * multipliers['safe']),
                    self.default_config['safe_gas_price']
                )
                standard_price = max(
                    int(current_gas_price * multipliers['standard']),
                    self.default_config['standard_gas_price']
                )
                fast_price = max(
                    int(current_gas_price * multipliers['fast']),
                    self.default_config['fast_gas_price']
                )
            except (TypeError, ValueError) as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö —Ü–µ–Ω –≥–∞–∑–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return self._get_standard_gas_price()
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            max_price = self.default_config['max_gas_price']
            safe_price = min(safe_price, max_price)
            standard_price = min(standard_price, max_price)
            fast_price = min(fast_price, max_price)
            
            logger.debug(f"üß† –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã: safe={safe_price}, standard={standard_price}, fast={fast_price}")
            
            return GasPrice(
                safe_gas_price=safe_price,
                standard_gas_price=standard_price,
                fast_gas_price=fast_price,
                base_fee=None
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≥–∞–∑–∞: {e}")
            logger.error(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return self._get_standard_gas_price()
    
    async def _calculate_network_multipliers(self) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏.
        
        Returns:
            Dict: –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–ª–æ–∫–æ–≤
            latest_block = await asyncio.to_thread(self.w3.eth.get_block, 'latest')
            current_block_number = latest_block.number
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–ª–æ–∫–æ–≤
            blocks_to_analyze = 10
            total_gas_used = 0
            total_gas_limit = 0
            
            for i in range(blocks_to_analyze):
                try:
                    block_number = current_block_number - i
                    block = await asyncio.to_thread(self.w3.eth.get_block, block_number)
                    total_gas_used += block.gasUsed
                    total_gas_limit += block.gasLimit
                except:
                    continue
            
            # –†–∞—Å—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
            if total_gas_limit > 0:
                network_utilization = total_gas_used / total_gas_limit
            else:
                network_utilization = 0.5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
            if network_utilization > 0.9:
                # –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å
                multipliers = {'safe': 0.8, 'standard': 1.2, 'fast': 2.0}
            elif network_utilization > 0.7:
                # –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å
                multipliers = {'safe': 0.9, 'standard': 1.1, 'fast': 1.5}
            else:
                # –ù–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å
                multipliers = {'safe': 1.0, 'standard': 1.0, 'fast': 1.2}
            
            logger.debug(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–µ—Ç–∏: {network_utilization:.2%}, –º–Ω–æ–∂–∏—Ç–µ–ª–∏: {multipliers}")
            return multipliers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏: {e}")
            return {'safe': 1.0, 'standard': 1.0, 'fast': 1.2}
    
    def _get_standard_gas_price(self) -> GasPrice:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ü–µ–Ω –≥–∞–∑–∞ –¥–ª—è BSC.
        
        Returns:
            GasPrice: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–Ω—ã –≥–∞–∑–∞
        """
        return GasPrice(
            safe_gas_price=self.default_config['safe_gas_price'],
            standard_gas_price=self.default_config['standard_gas_price'],
            fast_gas_price=self.default_config['fast_gas_price']
        )
    
    async def _get_batching_gas_price(self) -> GasPrice:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
        
        Returns:
            GasPrice: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
        """
        try:
            # –î–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã
            adaptive_prices = await self._get_adaptive_gas_price()
            
            # –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ 20% –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É)
            batch_multiplier = 0.8
            
            return GasPrice(
                safe_gas_price=int(adaptive_prices.safe_gas_price * batch_multiplier),
                standard_gas_price=int(adaptive_prices.standard_gas_price * batch_multiplier),
                fast_gas_price=int(adaptive_prices.fast_gas_price * batch_multiplier),
                base_fee=adaptive_prices.base_fee
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞: {e}")
            return self._get_standard_gas_price()
    
    @with_retry(max_attempts=3, delay=1.0)
    async def estimate_gas(
        self,
        transaction: Dict[str, Any],
        speed: str = 'standard'
    ) -> GasEstimate:
        """
        –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        
        Args:
            transaction: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            speed: –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ ('safe', 'standard', 'fast')
            
        Returns:
            GasEstimate: –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –≥–∞–∑–∞
            gas_prices = await self.get_gas_price()
            
            # –í—ã–±–æ—Ä —Ü–µ–Ω—ã –≥–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
            if speed == 'safe':
                gas_price = gas_prices.safe_gas_price
            elif speed == 'fast':
                gas_price = gas_prices.fast_gas_price
            else:
                gas_price = gas_prices.standard_gas_price
            
            # –û—Ü–µ–Ω–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–∞–∑–∞
            try:
                estimated_gas = await asyncio.to_thread(
                    self.w3.eth.estimate_gas, 
                    transaction
                )
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
                gas_limit = int(estimated_gas * self.default_config['gas_limit_multiplier'])
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –≥–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π: {e}")
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
                if 'data' in transaction and transaction['data'] != '0x':
                    gas_limit = self.gas_limits['complex_transaction']
                else:
                    gas_limit = self.gas_limits['transfer']
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            estimated_cost_wei = gas_limit * gas_price
            estimated_cost_bnb = wei_to_token(estimated_cost_wei, 18)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ EIP-1559 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            max_fee_per_gas = None
            max_priority_fee_per_gas = None
            
            if gas_prices.base_fee is not None:
                max_priority_fee_per_gas = self.default_config['priority_fee']
                max_fee_per_gas = gas_prices.base_fee * 2 + max_priority_fee_per_gas
            
            estimate = GasEstimate(
                gas_limit=gas_limit,
                gas_price=gas_price,
                max_fee_per_gas=max_fee_per_gas,
                max_priority_fee_per_gas=max_priority_fee_per_gas,
                estimated_cost_wei=estimated_cost_wei,
                estimated_cost_bnb=estimated_cost_bnb
            )
            
            logger.debug(f"‚õΩ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞: {estimate}")
            return estimate
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
            return GasEstimate(
                gas_limit=self.gas_limits['transfer'],
                gas_price=self.default_config['standard_gas_price'],
                estimated_cost_wei=self.gas_limits['transfer'] * self.default_config['standard_gas_price'],
                estimated_cost_bnb=wei_to_token(
                    self.gas_limits['transfer'] * self.default_config['standard_gas_price'], 
                    18
                )
            )
    
    def prepare_transaction_params(
        self,
        base_transaction: Dict[str, Any],
        gas_estimate: GasEstimate
    ) -> Dict[str, Any]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≥–∞–∑–æ–º.
        
        Args:
            base_transaction: –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            gas_estimate: –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
            
        Returns:
            Dict: –ì–æ—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        transaction = base_transaction.copy()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–∞–∑–∞
        transaction['gas'] = gas_estimate.gas_limit
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã –≥–∞–∑–∞
        if gas_estimate.max_fee_per_gas and gas_estimate.max_priority_fee_per_gas:
            # EIP-1559 –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            transaction['maxFeePerGas'] = gas_estimate.max_fee_per_gas
            transaction['maxPriorityFeePerGas'] = gas_estimate.max_priority_fee_per_gas
            # –£–¥–∞–ª—è–µ–º gasPrice –¥–ª—è EIP-1559
            transaction.pop('gasPrice', None)
        else:
            # Legacy –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            transaction['gasPrice'] = gas_estimate.gas_price
            # –£–¥–∞–ª—è–µ–º EIP-1559 –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            transaction.pop('maxFeePerGas', None)
            transaction.pop('maxPriorityFeePerGas', None)
        
        logger.debug(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: gas={gas_estimate.gas_limit}")
        return transaction
    
    async def optimize_batch_transactions(
        self,
        transactions: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """
        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç—á–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≥–∞–∑–∞.
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            
        Returns:
            List: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        if not transactions:
            return []
        
        try:
            optimized_transactions = []
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
            old_mode = self.mode
            self.mode = GasMode.BATCHING
            
            for tx in transactions:
                try:
                    # –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    gas_estimate = await self.estimate_gas(tx, speed='safe')
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    optimized_tx = self.prepare_transaction_params(tx, gas_estimate)
                    optimized_transactions.append(optimized_tx)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –µ—Å—Ç—å
                    optimized_transactions.append(tx)
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
            self.mode = old_mode
            
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(optimized_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return optimized_transactions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç—á–∞: {e}")
            return transactions
    
    def _is_cache_valid(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ —Ü–µ–Ω –≥–∞–∑–∞.
        
        Returns:
            bool: True –µ—Å–ª–∏ –∫—ç—à –≤–∞–ª–∏–¥–Ω—ã–π
        """
        if self.gas_price_cache is None:
            return False
        
        cache_age = time.time() - self.cache_timestamp
        return cache_age < self.cache_ttl
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ü–µ–Ω –≥–∞–∑–∞."""
        self.gas_price_cache = None
        self.cache_timestamp = 0
        logger.info("üóëÔ∏è –ö—ç—à —Ü–µ–Ω –≥–∞–∑–∞ –æ—á–∏—â–µ–Ω")
    
    def set_mode(self, mode: GasMode) -> None:
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–æ–º.
        
        Args:
            mode: –ù–æ–≤—ã–π —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–æ–º
        """
        old_mode = self.mode
        self.mode = mode
        self.clear_cache()  # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        logger.info(f"üîÑ –†–µ–∂–∏–º –≥–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω —Å {old_mode.value} –Ω–∞ {mode.value}")
    
    def get_gas_limit_for_operation(self, operation_type: str) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –≥–∞–∑–∞ –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            int: –õ–∏–º–∏—Ç –≥–∞–∑–∞
        """
        return self.gas_limits.get(operation_type, self.gas_limits['transfer'])
    
    async def get_network_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
        """
        try:
            current_gas_price = await asyncio.to_thread(self.w3.eth.gas_price)
            latest_block = await asyncio.to_thread(self.w3.eth.get_block, 'latest')
            
            # –†–∞—Å—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
            utilization = (latest_block.gasUsed / latest_block.gasLimit) * 100
            
            gas_prices = await self.get_gas_price()
            
            return {
                'current_block': latest_block.number,
                'current_gas_price_gwei': current_gas_price / 1e9,
                'network_utilization_percent': round(utilization, 2),
                'recommended_gas_prices': {
                    'safe_gwei': gas_prices.safe_gas_price / 1e9,
                    'standard_gwei': gas_prices.standard_gas_price / 1e9,
                    'fast_gwei': gas_prices.fast_gas_price / 1e9
                },
                'mode': self.mode.value,
                'cache_valid': self._is_cache_valid()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏: {e}")
            return {'error': str(e)}


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['GasManager', 'GasMode', 'GasPrice', 'GasEstimate']


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è
    from blockchain.node_client import Web3Manager
    
    async def test_gas_manager():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GasManager —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ BSC."""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            web3_manager = Web3Manager()
            await web3_manager.initialize()
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
            for mode in GasMode:
                print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞: {mode.value}")
                
                gas_manager = GasManager(web3_manager, mode)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –≥–∞–∑–∞
                gas_prices = await gas_manager.get_gas_price()
                print(f"‚õΩ –¶–µ–Ω—ã –≥–∞–∑–∞: safe={gas_prices.safe_gas_price/1e9:.1f} gwei, "
                      f"standard={gas_prices.standard_gas_price/1e9:.1f} gwei, "
                      f"fast={gas_prices.fast_gas_price/1e9:.1f} gwei")
                
                # –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                test_tx = {
                    'to': '0x1234567890123456789012345678901234567890',
                    'value': 0,
                    'data': '0x'
                }
                
                # –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
                estimate = await gas_manager.estimate_gas(test_tx)
                print(f"üìä –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞: limit={estimate.gas_limit}, "
                      f"cost={estimate.estimated_cost_bnb:.6f} BNB")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
                network_stats = await gas_manager.get_network_stats()
                print(f"üìà –°–µ—Ç—å: –±–ª–æ–∫={network_stats.get('current_block', 'N/A')}, "
                      f"–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å={network_stats.get('network_utilization_percent', 'N/A')}%")
            
            print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GasManager –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # asyncio.run(test_gas_manager())
    print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
