"""
–ú–æ–¥—É–ª—å: Transfer Events Collector –¥–ª—è PLEX Dynamic Staking Manager
–û–ø–∏—Å–∞–Ω–∏–µ: –°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ Transfer —Å–æ–±—ã—Ç–∏–π —Ç–æ–∫–µ–Ω–∞ PLEX
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: Web3Manager, retry, validators
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import asyncio
import time
from typing import Dict, List, Optional, Set, Tuple, Any
from decimal import Decimal
from datetime import datetime, timedelta
from dataclasses import dataclass

from web3 import Web3
from web3.types import LogReceipt

from config.settings import settings
from config.constants import (
    TOKEN_ADDRESS, TOKEN_DECIMALS, CORP_WALLET_ADDRESS,
    TRANSFER_EVENT_SIGNATURE, CREDITS_PER_GETLOGS
)
from utils.logger import get_logger
from utils.retry import blockchain_retry
from utils.validators import AddressValidator
from utils.converters import wei_to_token, format_number
from utils.chunk_strategy import AdaptiveChunkStrategy
from utils.cache_manager import smart_cache
from blockchain.node_client import get_web3_manager

logger = get_logger("TransferCollector")

@dataclass
class TransferEvent:
    """–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è Transfer"""
    tx_hash: str
    block_number: int
    block_timestamp: int
    from_address: str
    to_address: str
    value: Decimal
    log_index: int
    tx_index: int
    gas_price: int
    gas_used: int
    
    @property
    def value_formatted(self) -> str:
        """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        return format_number(self.value, TOKEN_DECIMALS)
    
    @property
    def is_to_corporate(self) -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫"""
        return self.to_address.lower() == CORP_WALLET_ADDRESS.lower()
    
    @property
    def usd_estimate(self) -> Optional[Decimal]:
        """–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –∫—É—Ä—Å)"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å price oracle
        return None

class TransferCollector:
    """–ö–æ–ª–ª–µ–∫—Ç–æ—Ä Transfer —Å–æ–±—ã—Ç–∏–π PLEX —Ç–æ–∫–µ–Ω–∞"""
    def __init__(self, web3_manager=None):
        self.web3_manager = web3_manager or get_web3_manager()
        self.chunk_strategy = AdaptiveChunkStrategy(
            initial_chunk_size=1000,
            max_logs_per_request=500,
            min_chunk_size=50,
            max_chunk_size=5000
        )
        self.validator = AddressValidator()
        self.processed_blocks = set()
        self.transfer_cache = {}
        
        logger.info("TransferCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    @blockchain_retry(max_attempts=3)
    def get_transfers_in_range(self, 
                              start_block: int, 
                              end_block: int,
                              from_address: Optional[str] = None,
                              to_address: Optional[str] = None) -> List[TransferEvent]:
        """
        –ü–æ–ª—É—á–∏—Ç—å Transfer —Å–æ–±—ã—Ç–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –±–ª–æ–∫–æ–≤
        
        Args:
            start_block: –ù–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫
            end_block: –ö–æ–Ω–µ—á–Ω—ã–π –±–ª–æ–∫
            from_address: –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            to_address: –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        logger.info(f"üìä Collecting transfers from blocks {start_block:,} to {end_block:,}")
        
        # –ö—ç—à –∫–ª—é—á
        cache_key = f"transfers_{start_block}_{end_block}_{from_address}_{to_address}"
        if cache_key in self.transfer_cache:
            logger.debug(f"‚úÖ Using cached transfers for {start_block}-{end_block}")
            return self.transfer_cache[cache_key]
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        topics = [Web3.to_hex(TRANSFER_EVENT_SIGNATURE)]
        
        if from_address:
            if not self.validator.is_valid_address(from_address):
                raise ValueError(f"Invalid from_address: {from_address}")
            topics.append(Web3.to_bytes(hexstr=from_address).rjust(32, b'\x00'))
        else:
            topics.append(None)
            
        if to_address:
            if not self.validator.is_valid_address(to_address):
                raise ValueError(f"Invalid to_address: {to_address}")
            topics.append(Web3.to_bytes(hexstr=to_address).rjust(32, b'\x00'))
        else:
            topics.append(None)
        
        # –§–∏–ª—å—Ç—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        filter_params = {
            'fromBlock': hex(start_block),
            'toBlock': hex(end_block),
            'address': Web3.to_checksum_address(TOKEN_ADDRESS),
            'topics': topics
        }
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
            logs = self.web3_manager.w3_http.eth.get_logs(filter_params)
            
            # –¢—Ä–µ–∫–∏–Ω–≥ API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.web3_manager.api_tracker.track_request(CREDITS_PER_GETLOGS)
            
            logger.info(f"‚úÖ Found {len(logs)} transfer events")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π
            transfers = []
            for log in logs:
                try:
                    transfer = self._parse_transfer_log(log)
                    if transfer:
                        transfers.append(transfer)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Failed to parse transfer log: {e}")
                    continue
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.transfer_cache[cache_key] = transfers
            
            return transfers
            
        except Exception as e:
            logger.error(f"‚ùå Error collecting transfers: {e}")
            raise
    
    def _parse_transfer_log(self, log: LogReceipt) -> Optional[TransferEvent]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–∞ Transfer —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ topics
            from_addr = Web3.to_checksum_address("0x" + log['topics'][1].hex()[-40:])
            to_addr = Web3.to_checksum_address("0x" + log['topics'][2].hex()[-40:])
            
            # –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ data
            value_wei = int(log['data'], 16)
            value = wei_to_token(value_wei, TOKEN_DECIMALS)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx_receipt = self.web3_manager.w3_http.eth.get_transaction_receipt(log['transactionHash'])
            tx_data = self.web3_manager.w3_http.eth.get_transaction(log['transactionHash'])
            block_data = self.web3_manager.w3_http.eth.get_block(log['blockNumber'])
            
            return TransferEvent(
                tx_hash=log['transactionHash'].hex(),
                block_number=log['blockNumber'],
                block_timestamp=block_data['timestamp'],
                from_address=from_addr,
                to_address=to_addr,
                value=value,
                log_index=log['logIndex'],
                tx_index=tx_receipt['transactionIndex'],
                gas_price=tx_data['gasPrice'],
                gas_used=tx_receipt['gasUsed']
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error parsing transfer log: {e}")
            return None
    
    def get_address_transfers(self, 
                             address: str, 
                             period_days: int = 30,
                             direction: str = "both") -> Dict[str, List[TransferEvent]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        
        Args:
            address: Ethereum –∞–¥—Ä–µ—Å
            period_days: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
            direction: "sent", "received", "both"
        """
        if not self.validator.is_valid_address(address):
            raise ValueError(f"Invalid address: {address}")
        
        logger.info(f"üîç Analyzing transfers for {address} ({period_days} days)")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–ª–æ–∫–æ–≤
        end_block = self.web3_manager.get_latest_block_number()
        target_timestamp = int((datetime.now() - timedelta(days=period_days)).timestamp())
        start_block = self.web3_manager.find_block_by_timestamp(target_timestamp)
        
        results = {
            "sent": [],
            "received": []
        }
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        if direction in ["sent", "both"]:
            sent_transfers = self.get_transfers_in_range(
                start_block=start_block,
                end_block=end_block,
                from_address=address
            )
            results["sent"] = sent_transfers
            logger.info(f"üì§ Found {len(sent_transfers)} sent transfers")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        if direction in ["received", "both"]:
            received_transfers = self.get_transfers_in_range(
                start_block=start_block,
                end_block=end_block,
                to_address=address
            )
            results["received"] = received_transfers
            logger.info(f"üì• Found {len(received_transfers)} received transfers")
        
        return results
    
    def get_corporate_transfers(self, period_days: int = 30) -> List[TransferEvent]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫"""
        logger.info(f"üè¢ Analyzing corporate transfers ({period_days} days)")
        
        end_block = self.web3_manager.get_latest_block_number()
        target_timestamp = int((datetime.now() - timedelta(days=period_days)).timestamp())
        start_block = self.web3_manager.find_block_by_timestamp(target_timestamp)
        
        corporate_transfers = self.get_transfers_in_range(
            start_block=start_block,
            end_block=end_block,
            to_address=CORP_WALLET_ADDRESS
        )
        
        logger.info(f"üè¢ Found {len(corporate_transfers)} corporate transfers")
        return corporate_transfers
    
    def analyze_transfer_patterns(self, 
                                 transfers: List[TransferEvent]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        if not transfers:
            return {"error": "No transfers to analyze"}
        
        total_value = sum(t.value for t in transfers)
        total_count = len(transfers)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
        daily_stats = {}
        for transfer in transfers:
            date = datetime.fromtimestamp(transfer.block_timestamp).date()
            if date not in daily_stats:
                daily_stats[date] = {"count": 0, "value": Decimal(0)}
            daily_stats[date]["count"] += 1
            daily_stats[date]["value"] += transfer.value
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
        recipient_stats = {}
        for transfer in transfers:
            to_addr = transfer.to_address
            if to_addr not in recipient_stats:
                recipient_stats[to_addr] = {"count": 0, "value": Decimal(0)}
            recipient_stats[to_addr]["count"] += 1
            recipient_stats[to_addr]["value"] += transfer.value
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—ä–µ–º—É
        top_recipients = sorted(
            recipient_stats.items(),
            key=lambda x: x[1]["value"],
            reverse=True
        )[:10]
        
        return {
            "summary": {
                "total_transfers": total_count,
                "total_value": float(total_value),
                "average_value": float(total_value / total_count) if total_count > 0 else 0,
                "date_range": {
                    "start": min(datetime.fromtimestamp(t.block_timestamp) for t in transfers).isoformat(),
                    "end": max(datetime.fromtimestamp(t.block_timestamp) for t in transfers).isoformat()
                }
            },
            "daily_stats": {
                str(date): {
                    "count": stats["count"],
                    "value": float(stats["value"])
                } 
                for date, stats in daily_stats.items()
            },
            "top_recipients": [
                {
                    "address": addr,
                    "count": stats["count"], 
                    "value": float(stats["value"])
                }
                for addr, stats in top_recipients
            ]
        }
    
    def get_bulk_transfers(self, 
                          addresses: List[str], 
                          period_days: int = 30) -> Dict[str, Dict]:
        """–ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤"""
        logger.info(f"üìä Bulk transfer analysis for {len(addresses)} addresses")
        
        results = {}
        
        for i, address in enumerate(addresses):
            try:
                transfers = self.get_address_transfers(address, period_days)
                analysis = {}
                
                # –ê–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                if transfers["sent"]:
                    analysis["sent_analysis"] = self.analyze_transfer_patterns(transfers["sent"])
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤  
                if transfers["received"]:
                    analysis["received_analysis"] = self.analyze_transfer_patterns(transfers["received"])
                
                results[address] = {
                    "transfers": transfers,
                    "analysis": analysis
                }
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                if (i + 1) % 100 == 0:
                    logger.info(f"üìä Processed {i + 1}/{len(addresses)} addresses")
                    
            except Exception as e:
                logger.error(f"‚ùå Error processing {address}: {e}")
                results[address] = {"error": str(e)}
        
        logger.info(f"‚úÖ Bulk transfer analysis completed")
        return results
    
    def get_cache_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
        return {
            "cached_ranges": len(self.transfer_cache),
            "processed_blocks": len(self.processed_blocks)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
transfer_collector = TransferCollector()

def get_transfer_collector() -> TransferCollector:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TransferCollector"""
    return transfer_collector

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TransferCollector
    
    collector = TransferCollector()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    try:
        logger.info("üß™ Testing transfer collection...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        corporate_transfers = collector.get_corporate_transfers(period_days=1)
        logger.info(f"üìä Corporate transfers found: {len(corporate_transfers)}")
        
        if corporate_transfers:
            # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            analysis = collector.analyze_transfer_patterns(corporate_transfers)
            logger.info(f"üìà Analysis result: {analysis['summary']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        cache_stats = collector.get_cache_stats()
        logger.info(f"üíæ Cache stats: {cache_stats}")
        
        logger.info("‚úÖ TransferCollector test completed")
        
    except Exception as e:
        logger.error(f"‚ùå Test failed: {e}")
