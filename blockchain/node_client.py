"""
–ú–æ–¥—É–ª—å: Web3 –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ QuickNode BSC
–û–ø–∏—Å–∞–Ω–∏–µ: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –∫—Ä–µ–¥–∏—Ç–æ–≤, retry –ª–æ–≥–∏–∫–∞
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: web3, requests, asyncio
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import asyncio
import time
from typing import Optional, Dict, List, Any, Union
from decimal import Decimal
import requests
from web3 import Web3
from web3.middleware import geth_poa_middleware
from web3.providers import HTTPProvider, WebsocketProvider
import websockets

from config.settings import settings
from config.constants import (
    QUICKNODE_HTTP, QUICKNODE_WSS, QUICKNODE_API_KEY,
    RATE_LIMIT, API_CREDITS_MONTHLY, CREDITS_PER_GETLOGS, CREDITS_PER_CALL,
    SECONDS_PER_BLOCK
)
from utils.logger import get_logger
from utils.retry import api_call_retry, critical_operation_retry
from utils.validators import TransactionValidator, AddressValidator

logger = get_logger("Web3Manager")


class APIUsageTracker:
    """–¢—Ä–µ–∫–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∫—Ä–µ–¥–∏—Ç–æ–≤ QuickNode"""
    
    def __init__(self):
        self.credits_used = 0
        self.requests_count = 0
        self.start_time = time.time()
        self.last_request_time = 0
        self.requests_per_second = []
        
    def record_request(self, credits_used: int):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API"""
        current_time = time.time()
        self.credits_used += credits_used
        self.requests_count += 1
        
        # –¢—Ä–µ–∫–∏–Ω–≥ RPS
        self.requests_per_second.append(current_time)
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
        self.requests_per_second = [
            t for t in self.requests_per_second 
            if current_time - t <= 1.0
        ]
        
        self.last_request_time = current_time
        
        logger.debug(f"üìä API Usage: +{credits_used} credits | Total: {self.credits_used} | RPS: {len(self.requests_per_second)}")
    
    def get_current_rps(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π RPS"""
        current_time = time.time()
        self.requests_per_second = [
            t for t in self.requests_per_second 
            if current_time - t <= 1.0
        ]
        return len(self.requests_per_second)
    
    def should_wait_for_rate_limit(self) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∂–¥–∞—Ç—å –∏–∑-–∑–∞ rate limit"""
        current_rps = self.get_current_rps()
        if current_rps >= RATE_LIMIT:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            return 1.0 - (time.time() - self.requests_per_second[0])
        return 0.0
    
    def get_usage_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        uptime = time.time() - self.start_time
        daily_credits_used = self.credits_used
        monthly_projection = daily_credits_used * 30 if uptime > 0 else 0
        
        return {
            "credits_used": self.credits_used,
            "requests_count": self.requests_count,
            "uptime_hours": uptime / 3600,
            "avg_credits_per_request": self.credits_used / max(1, self.requests_count),
            "current_rps": self.get_current_rps(),
            "monthly_projection": monthly_projection,
            "remaining_monthly_credits": API_CREDITS_MONTHLY - monthly_projection
        }


class BlockNumberCache:
    """–ö—ç—à –Ω–æ–º–µ—Ä–∞ –±–ª–æ–∫–∞ —Å TTL –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ 90% –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, ttl_seconds: int = 60):
        self._cache = None
        self._timestamp = 0
        self.ttl = ttl_seconds
        
    def get_block_number(self, w3: Web3) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–µ—Ç–∏"""
        now = time.time()
        if self._cache and (now - self._timestamp) < self.ttl:
            logger.debug(f"üì¶ Block number from cache: {self._cache}")
            return self._cache
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞
        self._cache = w3.eth.block_number
        self._timestamp = now
        logger.debug(f"üîÑ Block number refreshed: {self._cache}")
        return self._cache
    
    def invalidate(self):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à"""
        self._cache = None
        self._timestamp = 0


class Web3Manager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ QuickNode BSC"""
    
    def __init__(self):
        self.http_provider = None
        self.ws_provider = None
        self.w3_http = None
        self.w3_ws = None
        self.api_usage = APIUsageTracker()
        self.block_cache = BlockNumberCache()
        self.connection_pool_size = 10
        self.is_connected = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self._setup_http_connection()
        self._setup_websocket_connection()
        
    def _setup_http_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å connection pooling"""
        try:
            # –°–æ–∑–¥–∞–µ–º HTTP –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø—É–ª–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            request_kwargs = {
                'timeout': settings.connection_timeout,
                'headers': {'User-Agent': 'PLEX-Dynamic-Staking-Manager/1.0'}
            }
            
            self.http_provider = HTTPProvider(
                QUICKNODE_HTTP,
                request_kwargs=request_kwargs
            )
            
            # –°–æ–∑–¥–∞–µ–º Web3 –∏–Ω—Å—Ç–∞–Ω—Å
            self.w3_http = Web3(self.http_provider)
            
            # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è BSC (Proof of Authority)
            self.w3_http.middleware_onion.inject(geth_poa_middleware, layer=0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            latest_block = self.w3_http.eth.block_number
            logger.info(f"‚úÖ HTTP connection established. Latest block: {latest_block}")
            self.is_connected = True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to setup HTTP connection: {e}")
            self.is_connected = False
            
    def _setup_websocket_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            self.ws_provider = WebsocketProvider(QUICKNODE_WSS)
            self.w3_ws = Web3(self.ws_provider)
            self.w3_ws.middleware_onion.inject(geth_poa_middleware, layer=0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            latest_block = self.w3_ws.eth.block_number
            logger.info(f"‚úÖ WebSocket connection established. Latest block: {latest_block}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è WebSocket connection failed: {e}")
            self.w3_ws = None
    
    @api_call_retry()
    def get_latest_block_number(self, use_cache: bool = True) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞"""
        if use_cache:
            block_number = self.block_cache.get_block_number(self.w3_http)
        else:
            block_number = self.w3_http.eth.block_number
            
        self.api_usage.record_request(CREDITS_PER_CALL)
        return block_number
    
    @api_call_retry()
    def get_block(self, block_identifier: Union[int, str], full_transactions: bool = False) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        wait_time = self.api_usage.should_wait_for_rate_limit()
        if wait_time > 0:
            logger.debug(f"‚è≥ Rate limit wait: {wait_time:.2f}s")
            time.sleep(wait_time)
        
        block = self.w3_http.eth.get_block(block_identifier, full_transactions)
        self.api_usage.record_request(CREDITS_PER_CALL)
        
        return dict(block)
    
    @critical_operation_retry()
    def get_logs(self, filter_params: Dict) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        wait_time = self.api_usage.should_wait_for_rate_limit()
        if wait_time > 0:
            logger.debug(f"‚è≥ Rate limit wait: {wait_time:.2f}s")
            time.sleep(wait_time)
        
        try:
            logs = self.w3_http.eth.get_logs(filter_params)
            self.api_usage.record_request(CREDITS_PER_GETLOGS)
            
            logger.debug(f"üìä Retrieved {len(logs)} logs for blocks {filter_params.get('fromBlock', '?')}-{filter_params.get('toBlock', '?')}")
            
            return [dict(log) for log in logs]
            
        except Exception as e:
            error_msg = str(e).lower()
            if "payload too large" in error_msg:
                logger.error(f"‚ùå Payload too large error - reduce block range")
                raise Exception("Payload too large - reduce block range")
            else:
                raise e
    
    @api_call_retry()
    def call_contract_function(self, contract_address: str, function_data: str, block: int = None) -> str:
        """–í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        call_params = {
            'to': Web3.to_checksum_address(contract_address),
            'data': function_data
        }
        
        if block:
            block_identifier = block
        else:
            block_identifier = 'latest'
        
        result = self.w3_http.eth.call(call_params, block_identifier)
        self.api_usage.record_request(CREDITS_PER_CALL)
        
        return result.hex()
    
    @api_call_retry()
    def batch_call(self, calls: List[Dict]) -> List[str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞—Ç—á –≤—ã–∑–æ–≤–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ eth_call"""
        results = []
        
        for call in calls:
            try:
                result = self.call_contract_function(
                    call['to'],
                    call['data'],
                    call.get('block')
                )
                results.append(result)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Batch call failed: {e}")
                results.append("0x")
        
        return results
    
    def find_block_by_timestamp(self, target_timestamp: int, tolerance: int = 60) -> Optional[int]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–æ–∫–∞ –ø–æ timestamp"""
        logger.info(f"üîç Finding block for timestamp {target_timestamp}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ (1 –∑–∞–ø—Ä–æ—Å)
        current_block = self.get_latest_block_number()
        current_block_data = self.get_block(current_block)
        current_timestamp = current_block_data['timestamp']
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±–ª–æ–∫
        time_diff = current_timestamp - target_timestamp
        blocks_diff = int(time_diff / SECONDS_PER_BLOCK)
        estimated_block = max(1, current_block - blocks_diff)
        
        logger.debug(f"üéØ Estimated block: {estimated_block} (diff: {blocks_diff} blocks)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (1 –∑–∞–ø—Ä–æ—Å)
        check_block_data = self.get_block(estimated_block)
        
        # –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –±–ª–∏–∑–∫–æ (¬±100 –±–ª–æ–∫–æ–≤), –¥–µ–ª–∞–µ–º –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫
        if abs(check_block_data['timestamp'] - target_timestamp) < 300:  # ~5 –º–∏–Ω—É—Ç
            return self._linear_search_block(estimated_block, target_timestamp)
        else:
            # –ò–Ω–∞—á–µ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
            return self._binary_search_block(estimated_block, target_timestamp, current_block)
    
    def _linear_search_block(self, start_block: int, target_timestamp: int) -> int:
        """–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–æ–∫–∞ (–¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)"""
        current_block = start_block
        
        for _ in range(200):  # –ú–∞–∫—Å–∏–º—É–º 200 –±–ª–æ–∫–æ–≤
            block_data = self.get_block(current_block)
            block_timestamp = block_data['timestamp']
            
            if block_timestamp <= target_timestamp:
                return current_block
            
            current_block -= 1
            
        logger.warning(f"‚ö†Ô∏è Linear search limit reached")
        return current_block
    
    def _binary_search_block(self, estimated_block: int, target_timestamp: int, max_block: int) -> int:
        """–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–æ–∫–∞"""
        left = 1
        right = max_block
        result = estimated_block
        
        while left <= right:
            mid = (left + right) // 2
            block_data = self.get_block(mid)
            block_timestamp = block_data['timestamp']
            
            if block_timestamp <= target_timestamp:
                result = mid
                left = mid + 1
            else:
                right = mid - 1
        
        logger.info(f"‚úÖ Binary search found block: {result}")
        return result
    
    def get_transaction_receipt(self, tx_hash: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å receipt —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            validated_hash = TransactionValidator.validate_tx_hash(tx_hash)
            receipt = self.w3_http.eth.get_transaction_receipt(validated_hash)
            self.api_usage.record_request(CREDITS_PER_CALL)
            
            return dict(receipt)
            
        except Exception as e:
            logger.error(f"‚ùå Error getting transaction receipt {tx_hash}: {e}")
            return None
    
    def estimate_gas(self, transaction: Dict) -> int:
        """–û—Ü–µ–Ω–∏—Ç—å –≥–∞–∑ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            gas_estimate = self.w3_http.eth.estimate_gas(transaction)
            self.api_usage.record_request(CREDITS_PER_CALL)
            
            return gas_estimate
            
        except Exception as e:
            logger.error(f"‚ùå Error estimating gas: {e}")
            return 21000  # –ë–∞–∑–æ–≤—ã–π –≥–∞–∑ –¥–ª—è transfer
    
    def get_gas_price(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≥–∞–∑–∞"""
        try:
            gas_price = self.w3_http.eth.gas_price
            self.api_usage.record_request(CREDITS_PER_CALL)
            
            return gas_price
            
        except Exception as e:
            logger.error(f"‚ùå Error getting gas price: {e}")
            return Web3.to_wei(7, 'gwei')  # Fallback –¥–ª—è BSC
    
    def check_connection_health(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        health = {
            "http_connected": False,
            "ws_connected": False,
            "latest_block": None,
            "node_syncing": None,
            "api_usage": self.api_usage.get_usage_stats()
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP
            if self.w3_http and self.w3_http.is_connected():
                health["http_connected"] = True
                health["latest_block"] = self.get_latest_block_number()
                health["node_syncing"] = self.w3_http.eth.syncing
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket
            if self.w3_ws and self.w3_ws.is_connected():
                health["ws_connected"] = True
            
        except Exception as e:
            logger.error(f"‚ùå Connection health check failed: {e}")
        
        return health
    
    def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–æ–¥–∞–º"""
        logger.info("üîÑ Reconnecting to QuickNode...")
        
        try:
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ HTTP
            self._setup_http_connection()
            
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
            if self.w3_ws:
                self._setup_websocket_connection()
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏
            self.block_cache.invalidate()
            
            logger.info("‚úÖ Reconnection completed")
            
        except Exception as e:
            logger.error(f"‚ùå Reconnection failed: {e}")
    
    def get_web3_instance(self, websocket: bool = False) -> Web3:
        """–ü–æ–ª—É—á–∏—Ç—å Web3 –∏–Ω—Å—Ç–∞–Ω—Å"""
        if websocket and self.w3_ws:
            return self.w3_ws
        return self.w3_http
    
    def close_connections(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            if self.ws_provider:
                # WebSocket –Ω–µ –∏–º–µ–µ—Ç —è–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ close –≤ web3.py
                pass
            
            logger.info("üîå All connections closed")
            
        except Exception as e:
            logger.error(f"‚ùå Error closing connections: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            logger.info("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ Web3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            if hasattr(self, 'web3_http') and self.web3_http:
                # HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                pass
            if hasattr(self, 'web3_ws') and self.web3_ws:
                # WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                pass
            logger.info("‚úÖ Web3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
web3_manager = Web3Manager()


def get_web3_manager() -> Web3Manager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Web3Manager"""
    return web3_manager


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Web3Manager
    
    manager = Web3Manager()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    health = manager.check_connection_health()
    print(f"üìä Connection health: {health}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∞
    try:
        latest_block = manager.get_latest_block_number()
        print(f"üì¶ Latest block: {latest_block}")
        
        block_data = manager.get_block(latest_block)
        print(f"üïê Block timestamp: {block_data['timestamp']}")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–ª–æ–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    try:
        # –ò—â–µ–º –±–ª–æ–∫ 1 —á–∞—Å –Ω–∞–∑–∞–¥
        target_time = int(time.time()) - 3600
        found_block = manager.find_block_by_timestamp(target_time)
        print(f"üéØ Block 1 hour ago: {found_block}")
        
    except Exception as e:
        print(f"‚ùå Block search failed: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API
    stats = manager.api_usage.get_usage_stats()
    print(f"üìà API Usage: {stats}")
    
    print("‚úÖ Web3Manager tested successfully")
