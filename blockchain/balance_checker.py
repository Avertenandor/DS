"""
PLEX Dynamic Staking Manager - Balance Checker
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ BSC —á–µ—Ä–µ–∑ QuickNode API.

–ê–≤—Ç–æ—Ä: PLEX Dynamic Staking Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
from decimal import Decimal
from typing import Dict, List, Optional, Tuple, Union
from web3 import Web3
from web3.contract import Contract
from utils.logger import get_logger
from utils.retry import with_retry
from utils.validators import validate_address
from utils.converters import wei_to_token, token_to_wei
from config.constants import (
    TOKEN_ADDRESS, TOKEN_DECIMALS, USDT_BSC,
    MULTICALL3_BSC, RATE_LIMIT
)

logger = get_logger(__name__)


class BalanceChecker:
    """
    Production-ready –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ BSC.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ PLEX ONE –∏ USDT
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Multicall –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ retry
    """
    
    def __init__(self, web3_manager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BalanceChecker.
        
        Args:
            web3_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä Web3Manager –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BSC
        """
        self.w3_manager = web3_manager
        self.w3 = web3_manager.w3_http
        self.cache: Dict[str, Dict] = {}
        self.cache_ttl = 30  # —Å–µ–∫—É–Ω–¥
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        self._init_contracts()
        
    def _init_contracts(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ERC20 –∏ Multicall3."""
        try:
            # ERC20 ABI –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
            erc20_abi = [
                {
                    "constant": True,
                    "inputs": [{"name": "_owner", "type": "address"}],
                    "name": "balanceOf",
                    "outputs": [{"name": "balance", "type": "uint256"}],
                    "type": "function"
                },
                {
                    "constant": True,
                    "inputs": [],
                    "name": "decimals",
                    "outputs": [{"name": "", "type": "uint8"}],
                    "type": "function"
                },
                {
                    "constant": True,
                    "inputs": [],
                    "name": "symbol",
                    "outputs": [{"name": "", "type": "string"}],
                    "type": "function"
                }
            ]
            
            # Multicall3 ABI (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            multicall3_abi = [
                {
                    "inputs": [
                        {
                            "components": [
                                {"name": "target", "type": "address"},
                                {"name": "callData", "type": "bytes"}
                            ],
                            "name": "calls",
                            "type": "tuple[]"
                        }
                    ],
                    "name": "aggregate",
                    "outputs": [
                        {"name": "blockNumber", "type": "uint256"},
                        {"name": "returnData", "type": "bytes[]"}
                    ],
                    "stateMutability": "view",
                    "type": "function"
                }
            ]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            self.plex_contract = self.w3.eth.contract(
                address=Web3.to_checksum_address(TOKEN_ADDRESS),
                abi=erc20_abi
            )
            
            self.usdt_contract = self.w3.eth.contract(
                address=Web3.to_checksum_address(USDT_BSC),
                abi=erc20_abi
            )
            
            self.multicall_contract = self.w3.eth.contract(
                address=Web3.to_checksum_address(MULTICALL3_BSC),
                abi=multicall3_abi
            )
            
            logger.info("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã BalanceChecker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {e}")
            raise
    
    @with_retry(max_attempts=3, delay=1.0)
    def get_plex_balance(self, address: str) -> Decimal:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ PLEX ONE –¥–ª—è –∞–¥—Ä–µ—Å–∞.
        
        Args:
            address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            
        Returns:
            Decimal: –ë–∞–ª–∞–Ω—Å PLEX ONE (—Å —É—á–µ—Ç–æ–º decimals)
            
        Raises:
            ValueError: –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        """
        if not validate_address(address):
            raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å: {address}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cache_key = f"plex_{address}"
            if self._is_cache_valid(cache_key):
                logger.debug(f"üìã –í–æ–∑–≤—Ä–∞—Ç PLEX –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –∫—ç—à–∞ –¥–ª—è {address[:10]}...")
                return self.cache[cache_key]['balance']
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            checksum_address = Web3.to_checksum_address(address)
            balance_wei = self.plex_contract.functions.balanceOf(checksum_address).call()
            balance_tokens = wei_to_token(balance_wei, TOKEN_DECIMALS)
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self._cache_balance(cache_key, balance_tokens)
            
            logger.debug(f"üí∞ PLEX –±–∞–ª–∞–Ω—Å –¥–ª—è {address[:10]}...: {balance_tokens}")
            return balance_tokens
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PLEX –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {address}: {e}")
            raise
    
    @with_retry(max_attempts=3, delay=1.0)
    def get_usdt_balance(self, address: str) -> Decimal:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDT –¥–ª—è –∞–¥—Ä–µ—Å–∞.
        
        Args:
            address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            
        Returns:
            Decimal: –ë–∞–ª–∞–Ω—Å USDT (—Å —É—á–µ—Ç–æ–º decimals)
        """
        if not validate_address(address):
            raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å: {address}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cache_key = f"usdt_{address}"
            if self._is_cache_valid(cache_key):
                logger.debug(f"üìã –í–æ–∑–≤—Ä–∞—Ç USDT –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –∫—ç—à–∞ –¥–ª—è {address[:10]}...")
                return self.cache[cache_key]['balance']
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            checksum_address = Web3.to_checksum_address(address)
            balance_wei = self.usdt_contract.functions.balanceOf(checksum_address).call()
            balance_tokens = wei_to_token(balance_wei, 18)  # USDT has 18 decimals on BSC
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self._cache_balance(cache_key, balance_tokens)
            
            logger.debug(f"üíµ USDT –±–∞–ª–∞–Ω—Å –¥–ª—è {address[:10]}...: {balance_tokens}")
            return balance_tokens
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è USDT –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {address}: {e}")
            raise
    
    @with_retry(max_attempts=3, delay=1.0)
    def get_bnb_balance(self, address: str) -> Decimal:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ BNB –¥–ª—è –∞–¥—Ä–µ—Å–∞.
        
        Args:
            address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            
        Returns:
            Decimal: –ë–∞–ª–∞–Ω—Å BNB –≤ —ç—Ñ–∏—Ä–∞—Ö
        """
        if not validate_address(address):
            raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å: {address}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cache_key = f"bnb_{address}"
            if self._is_cache_valid(cache_key):
                logger.debug(f"üìã –í–æ–∑–≤—Ä–∞—Ç BNB –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –∫—ç—à–∞ –¥–ª—è {address[:10]}...")
                return self.cache[cache_key]['balance']
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            checksum_address = Web3.to_checksum_address(address)
            balance_wei = self.w3.eth.get_balance(checksum_address)
            balance_bnb = wei_to_token(balance_wei, 18)  # BNB has 18 decimals
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self._cache_balance(cache_key, balance_bnb)
            
            logger.debug(f"üü° BNB –±–∞–ª–∞–Ω—Å –¥–ª—è {address[:10]}...: {balance_bnb}")
            return balance_bnb
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BNB –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {address}: {e}")
            raise
    
    def get_multiple_balances(self, addresses: List[str]) -> Dict[str, Dict[str, Decimal]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Multicall.
        
        Args:
            addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤
            
        Returns:
            Dict: {address: {'plex': balance, 'usdt': balance, 'bnb': balance}}
        """
        if not addresses:
            return {}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤
        valid_addresses = []
        for addr in addresses:
            if validate_address(addr):
                valid_addresses.append(Web3.to_checksum_address(addr))
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞: {addr}")
        
        if not valid_addresses:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤")
            return {}
        
        try:
            results = {}
            
            # –ë–∞—Ç—á–∏ –ø–æ 50 –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            batch_size = 50
            for i in range(0, len(valid_addresses), batch_size):
                batch_addresses = valid_addresses[i:i+batch_size]
                batch_results = self._get_batch_balances(batch_addresses)
                results.update(batch_results)
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã –¥–ª—è {len(results)} –∞–¥—Ä–µ—Å–æ–≤")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            # Fallback –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
            return self._get_balances_individually(valid_addresses)
    
    def _get_batch_balances(self, addresses: List[str]) -> Dict[str, Dict[str, Decimal]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –±–∞—Ç—á–∞ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ Multicall.
        
        Args:
            addresses: –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö checksum –∞–¥—Ä–µ—Å–æ–≤
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –±–∞—Ç—á–∞
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ calls –¥–ª—è Multicall
            calls = []
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤—ã balanceOf –¥–ª—è PLEX –∏ USDT
            for address in addresses:
                # PLEX balanceOf call
                plex_call_data = self.plex_contract.encodeABI(
                    fn_name='balanceOf',
                    args=[address]
                )
                calls.append((TOKEN_ADDRESS, plex_call_data))
                
                # USDT balanceOf call
                usdt_call_data = self.usdt_contract.encodeABI(
                    fn_name='balanceOf',
                    args=[address]
                )
                calls.append((USDT_BSC, usdt_call_data))
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Multicall
            block_number, return_data = self.multicall_contract.functions.aggregate(calls).call()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results = {}
            for i, address in enumerate(addresses):
                plex_idx = i * 2
                usdt_idx = i * 2 + 1
                
                # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ PLEX –±–∞–ª–∞–Ω—Å–∞
                plex_balance_wei = int.from_bytes(return_data[plex_idx], byteorder='big')
                plex_balance = wei_to_token(plex_balance_wei, TOKEN_DECIMALS)
                
                # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ USDT –±–∞–ª–∞–Ω—Å–∞
                usdt_balance_wei = int.from_bytes(return_data[usdt_idx], byteorder='big')
                usdt_balance = wei_to_token(usdt_balance_wei, 18)
                
                # BNB –±–∞–ª–∞–Ω—Å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                bnb_balance = self.get_bnb_balance(address)
                
                results[address] = {
                    'plex': plex_balance,
                    'usdt': usdt_balance,
                    'bnb': bnb_balance
                }
                
                # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                self._cache_balance(f"plex_{address}", plex_balance)
                self._cache_balance(f"usdt_{address}", usdt_balance)
                self._cache_balance(f"bnb_{address}", bnb_balance)
            
            logger.debug(f"üì¶ Multicall: –ø–æ–ª—É—á–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã –¥–ª—è {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Multicall –±–∞—Ç—á–∞: {e}")
            # Fallback –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
            return self._get_balances_individually(addresses)
    
    def _get_balances_individually(self, addresses: List[str]) -> Dict[str, Dict[str, Decimal]]:
        """
        Fallback: –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏.
        
        Args:
            addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–ª–∞–Ω—Å–æ–≤
        """
        results = {}
        
        for address in addresses:
            try:
                results[address] = {
                    'plex': self.get_plex_balance(address),
                    'usdt': self.get_usdt_balance(address),
                    'bnb': self.get_bnb_balance(address)
                }
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {address}: {e}")
                results[address] = {
                    'plex': Decimal('0'),
                    'usdt': Decimal('0'),
                    'bnb': Decimal('0')
                }
        
        return results
    
    def _cache_balance(self, cache_key: str, balance: Decimal) -> None:
        """
        –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å TTL.
        
        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            balance: –ë–∞–ª–∞–Ω—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        import time
        self.cache[cache_key] = {
            'balance': balance,
            'timestamp': time.time()
        }
    
    def _is_cache_valid(self, cache_key: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞.
        
        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫—ç—à –≤–∞–ª–∏–¥–Ω—ã–π
        """
        if cache_key not in self.cache:
            return False
        
        import time
        cache_age = time.time() - self.cache[cache_key]['timestamp']
        return cache_age < self.cache_ttl
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–æ–≤."""
        self.cache.clear()
        logger.info("üóëÔ∏è –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –æ—á–∏—â–µ–Ω")
    
    def get_cache_stats(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        """
        import time
        current_time = time.time()
        
        total_entries = len(self.cache)
        valid_entries = sum(
            1 for entry in self.cache.values()
            if current_time - entry['timestamp'] < self.cache_ttl
        )
        
        return {
            'total_entries': total_entries,
            'valid_entries': valid_entries,
            'expired_entries': total_entries - valid_entries
        }


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['BalanceChecker']


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è
    from blockchain.node_client import Web3Manager
    
    async def test_balance_checker():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BalanceChecker —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ BSC."""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            web3_manager = Web3Manager()
            await web3_manager.initialize()
            
            balance_checker = BalanceChecker(web3_manager)
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å (–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ–ª–¥–µ—Ä PLEX)
            test_address = "0x1234567890123456789012345678901234567890"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
            
            print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BalanceChecker –¥–ª—è {test_address[:10]}...")
            
            # –¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
            plex_balance = balance_checker.get_plex_balance(test_address)
            usdt_balance = balance_checker.get_usdt_balance(test_address)
            bnb_balance = balance_checker.get_bnb_balance(test_address)
            
            print(f"üí∞ PLEX: {plex_balance}")
            print(f"üíµ USDT: {usdt_balance}")
            print(f"üü° BNB: {bnb_balance}")
            
            # –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
            test_addresses = [test_address]  # –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∞–¥—Ä–µ—Å–æ–≤
            batch_results = balance_checker.get_multiple_balances(test_addresses)
            
            print(f"üì¶ –ë–∞—Ç—á —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {batch_results}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
            cache_stats = balance_checker.get_cache_stats()
            print(f"üìä –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {cache_stats}")
            
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BalanceChecker –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # asyncio.run(test_balance_checker())
    print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É")
