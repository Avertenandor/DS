"""
–ú–æ–¥—É–ª—å: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä PancakeSwap –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è PLEX/USDT –ø—É–ª–∞
–û–ø–∏—Å–∞–Ω–∏–µ: –°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ Swap —Å–æ–±—ã—Ç–∏–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂, —Ä–∞—Å—á–µ—Ç USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: web3, decimal
–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import time
from typing import List, Dict, Optional, Tuple, Set
from decimal import Decimal
from datetime import datetime, timedelta
from collections import defaultdict
from web3 import Web3

from config.constants import (
    PLEX_USDT_POOL, TOKEN_ADDRESS, USDT_BSC, TOKEN_DECIMALS,
    SWAP_EVENT_SIGNATURE, DAILY_PURCHASE_MIN, DAILY_PURCHASE_MAX
)
from blockchain.node_client import get_web3_manager
from utils.logger import get_logger
from utils.retry import api_call_retry, critical_operation_retry
from utils.validators import SwapDataValidator, AddressValidator
from utils.converters import TokenConverter, PriceConverter, TimeConverter
from utils.cache_manager import block_cache, smart_cache
from utils.chunk_strategy import AdaptiveChunkStrategy, ProgressiveChunkManager
from utils.multicall_manager import MulticallManager

logger = get_logger("SwapAnalyzer")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è
chunk_strategy = AdaptiveChunkStrategy(
    initial_chunk_size=1000,  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    max_logs_per_request=500,  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –ª–æ–≥–æ–≤
    min_chunk_size=50,
    max_chunk_size=2000
)


class SwapEventProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π Swap"""
    
    def __init__(self):
        self.token0_is_plex = None  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        self.usdt_decimals = 18
        
    def _determine_token_order(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—É–ª–µ (token0/token1)"""
        if self.token0_is_plex is not None:
            return self.token0_is_plex
        
        try:
            web3_manager = get_web3_manager()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø—É–ª–∞
            # –í—ã–∑—ã–≤–∞–µ–º token0() –∏ token1() —Ñ—É–Ω–∫—Ü–∏–∏
            token0_call = web3_manager.call_contract_function(
                PLEX_USDT_POOL,
                "0x0dfe1681"  # token0() selector
            )
            
            token1_call = web3_manager.call_contract_function(
                PLEX_USDT_POOL,
                "0xd21220a7"  # token1() selector
            )
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞
            token0_address = Web3.to_checksum_address("0x" + token0_call[-40:])
            token1_address = Web3.to_checksum_address("0x" + token1_call[-40:])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω PLEX
            self.token0_is_plex = (token0_address.lower() == TOKEN_ADDRESS.lower())
            
            logger.info(f"üîç Pool tokens: token0={token0_address}, token1={token1_address}")
            logger.info(f"üîç Token0 is PLEX: {self.token0_is_plex}")
            
            return self.token0_is_plex
            
        except Exception as e:
            logger.error(f"‚ùå Error determining token order: {e}")
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ PLEX = token1 (–æ–±—ã—á–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
            self.token0_is_plex = False
            return False
    
    def process_swap_log(self, log: Dict) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥ —Å–æ–±—ã—Ç–∏—è Swap"""
        try:            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            topic0 = log['topics'][0]
            if isinstance(topic0, str):
                signature = topic0
            else:
                signature = topic0.hex()
                
            if signature != SWAP_EVENT_SIGNATURE:
                return None
              # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ topics
            try:
                # sender - topic[1]
                if len(log['topics']) > 1:
                    topic1 = log['topics'][1]
                    if isinstance(topic1, str):
                        sender_hex = topic1[2:] if topic1.startswith('0x') else topic1
                    else:
                        sender_hex = topic1.hex()
                    sender = Web3.to_checksum_address("0x" + sender_hex[-40:])
                else:
                    sender = "0x" + "0" * 40
                
                # to - topic[2]
                if len(log['topics']) > 2:
                    topic2 = log['topics'][2]
                    if isinstance(topic2, str):
                        to_hex = topic2[2:] if topic2.startswith('0x') else topic2
                    else:
                        to_hex = topic2.hex()
                    to = Web3.to_checksum_address("0x" + to_hex[-40:])
                else:
                    to = "0x" + "0" * 40
                    
            except Exception as e:
                logger.error(f"‚ùå Error parsing topics: {e}")
                sender = "0x" + "0" * 40
                to = "0x" + "0" * 40
              # –î–µ–∫–æ–¥–∏—Ä—É–µ–º amounts –∏–∑ data
            data = log['data']
            if isinstance(data, str):
                data = data[2:] if data.startswith('0x') else data  # –£–±–∏—Ä–∞–µ–º 0x
            else:
                data = data.hex()
            
            # –ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ uint256 –∑–∞–Ω–∏–º–∞–µ—Ç 64 hex —Å–∏–º–≤–æ–ª–∞ (32 –±–∞–π—Ç–∞)
            try:
                amount0_in = int(data[0:64], 16) if len(data) >= 64 else 0
                amount1_in = int(data[64:128], 16) if len(data) >= 128 else 0
                amount0_out = int(data[128:192], 16) if len(data) >= 192 else 0
                amount1_out = int(data[192:256], 16) if len(data) >= 256 else 0
            except ValueError as ve:
                logger.error(f"‚ùå Error parsing hex amounts: {ve}, data length: {len(data)}")
                return None
              # –ü–æ–ª—É—á–∞–µ–º transaction hash
            tx_hash = log['transactionHash']
            if isinstance(tx_hash, str):
                tx_hash_str = tx_hash
            else:
                tx_hash_str = tx_hash.hex()
                
            # –í–∞–ª–∏–¥–∞—Ü–∏—è swap –¥–∞–Ω–Ω—ã—Ö
            if not SwapDataValidator.validate_swap_amounts(amount0_in, amount1_in, amount0_out, amount1_out):
                logger.warning(f"‚ö†Ô∏è Invalid swap amounts in tx {tx_hash_str}")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            token0_is_plex = self._determine_token_order()
            direction = SwapDataValidator.determine_swap_direction(
                amount0_in, amount1_in, amount0_out, amount1_out, token0_is_plex
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º USD —Å—Ç–æ–∏–º–æ—Å—Ç—å
            usd_value = SwapDataValidator.calculate_usd_value(
                amount0_in, amount1_in, amount0_out, amount1_out, not token0_is_plex
            )
              # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ PLEX
            if token0_is_plex:
                plex_amount = amount0_out if amount0_out > 0 else amount0_in
            else:
                plex_amount = amount1_out if amount1_out > 0 else amount1_in
            
            plex_tokens = TokenConverter.wei_to_token(plex_amount)
            
            return {
                "transaction_hash": tx_hash_str,
                "block_number": log['blockNumber'],
                "log_index": log['logIndex'],
                "sender": sender,
                "to": to,
                "direction": direction,  # "buy" –∏–ª–∏ "sell"
                "plex_amount": plex_tokens,
                "usd_value": usd_value,
                "amount0_in": amount0_in,
                "amount1_in": amount1_in,
                "amount0_out": amount0_out,
                "amount1_out": amount1_out,
                "timestamp": None  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error processing swap log: {e}")
            return None


class SwapAnalyzer:
    """–ì–ª–∞–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä PancakeSwap –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, web3_manager=None):
        self.web3_manager = web3_manager or get_web3_manager()
        self.chunk_strategy = AdaptiveChunkStrategy()
        self.swap_processor = SwapEventProcessor()
        self.processed_blocks = set()
        self.swap_cache = {}  # –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö swap'–æ–≤
    
    @critical_operation_retry()
    def get_pool_swaps(self, start_block: int, end_block: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å swap —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø—É–ª–∞ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        
        blocks_count = end_block - start_block + 1
        logger.info(f"üìä Collecting swaps from blocks {start_block:,} to {end_block:,}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
        cache_key = f"swaps:{PLEX_USDT_POOL}:{start_block}:{end_block}"
        cached_swaps = smart_cache.get(cache_key)
        
        if cached_swaps is not None:
            logger.info(f"üì¶ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(cached_swaps)} swap'–æ–≤ –∏–∑ –∫—ç—à–∞")
            return cached_swaps
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            if blocks_count > 1000:
                return self._get_swaps_with_chunking(start_block, end_block)
            
            # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ - –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
            filter_params = {
                'fromBlock': hex(start_block),
                'toBlock': hex(end_block),
                'address': Web3.to_checksum_address(PLEX_USDT_POOL),
                'topics': [SWAP_EVENT_SIGNATURE]
            }
            
            logs = self.web3_manager.get_logs(filter_params)
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è
            processed_swaps = []
            for log in logs:
                swap_data = self.swap_processor.process_swap_log(log)
                if swap_data:
                    processed_swaps.append(swap_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            smart_cache.set(cache_key, processed_swaps, ttl=300)
            
            logger.info(f"‚úÖ Processed {len(processed_swaps)} swaps from {len(logs)} logs")
            return processed_swaps
            
        except Exception as e:
            if "payload too large" in str(e).lower():
                logger.error(f"‚ùå Payload too large for blocks {start_block}-{end_block}")
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
                new_size = chunk_strategy.handle_payload_too_large(blocks_count)
                logger.warning(f"üö® –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {new_size}")
                raise Exception("Payload too large - reduce block range")
            else:
                raise e
    
    def _get_swaps_with_chunking(self, start_block: int, end_block: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å swap'—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è"""
        
        def fetch_chunk_swaps(chunk_start: int, chunk_end: int) -> List[Dict]:
            """–ü–æ–ª—É—á–∏—Ç—å swap'—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞"""
            try:
                start_time = time.time()
                
                filter_params = {
                    'fromBlock': hex(chunk_start),
                    'toBlock': hex(chunk_end),
                    'address': Web3.to_checksum_address(PLEX_USDT_POOL),
                    'topics': [SWAP_EVENT_SIGNATURE]
                }
                
                logs = self.web3_manager.get_logs(filter_params)
                
                processed_swaps = []
                for log in logs:
                    swap_data = self.swap_processor.process_swap_log(log)
                    if swap_data:
                        processed_swaps.append(swap_data)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                execution_time = time.time() - start_time
                chunk_strategy.record_result(
                    chunk_size=chunk_end - chunk_start + 1,
                    logs_count=len(logs),
                    execution_time=execution_time,
                    success=True,
                    contract_address=PLEX_USDT_POOL
                )
                
                return processed_swaps
                
            except Exception as e:
                execution_time = time.time() - start_time
                error_type = 'payload_too_large' if '413' in str(e) else 'unknown'
                
                chunk_strategy.record_result(
                    chunk_size=chunk_end - chunk_start + 1,
                    logs_count=0,
                    execution_time=execution_time,
                    success=False,
                    error_type=error_type,
                    contract_address=PLEX_USDT_POOL
                )
                
                if '413' in str(e) or 'payload too large' in str(e).lower():
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
                    new_size = chunk_strategy.handle_payload_too_large(chunk_end - chunk_start + 1)
                    logger.warning(f"üö® Payload too large, –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {new_size}")
                
                raise
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —á–∞–Ω–∫–æ–≤
        progressive_manager = ProgressiveChunkManager(chunk_strategy)
        
        all_swaps = progressive_manager.process_large_range(
            start_block=start_block,
            end_block=end_block,
            fetch_func=fetch_chunk_swaps,
            contract_address=PLEX_USDT_POOL,
            progress_callback=self._log_progress
        )
        
        logger.info(f"üéØ –°–æ–±—Ä–∞–Ω–æ {len(all_swaps)} swap'–æ–≤ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —á–∞–Ω–∫–æ–≤–∞–Ω–∏–µ–º")
        
        return all_swaps
    
    def _log_progress(self, progress_info: Dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        pct = progress_info['percentage']
        current = progress_info['current']
        total = progress_info['total']
        remaining = progress_info.get('estimated_remaining', 0)
        
        if int(pct) % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10%
            logger.info(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {pct:.1f}% ({current:,}/{total:,} –±–ª–æ–∫–æ–≤)")
            logger.info(f"   –û—Å—Ç–∞–ª–æ—Å—å: ~{remaining:.0f}s")
    
    def get_swaps_in_range(self, start_block: int, end_block: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å swap —Å–æ–±—ã—Ç–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –±–ª–æ–∫–æ–≤"""
        return self.get_pool_swaps(start_block, end_block)

    def collect_all_swaps(self, stop_block: int, progress_callback=None) -> List[Dict]:
        """–°–æ–±—Ä–∞—Ç—å –í–°–ï swap —Å–æ–±—ã—Ç–∏—è –ø—É–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
        
        logger.info(f"üöÄ Starting optimized swap collection up to block {stop_block}")
        start_time = time.time()
        
        all_swaps = []
        current_block = 1
        total_blocks = stop_block - current_block
        
        while current_block <= stop_block:
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
            chunk_size = self.chunk_strategy.get_optimal_chunk_size(current_block)
            end_block = min(current_block + chunk_size - 1, stop_block)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º swap'—ã –¥–ª—è —á–∞–Ω–∫–∞
                chunk_swaps = self.get_pool_swaps(current_block, end_block)
                all_swaps.extend(chunk_swaps)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                self.chunk_strategy.record_result(chunk_size, len(chunk_swaps))
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                progress = ((end_block - 1) / total_blocks) * 100
                if progress_callback:
                    progress_callback(f"Collecting swaps: {progress:.1f}%", progress)
                
                logger.debug(f"üìà Progress: {progress:.1f}% | Chunk: {current_block}-{end_block} | Swaps: {len(chunk_swaps)}")
                
                current_block = end_block + 1
                
            except Exception as e:
                if "payload too large" in str(e).lower():
                    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    chunk_size = max(100, chunk_size // 2)
                    end_block = min(current_block + chunk_size - 1, stop_block)
                    logger.warning(f"‚ö†Ô∏è Reducing chunk size to {chunk_size}")
                    continue
                else:
                    logger.error(f"‚ùå Error collecting swaps for blocks {current_block}-{end_block}: {e}")
                    current_block = end_block + 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ swap'–∞–º
        self._add_timestamps_to_swaps(all_swaps)
        
        elapsed = time.time() - start_time
        logger.info(f"‚úÖ Collected {len(all_swaps)} swaps in {elapsed:.1f}s")
        
        return all_swaps
    
    def _add_timestamps_to_swaps(self, swaps: List[Dict]):
        """–î–æ–±–∞–≤–∏—Ç—å timestamp –∫ swap –æ–ø–µ—Ä–∞—Ü–∏—è–º"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        blocks_needed = set(swap['block_number'] for swap in swaps)
        block_timestamps = {}
        
        logger.info(f"üïê Adding timestamps for {len(blocks_needed)} unique blocks")
        
        # –ü–æ–ª—É—á–∞–µ–º timestamp'—ã –±–ª–æ–∫–æ–≤
        for block_num in blocks_needed:
            try:
                block_data = self.web3_manager.get_block(block_num)
                block_timestamps[block_num] = block_data['timestamp']
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not get timestamp for block {block_num}: {e}")
                block_timestamps[block_num] = 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp'—ã –∫ swap'–∞–º
        for swap in swaps:
            swap['timestamp'] = block_timestamps.get(swap['block_number'], 0)
    
    def analyze_address_swaps(self, address: str, swaps: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å swap –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
        
        address = AddressValidator.normalize_address(address)
        address_swaps = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º swap'—ã –ø–æ –∞–¥—Ä–µ—Å—É
        for swap in swaps:
            if swap['to'].lower() == address.lower():
                address_swaps.append(swap)
        
        if not address_swaps:
            return {
                "address": address,
                "total_swaps": 0,
                "total_buys": 0,
                "total_sells": 0,
                "total_buy_usd": Decimal(0),
                "total_sell_usd": Decimal(0),
                "daily_purchases": {},
                "has_sells": False,
                "missed_days": []
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        total_buys = 0
        total_sells = 0
        total_buy_usd = Decimal(0)
        total_sell_usd = Decimal(0)
        daily_purchases = defaultdict(list)
        
        for swap in address_swaps:
            if swap['direction'] == 'buy':
                total_buys += 1
                total_buy_usd += swap['usd_value']
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
                swap_date = datetime.fromtimestamp(swap['timestamp']).date()
                daily_purchases[swap_date].append(swap)
                
            elif swap['direction'] == 'sell':
                total_sells += 1
                total_sell_usd += swap['usd_value']
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
        valid_daily_purchases = {}
        for date, day_swaps in daily_purchases.items():
            day_total_usd = sum(swap['usd_value'] for swap in day_swaps)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤ –¥–Ω–µ–≤–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if Decimal(str(DAILY_PURCHASE_MIN)) <= day_total_usd <= Decimal(str(DAILY_PURCHASE_MAX)):
                valid_daily_purchases[date] = {
                    "total_usd": day_total_usd,
                    "swaps_count": len(day_swaps),
                    "swaps": day_swaps
                }
        
        return {
            "address": address,
            "total_swaps": len(address_swaps),
            "total_buys": total_buys,
            "total_sells": total_sells,
            "total_buy_usd": total_buy_usd,
            "total_sell_usd": total_sell_usd,
            "daily_purchases": valid_daily_purchases,
            "has_sells": total_sells > 0,
            "all_swaps": address_swaps
        }
    
    def get_unique_participants(self, swaps: List[Dict]) -> Set[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ swap –æ–ø–µ—Ä–∞—Ü–∏–π"""
        participants = set()
        
        for swap in swaps:
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            participants.add(swap['to'].lower())
            
            # –ï—Å–ª–∏ sender –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç to, –¥–æ–±–∞–≤–ª—è–µ–º –∏ –µ–≥–æ
            if swap['sender'].lower() != swap['to'].lower():
                participants.add(swap['sender'].lower())
        
        return participants
    
    def categorize_participants(self, swaps: List[Dict], period_days: int) -> Dict:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ swap –æ–ø–µ—Ä–∞—Ü–∏–π"""
        
        participants = self.get_unique_participants(swaps)
        
        logger.info(f"üìä Categorizing {len(participants)} unique participants")
        
        categories = {
            "perfect": [],
            "missed_purchase": [],
            "sold_token": [],
            "transferred": []  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–æ–¥—É–ª–µ
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–Ω–∏ –ø–æ–∫—É–ø–æ–∫
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=period_days)
        expected_dates = set()
        
        current_date = start_date
        while current_date <= end_date:
            expected_dates.add(current_date)
            current_date += timedelta(days=1)
        
        for address in participants:
            analysis = self.analyze_address_swaps(address, swaps)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if analysis['has_sells']:
                # –ü—Ä–æ–¥–∞–≤–∞–ª —Ç–æ–∫–µ–Ω—ã - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
                category_data = {
                    "address": address,
                    "category": "sold_token",
                    "analysis": analysis,
                    "reason": f"Sold {analysis['total_sell_usd']} USD worth of PLEX"
                }
                categories["sold_token"].append(category_data)
                
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
                purchased_dates = set(analysis['daily_purchases'].keys())
                missed_dates = expected_dates - purchased_dates
                
                if missed_dates:
                    # –ü—Ä–æ–ø—É—Å—Ç–∏–ª –¥–Ω–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—è
                    category_data = {
                        "address": address,
                        "category": "missed_purchase",
                        "analysis": analysis,
                        "missed_days": list(missed_dates),
                        "reason": f"Missed {len(missed_dates)} days of purchases"
                    }
                    categories["missed_purchase"].append(category_data)
                    
                else:
                    # –ò–¥–µ–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
                    category_data = {
                        "address": address,
                        "category": "perfect",
                        "analysis": analysis,
                        "reason": "All daily purchases completed"
                    }
                    categories["perfect"].append(category_data)
        
        logger.info(f"‚úÖ Categorization complete:")
        logger.info(f"   Perfect: {len(categories['perfect'])}")
        logger.info(f"   Missed purchases: {len(categories['missed_purchase'])}")
        logger.info(f"   Sold tokens: {len(categories['sold_token'])}")
        
        return categories
    
    def get_cache_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        return {
            "processed_blocks": len(self.processed_blocks),
            "cached_swaps": len(self.swap_cache),
            "chunk_history_size": len(self.chunk_strategy.history)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
swap_analyzer = SwapAnalyzer()


def get_swap_analyzer() -> SwapAnalyzer:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SwapAnalyzer"""
    return swap_analyzer


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SwapAnalyzer
    
    analyzer = SwapAnalyzer()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è swap'–æ–≤ –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    try:
        latest_block = analyzer.web3_manager.get_latest_block_number()
        start_block = latest_block - 100
        
        swaps = analyzer.get_pool_swaps(start_block, latest_block)
        print(f"‚úÖ Found {len(swaps)} swaps in last 100 blocks")
        
        if swaps:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π swap –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            first_swap = swaps[0]
            print(f"üìä Example swap:")
            print(f"   Direction: {first_swap['direction']}")
            print(f"   PLEX amount: {first_swap['plex_amount']}")
            print(f"   USD value: ${first_swap['usd_value']}")
            print(f"   To: {first_swap['to']}")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = analyzer.get_cache_stats()
    print(f"üìà Cache stats: {stats}")
    
    print("‚úÖ SwapAnalyzer tested successfully")
